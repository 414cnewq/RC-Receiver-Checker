ARM GAS  C:\Temp\cc01nvIH.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ADC_Timer.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ADC_Timer_Enable,"ax",%progbits
  20              		.align	2
  21              		.global	ADC_Timer_Enable
  22              		.code	16
  23              		.thumb_func
  24              		.type	ADC_Timer_Enable, %function
  25              	ADC_Timer_Enable:
  26              	.LFB1:
  27              		.file 1 "Generated_Source\\PSoC4\\ADC_Timer.c"
   1:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/ADC_Timer.c **** * File Name: ADC_Timer.c
   3:Generated_Source\PSoC4/ADC_Timer.c **** * Version 2.10
   4:Generated_Source\PSoC4/ADC_Timer.c **** *
   5:Generated_Source\PSoC4/ADC_Timer.c **** * Description:
   6:Generated_Source\PSoC4/ADC_Timer.c **** *  This file provides the source code to the API for the ADC_Timer
   7:Generated_Source\PSoC4/ADC_Timer.c **** *  component
   8:Generated_Source\PSoC4/ADC_Timer.c **** *
   9:Generated_Source\PSoC4/ADC_Timer.c **** * Note:
  10:Generated_Source\PSoC4/ADC_Timer.c **** *  None
  11:Generated_Source\PSoC4/ADC_Timer.c **** *
  12:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
  13:Generated_Source\PSoC4/ADC_Timer.c **** * Copyright 2013-2015, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/ADC_Timer.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/ADC_Timer.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/ADC_Timer.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/ADC_Timer.c **** 
  19:Generated_Source\PSoC4/ADC_Timer.c **** #include "ADC_Timer.h"
  20:Generated_Source\PSoC4/ADC_Timer.c **** 
  21:Generated_Source\PSoC4/ADC_Timer.c **** uint8 ADC_Timer_initVar = 0u;
  22:Generated_Source\PSoC4/ADC_Timer.c **** 
  23:Generated_Source\PSoC4/ADC_Timer.c **** 
  24:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
  25:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_Init
  26:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
  27:Generated_Source\PSoC4/ADC_Timer.c **** *
  28:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
  29:Generated_Source\PSoC4/ADC_Timer.c **** *  Initialize/Restore default ADC_Timer configuration.
  30:Generated_Source\PSoC4/ADC_Timer.c **** *
ARM GAS  C:\Temp\cc01nvIH.s 			page 2


  31:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
  32:Generated_Source\PSoC4/ADC_Timer.c **** *  None
  33:Generated_Source\PSoC4/ADC_Timer.c **** *
  34:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
  35:Generated_Source\PSoC4/ADC_Timer.c **** *  None
  36:Generated_Source\PSoC4/ADC_Timer.c **** *
  37:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
  38:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_Init(void)
  39:Generated_Source\PSoC4/ADC_Timer.c **** {
  40:Generated_Source\PSoC4/ADC_Timer.c **** 
  41:Generated_Source\PSoC4/ADC_Timer.c ****     /* Set values from customizer to CTRL */
  42:Generated_Source\PSoC4/ADC_Timer.c ****     #if (ADC_Timer__QUAD == ADC_Timer_CONFIG)
  43:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_CONTROL_REG = ADC_Timer_CTRL_QUAD_BASE_CONFIG;
  44:Generated_Source\PSoC4/ADC_Timer.c ****         
  45:Generated_Source\PSoC4/ADC_Timer.c ****         /* Set values from customizer to CTRL1 */
  46:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_TRIG_CONTROL1_REG  = ADC_Timer_QUAD_SIGNALS_MODES;
  47:Generated_Source\PSoC4/ADC_Timer.c **** 
  48:Generated_Source\PSoC4/ADC_Timer.c ****         /* Set values from customizer to INTR */
  49:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_SetInterruptMode(ADC_Timer_QUAD_INTERRUPT_MASK);
  50:Generated_Source\PSoC4/ADC_Timer.c ****         
  51:Generated_Source\PSoC4/ADC_Timer.c ****          /* Set other values */
  52:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_SetCounterMode(ADC_Timer_COUNT_DOWN);
  53:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_WritePeriod(ADC_Timer_QUAD_PERIOD_INIT_VALUE);
  54:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_WriteCounter(ADC_Timer_QUAD_PERIOD_INIT_VALUE);
  55:Generated_Source\PSoC4/ADC_Timer.c ****     #endif  /* (ADC_Timer__QUAD == ADC_Timer_CONFIG) */
  56:Generated_Source\PSoC4/ADC_Timer.c **** 
  57:Generated_Source\PSoC4/ADC_Timer.c ****     #if (ADC_Timer__TIMER == ADC_Timer_CONFIG)
  58:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_CONTROL_REG = ADC_Timer_CTRL_TIMER_BASE_CONFIG;
  59:Generated_Source\PSoC4/ADC_Timer.c ****         
  60:Generated_Source\PSoC4/ADC_Timer.c ****         /* Set values from customizer to CTRL1 */
  61:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_TRIG_CONTROL1_REG  = ADC_Timer_TIMER_SIGNALS_MODES;
  62:Generated_Source\PSoC4/ADC_Timer.c ****     
  63:Generated_Source\PSoC4/ADC_Timer.c ****         /* Set values from customizer to INTR */
  64:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_SetInterruptMode(ADC_Timer_TC_INTERRUPT_MASK);
  65:Generated_Source\PSoC4/ADC_Timer.c ****         
  66:Generated_Source\PSoC4/ADC_Timer.c ****         /* Set other values from customizer */
  67:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_WritePeriod(ADC_Timer_TC_PERIOD_VALUE );
  68:Generated_Source\PSoC4/ADC_Timer.c **** 
  69:Generated_Source\PSoC4/ADC_Timer.c ****         #if (ADC_Timer__COMPARE == ADC_Timer_TC_COMP_CAP_MODE)
  70:Generated_Source\PSoC4/ADC_Timer.c ****             ADC_Timer_WriteCompare(ADC_Timer_TC_COMPARE_VALUE);
  71:Generated_Source\PSoC4/ADC_Timer.c **** 
  72:Generated_Source\PSoC4/ADC_Timer.c ****             #if (1u == ADC_Timer_TC_COMPARE_SWAP)
  73:Generated_Source\PSoC4/ADC_Timer.c ****                 ADC_Timer_SetCompareSwap(1u);
  74:Generated_Source\PSoC4/ADC_Timer.c ****                 ADC_Timer_WriteCompareBuf(ADC_Timer_TC_COMPARE_BUF_VALUE);
  75:Generated_Source\PSoC4/ADC_Timer.c ****             #endif  /* (1u == ADC_Timer_TC_COMPARE_SWAP) */
  76:Generated_Source\PSoC4/ADC_Timer.c ****         #endif  /* (ADC_Timer__COMPARE == ADC_Timer_TC_COMP_CAP_MODE) */
  77:Generated_Source\PSoC4/ADC_Timer.c **** 
  78:Generated_Source\PSoC4/ADC_Timer.c ****         /* Initialize counter value */
  79:Generated_Source\PSoC4/ADC_Timer.c ****         #if (ADC_Timer_CY_TCPWM_V2 && ADC_Timer_TIMER_UPDOWN_CNT_USED && !ADC_Timer_CY_TCPWM_4000)
  80:Generated_Source\PSoC4/ADC_Timer.c ****             ADC_Timer_WriteCounter(1u);
  81:Generated_Source\PSoC4/ADC_Timer.c ****         #elif(ADC_Timer__COUNT_DOWN == ADC_Timer_TC_COUNTER_MODE)
  82:Generated_Source\PSoC4/ADC_Timer.c ****             ADC_Timer_WriteCounter(ADC_Timer_TC_PERIOD_VALUE);
  83:Generated_Source\PSoC4/ADC_Timer.c ****         #else
  84:Generated_Source\PSoC4/ADC_Timer.c ****             ADC_Timer_WriteCounter(0u);
  85:Generated_Source\PSoC4/ADC_Timer.c ****         #endif /* (ADC_Timer_CY_TCPWM_V2 && ADC_Timer_TIMER_UPDOWN_CNT_USED && !ADC_Timer_CY_TCPWM_
  86:Generated_Source\PSoC4/ADC_Timer.c ****     #endif  /* (ADC_Timer__TIMER == ADC_Timer_CONFIG) */
  87:Generated_Source\PSoC4/ADC_Timer.c **** 
ARM GAS  C:\Temp\cc01nvIH.s 			page 3


  88:Generated_Source\PSoC4/ADC_Timer.c ****     #if (ADC_Timer__PWM_SEL == ADC_Timer_CONFIG)
  89:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_CONTROL_REG = ADC_Timer_CTRL_PWM_BASE_CONFIG;
  90:Generated_Source\PSoC4/ADC_Timer.c **** 
  91:Generated_Source\PSoC4/ADC_Timer.c ****         #if (ADC_Timer__PWM_PR == ADC_Timer_PWM_MODE)
  92:Generated_Source\PSoC4/ADC_Timer.c ****             ADC_Timer_CONTROL_REG |= ADC_Timer_CTRL_PWM_RUN_MODE;
  93:Generated_Source\PSoC4/ADC_Timer.c ****             ADC_Timer_WriteCounter(ADC_Timer_PWM_PR_INIT_VALUE);
  94:Generated_Source\PSoC4/ADC_Timer.c ****         #else
  95:Generated_Source\PSoC4/ADC_Timer.c ****             ADC_Timer_CONTROL_REG |= ADC_Timer_CTRL_PWM_ALIGN | ADC_Timer_CTRL_PWM_KILL_EVENT;
  96:Generated_Source\PSoC4/ADC_Timer.c ****             
  97:Generated_Source\PSoC4/ADC_Timer.c ****             /* Initialize counter value */
  98:Generated_Source\PSoC4/ADC_Timer.c ****             #if (ADC_Timer_CY_TCPWM_V2 && ADC_Timer_PWM_UPDOWN_CNT_USED && !ADC_Timer_CY_TCPWM_4000
  99:Generated_Source\PSoC4/ADC_Timer.c ****                 ADC_Timer_WriteCounter(1u);
 100:Generated_Source\PSoC4/ADC_Timer.c ****             #elif (ADC_Timer__RIGHT == ADC_Timer_PWM_ALIGN)
 101:Generated_Source\PSoC4/ADC_Timer.c ****                 ADC_Timer_WriteCounter(ADC_Timer_PWM_PERIOD_VALUE);
 102:Generated_Source\PSoC4/ADC_Timer.c ****             #else 
 103:Generated_Source\PSoC4/ADC_Timer.c ****                 ADC_Timer_WriteCounter(0u);
 104:Generated_Source\PSoC4/ADC_Timer.c ****             #endif  /* (ADC_Timer_CY_TCPWM_V2 && ADC_Timer_PWM_UPDOWN_CNT_USED && !ADC_Timer_CY_TCP
 105:Generated_Source\PSoC4/ADC_Timer.c ****         #endif  /* (ADC_Timer__PWM_PR == ADC_Timer_PWM_MODE) */
 106:Generated_Source\PSoC4/ADC_Timer.c **** 
 107:Generated_Source\PSoC4/ADC_Timer.c ****         #if (ADC_Timer__PWM_DT == ADC_Timer_PWM_MODE)
 108:Generated_Source\PSoC4/ADC_Timer.c ****             ADC_Timer_CONTROL_REG |= ADC_Timer_CTRL_PWM_DEAD_TIME_CYCLE;
 109:Generated_Source\PSoC4/ADC_Timer.c ****         #endif  /* (ADC_Timer__PWM_DT == ADC_Timer_PWM_MODE) */
 110:Generated_Source\PSoC4/ADC_Timer.c **** 
 111:Generated_Source\PSoC4/ADC_Timer.c ****         #if (ADC_Timer__PWM == ADC_Timer_PWM_MODE)
 112:Generated_Source\PSoC4/ADC_Timer.c ****             ADC_Timer_CONTROL_REG |= ADC_Timer_CTRL_PWM_PRESCALER;
 113:Generated_Source\PSoC4/ADC_Timer.c ****         #endif  /* (ADC_Timer__PWM == ADC_Timer_PWM_MODE) */
 114:Generated_Source\PSoC4/ADC_Timer.c **** 
 115:Generated_Source\PSoC4/ADC_Timer.c ****         /* Set values from customizer to CTRL1 */
 116:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_TRIG_CONTROL1_REG  = ADC_Timer_PWM_SIGNALS_MODES;
 117:Generated_Source\PSoC4/ADC_Timer.c ****     
 118:Generated_Source\PSoC4/ADC_Timer.c ****         /* Set values from customizer to INTR */
 119:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_SetInterruptMode(ADC_Timer_PWM_INTERRUPT_MASK);
 120:Generated_Source\PSoC4/ADC_Timer.c **** 
 121:Generated_Source\PSoC4/ADC_Timer.c ****         /* Set values from customizer to CTRL2 */
 122:Generated_Source\PSoC4/ADC_Timer.c ****         #if (ADC_Timer__PWM_PR == ADC_Timer_PWM_MODE)
 123:Generated_Source\PSoC4/ADC_Timer.c ****             ADC_Timer_TRIG_CONTROL2_REG =
 124:Generated_Source\PSoC4/ADC_Timer.c ****                     (ADC_Timer_CC_MATCH_NO_CHANGE    |
 125:Generated_Source\PSoC4/ADC_Timer.c ****                     ADC_Timer_OVERLOW_NO_CHANGE      |
 126:Generated_Source\PSoC4/ADC_Timer.c ****                     ADC_Timer_UNDERFLOW_NO_CHANGE);
 127:Generated_Source\PSoC4/ADC_Timer.c ****         #else
 128:Generated_Source\PSoC4/ADC_Timer.c ****             #if (ADC_Timer__LEFT == ADC_Timer_PWM_ALIGN)
 129:Generated_Source\PSoC4/ADC_Timer.c ****                 ADC_Timer_TRIG_CONTROL2_REG = ADC_Timer_PWM_MODE_LEFT;
 130:Generated_Source\PSoC4/ADC_Timer.c ****             #endif  /* ( ADC_Timer_PWM_LEFT == ADC_Timer_PWM_ALIGN) */
 131:Generated_Source\PSoC4/ADC_Timer.c **** 
 132:Generated_Source\PSoC4/ADC_Timer.c ****             #if (ADC_Timer__RIGHT == ADC_Timer_PWM_ALIGN)
 133:Generated_Source\PSoC4/ADC_Timer.c ****                 ADC_Timer_TRIG_CONTROL2_REG = ADC_Timer_PWM_MODE_RIGHT;
 134:Generated_Source\PSoC4/ADC_Timer.c ****             #endif  /* ( ADC_Timer_PWM_RIGHT == ADC_Timer_PWM_ALIGN) */
 135:Generated_Source\PSoC4/ADC_Timer.c **** 
 136:Generated_Source\PSoC4/ADC_Timer.c ****             #if (ADC_Timer__CENTER == ADC_Timer_PWM_ALIGN)
 137:Generated_Source\PSoC4/ADC_Timer.c ****                 ADC_Timer_TRIG_CONTROL2_REG = ADC_Timer_PWM_MODE_CENTER;
 138:Generated_Source\PSoC4/ADC_Timer.c ****             #endif  /* ( ADC_Timer_PWM_CENTER == ADC_Timer_PWM_ALIGN) */
 139:Generated_Source\PSoC4/ADC_Timer.c **** 
 140:Generated_Source\PSoC4/ADC_Timer.c ****             #if (ADC_Timer__ASYMMETRIC == ADC_Timer_PWM_ALIGN)
 141:Generated_Source\PSoC4/ADC_Timer.c ****                 ADC_Timer_TRIG_CONTROL2_REG = ADC_Timer_PWM_MODE_ASYM;
 142:Generated_Source\PSoC4/ADC_Timer.c ****             #endif  /* (ADC_Timer__ASYMMETRIC == ADC_Timer_PWM_ALIGN) */
 143:Generated_Source\PSoC4/ADC_Timer.c ****         #endif  /* (ADC_Timer__PWM_PR == ADC_Timer_PWM_MODE) */
 144:Generated_Source\PSoC4/ADC_Timer.c **** 
ARM GAS  C:\Temp\cc01nvIH.s 			page 4


 145:Generated_Source\PSoC4/ADC_Timer.c ****         /* Set other values from customizer */
 146:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_WritePeriod(ADC_Timer_PWM_PERIOD_VALUE );
 147:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_WriteCompare(ADC_Timer_PWM_COMPARE_VALUE);
 148:Generated_Source\PSoC4/ADC_Timer.c **** 
 149:Generated_Source\PSoC4/ADC_Timer.c ****         #if (1u == ADC_Timer_PWM_COMPARE_SWAP)
 150:Generated_Source\PSoC4/ADC_Timer.c ****             ADC_Timer_SetCompareSwap(1u);
 151:Generated_Source\PSoC4/ADC_Timer.c ****             ADC_Timer_WriteCompareBuf(ADC_Timer_PWM_COMPARE_BUF_VALUE);
 152:Generated_Source\PSoC4/ADC_Timer.c ****         #endif  /* (1u == ADC_Timer_PWM_COMPARE_SWAP) */
 153:Generated_Source\PSoC4/ADC_Timer.c **** 
 154:Generated_Source\PSoC4/ADC_Timer.c ****         #if (1u == ADC_Timer_PWM_PERIOD_SWAP)
 155:Generated_Source\PSoC4/ADC_Timer.c ****             ADC_Timer_SetPeriodSwap(1u);
 156:Generated_Source\PSoC4/ADC_Timer.c ****             ADC_Timer_WritePeriodBuf(ADC_Timer_PWM_PERIOD_BUF_VALUE);
 157:Generated_Source\PSoC4/ADC_Timer.c ****         #endif  /* (1u == ADC_Timer_PWM_PERIOD_SWAP) */
 158:Generated_Source\PSoC4/ADC_Timer.c ****     #endif  /* (ADC_Timer__PWM_SEL == ADC_Timer_CONFIG) */
 159:Generated_Source\PSoC4/ADC_Timer.c ****     
 160:Generated_Source\PSoC4/ADC_Timer.c **** }
 161:Generated_Source\PSoC4/ADC_Timer.c **** 
 162:Generated_Source\PSoC4/ADC_Timer.c **** 
 163:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 164:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_Enable
 165:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 166:Generated_Source\PSoC4/ADC_Timer.c **** *
 167:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 168:Generated_Source\PSoC4/ADC_Timer.c **** *  Enables the ADC_Timer.
 169:Generated_Source\PSoC4/ADC_Timer.c **** *
 170:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 171:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 172:Generated_Source\PSoC4/ADC_Timer.c **** *
 173:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 174:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 175:Generated_Source\PSoC4/ADC_Timer.c **** *
 176:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 177:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_Enable(void)
 178:Generated_Source\PSoC4/ADC_Timer.c **** {
  28              		.loc 1 178 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
 179:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
 180:Generated_Source\PSoC4/ADC_Timer.c **** 
 181:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
  36              		.loc 1 181 0
  37 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  38              	.LVL0:
 182:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_BLOCK_CONTROL_REG |= ADC_Timer_MASK;
  39              		.loc 1 182 0
  40 0006 044A     		ldr	r2, .L2
  41 0008 1168     		ldr	r1, [r2]
  42 000a 0123     		movs	r3, #1
  43 000c 0B43     		orrs	r3, r1
  44 000e 1360     		str	r3, [r2]
 183:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
  45              		.loc 1 183 0
ARM GAS  C:\Temp\cc01nvIH.s 			page 5


  46 0010 FFF7FEFF 		bl	CyExitCriticalSection
  47              	.LVL1:
 184:Generated_Source\PSoC4/ADC_Timer.c **** 
 185:Generated_Source\PSoC4/ADC_Timer.c ****     /* Start Timer or PWM if start input is absent */
 186:Generated_Source\PSoC4/ADC_Timer.c ****     #if (ADC_Timer__PWM_SEL == ADC_Timer_CONFIG)
 187:Generated_Source\PSoC4/ADC_Timer.c ****         #if (0u == ADC_Timer_PWM_START_SIGNAL_PRESENT)
 188:Generated_Source\PSoC4/ADC_Timer.c ****             ADC_Timer_TriggerCommand(ADC_Timer_MASK, ADC_Timer_CMD_START);
 189:Generated_Source\PSoC4/ADC_Timer.c ****         #endif /* (0u == ADC_Timer_PWM_START_SIGNAL_PRESENT) */
 190:Generated_Source\PSoC4/ADC_Timer.c ****     #endif /* (ADC_Timer__PWM_SEL == ADC_Timer_CONFIG) */
 191:Generated_Source\PSoC4/ADC_Timer.c **** 
 192:Generated_Source\PSoC4/ADC_Timer.c ****     #if (ADC_Timer__TIMER == ADC_Timer_CONFIG)
 193:Generated_Source\PSoC4/ADC_Timer.c ****         #if (0u == ADC_Timer_TC_START_SIGNAL_PRESENT)
 194:Generated_Source\PSoC4/ADC_Timer.c ****             ADC_Timer_TriggerCommand(ADC_Timer_MASK, ADC_Timer_CMD_START);
 195:Generated_Source\PSoC4/ADC_Timer.c ****         #endif /* (0u == ADC_Timer_TC_START_SIGNAL_PRESENT) */
 196:Generated_Source\PSoC4/ADC_Timer.c ****     #endif /* (ADC_Timer__TIMER == ADC_Timer_CONFIG) */
 197:Generated_Source\PSoC4/ADC_Timer.c ****     
 198:Generated_Source\PSoC4/ADC_Timer.c ****     #if (ADC_Timer__QUAD == ADC_Timer_CONFIG)
 199:Generated_Source\PSoC4/ADC_Timer.c ****         #if (0u != ADC_Timer_QUAD_AUTO_START)
 200:Generated_Source\PSoC4/ADC_Timer.c ****             ADC_Timer_TriggerCommand(ADC_Timer_MASK, ADC_Timer_CMD_RELOAD);
 201:Generated_Source\PSoC4/ADC_Timer.c ****         #endif /* (0u != ADC_Timer_QUAD_AUTO_START) */
 202:Generated_Source\PSoC4/ADC_Timer.c ****     #endif  /* (ADC_Timer__QUAD == ADC_Timer_CONFIG) */
 203:Generated_Source\PSoC4/ADC_Timer.c **** }
  48              		.loc 1 203 0
  49              		@ sp needed
  50 0014 10BD     		pop	{r4, pc}
  51              	.L3:
  52 0016 C046     		.align	2
  53              	.L2:
  54 0018 00000540 		.word	1074069504
  55              		.cfi_endproc
  56              	.LFE1:
  57              		.size	ADC_Timer_Enable, .-ADC_Timer_Enable
  58              		.section	.text.ADC_Timer_Stop,"ax",%progbits
  59              		.align	2
  60              		.global	ADC_Timer_Stop
  61              		.code	16
  62              		.thumb_func
  63              		.type	ADC_Timer_Stop, %function
  64              	ADC_Timer_Stop:
  65              	.LFB3:
 204:Generated_Source\PSoC4/ADC_Timer.c **** 
 205:Generated_Source\PSoC4/ADC_Timer.c **** 
 206:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 207:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_Start
 208:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 209:Generated_Source\PSoC4/ADC_Timer.c **** *
 210:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 211:Generated_Source\PSoC4/ADC_Timer.c **** *  Initializes the ADC_Timer with default customizer
 212:Generated_Source\PSoC4/ADC_Timer.c **** *  values when called the first time and enables the ADC_Timer.
 213:Generated_Source\PSoC4/ADC_Timer.c **** *  For subsequent calls the configuration is left unchanged and the component is
 214:Generated_Source\PSoC4/ADC_Timer.c **** *  just enabled.
 215:Generated_Source\PSoC4/ADC_Timer.c **** *
 216:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 217:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 218:Generated_Source\PSoC4/ADC_Timer.c **** *
 219:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 220:Generated_Source\PSoC4/ADC_Timer.c **** *  None
ARM GAS  C:\Temp\cc01nvIH.s 			page 6


 221:Generated_Source\PSoC4/ADC_Timer.c **** *
 222:Generated_Source\PSoC4/ADC_Timer.c **** * Global variables:
 223:Generated_Source\PSoC4/ADC_Timer.c **** *  ADC_Timer_initVar: global variable is used to indicate initial
 224:Generated_Source\PSoC4/ADC_Timer.c **** *  configuration of this component.  The variable is initialized to zero and set
 225:Generated_Source\PSoC4/ADC_Timer.c **** *  to 1 the first time ADC_Timer_Start() is called. This allows
 226:Generated_Source\PSoC4/ADC_Timer.c **** *  enabling/disabling a component without re-initialization in all subsequent
 227:Generated_Source\PSoC4/ADC_Timer.c **** *  calls to the ADC_Timer_Start() routine.
 228:Generated_Source\PSoC4/ADC_Timer.c **** *
 229:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 230:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_Start(void)
 231:Generated_Source\PSoC4/ADC_Timer.c **** {
 232:Generated_Source\PSoC4/ADC_Timer.c ****     if (0u == ADC_Timer_initVar)
 233:Generated_Source\PSoC4/ADC_Timer.c ****     {
 234:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_Init();
 235:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_initVar = 1u;
 236:Generated_Source\PSoC4/ADC_Timer.c ****     }
 237:Generated_Source\PSoC4/ADC_Timer.c **** 
 238:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_Enable();
 239:Generated_Source\PSoC4/ADC_Timer.c **** }
 240:Generated_Source\PSoC4/ADC_Timer.c **** 
 241:Generated_Source\PSoC4/ADC_Timer.c **** 
 242:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 243:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_Stop
 244:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 245:Generated_Source\PSoC4/ADC_Timer.c **** *
 246:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 247:Generated_Source\PSoC4/ADC_Timer.c **** *  Disables the ADC_Timer.
 248:Generated_Source\PSoC4/ADC_Timer.c **** *
 249:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 250:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 251:Generated_Source\PSoC4/ADC_Timer.c **** *
 252:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 253:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 254:Generated_Source\PSoC4/ADC_Timer.c **** *
 255:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 256:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_Stop(void)
 257:Generated_Source\PSoC4/ADC_Timer.c **** {
  66              		.loc 1 257 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70 0000 10B5     		push	{r4, lr}
  71              		.cfi_def_cfa_offset 8
  72              		.cfi_offset 4, -8
  73              		.cfi_offset 14, -4
 258:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
 259:Generated_Source\PSoC4/ADC_Timer.c **** 
 260:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
  74              		.loc 1 260 0
  75 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  76              	.LVL2:
 261:Generated_Source\PSoC4/ADC_Timer.c **** 
 262:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_BLOCK_CONTROL_REG &= (uint32)~ADC_Timer_MASK;
  77              		.loc 1 262 0
  78 0006 044A     		ldr	r2, .L5
  79 0008 1368     		ldr	r3, [r2]
  80 000a 0121     		movs	r1, #1
ARM GAS  C:\Temp\cc01nvIH.s 			page 7


  81 000c 8B43     		bics	r3, r1
  82 000e 1360     		str	r3, [r2]
 263:Generated_Source\PSoC4/ADC_Timer.c **** 
 264:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
  83              		.loc 1 264 0
  84 0010 FFF7FEFF 		bl	CyExitCriticalSection
  85              	.LVL3:
 265:Generated_Source\PSoC4/ADC_Timer.c **** }
  86              		.loc 1 265 0
  87              		@ sp needed
  88 0014 10BD     		pop	{r4, pc}
  89              	.L6:
  90 0016 C046     		.align	2
  91              	.L5:
  92 0018 00000540 		.word	1074069504
  93              		.cfi_endproc
  94              	.LFE3:
  95              		.size	ADC_Timer_Stop, .-ADC_Timer_Stop
  96              		.section	.text.ADC_Timer_SetMode,"ax",%progbits
  97              		.align	2
  98              		.global	ADC_Timer_SetMode
  99              		.code	16
 100              		.thumb_func
 101              		.type	ADC_Timer_SetMode, %function
 102              	ADC_Timer_SetMode:
 103              	.LFB4:
 266:Generated_Source\PSoC4/ADC_Timer.c **** 
 267:Generated_Source\PSoC4/ADC_Timer.c **** 
 268:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 269:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetMode
 270:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 271:Generated_Source\PSoC4/ADC_Timer.c **** *
 272:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 273:Generated_Source\PSoC4/ADC_Timer.c **** *  Sets the operation mode of the ADC_Timer. This function is used when
 274:Generated_Source\PSoC4/ADC_Timer.c **** *  configured as a generic ADC_Timer and the actual mode of operation is
 275:Generated_Source\PSoC4/ADC_Timer.c **** *  set at runtime. The mode must be set while the component is disabled.
 276:Generated_Source\PSoC4/ADC_Timer.c **** *
 277:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 278:Generated_Source\PSoC4/ADC_Timer.c **** *  mode: Mode for the ADC_Timer to operate in
 279:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
 280:Generated_Source\PSoC4/ADC_Timer.c **** *   - ADC_Timer_MODE_TIMER_COMPARE - Timer / Counter with
 281:Generated_Source\PSoC4/ADC_Timer.c **** *                                                 compare capability
 282:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_MODE_TIMER_CAPTURE - Timer / Counter with
 283:Generated_Source\PSoC4/ADC_Timer.c **** *                                                 capture capability
 284:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_MODE_QUAD - Quadrature decoder
 285:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_MODE_PWM - PWM
 286:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_MODE_PWM_DT - PWM with dead time
 287:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_MODE_PWM_PR - PWM with pseudo random capability
 288:Generated_Source\PSoC4/ADC_Timer.c **** *
 289:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 290:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 291:Generated_Source\PSoC4/ADC_Timer.c **** *
 292:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 293:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetMode(uint32 mode)
 294:Generated_Source\PSoC4/ADC_Timer.c **** {
 104              		.loc 1 294 0
 105              		.cfi_startproc
ARM GAS  C:\Temp\cc01nvIH.s 			page 8


 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              	.LVL4:
 109 0000 10B5     		push	{r4, lr}
 110              		.cfi_def_cfa_offset 8
 111              		.cfi_offset 4, -8
 112              		.cfi_offset 14, -4
 113 0002 0400     		movs	r4, r0
 295:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
 296:Generated_Source\PSoC4/ADC_Timer.c **** 
 297:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
 114              		.loc 1 297 0
 115 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 116              	.LVL5:
 298:Generated_Source\PSoC4/ADC_Timer.c **** 
 299:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG &= (uint32)~ADC_Timer_MODE_MASK;
 117              		.loc 1 299 0
 118 0008 054B     		ldr	r3, .L8
 119 000a 1968     		ldr	r1, [r3]
 120 000c 054A     		ldr	r2, .L8+4
 121 000e 0A40     		ands	r2, r1
 122 0010 1A60     		str	r2, [r3]
 300:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG |= mode;
 123              		.loc 1 300 0
 124 0012 1A68     		ldr	r2, [r3]
 125 0014 1443     		orrs	r4, r2
 126              	.LVL6:
 127 0016 1C60     		str	r4, [r3]
 301:Generated_Source\PSoC4/ADC_Timer.c **** 
 302:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
 128              		.loc 1 302 0
 129 0018 FFF7FEFF 		bl	CyExitCriticalSection
 130              	.LVL7:
 303:Generated_Source\PSoC4/ADC_Timer.c **** }
 131              		.loc 1 303 0
 132              		@ sp needed
 133 001c 10BD     		pop	{r4, pc}
 134              	.L9:
 135 001e C046     		.align	2
 136              	.L8:
 137 0020 00010540 		.word	1074069760
 138 0024 FFFFFFF8 		.word	-117440513
 139              		.cfi_endproc
 140              	.LFE4:
 141              		.size	ADC_Timer_SetMode, .-ADC_Timer_SetMode
 142              		.section	.text.ADC_Timer_SetQDMode,"ax",%progbits
 143              		.align	2
 144              		.global	ADC_Timer_SetQDMode
 145              		.code	16
 146              		.thumb_func
 147              		.type	ADC_Timer_SetQDMode, %function
 148              	ADC_Timer_SetQDMode:
 149              	.LFB5:
 304:Generated_Source\PSoC4/ADC_Timer.c **** 
 305:Generated_Source\PSoC4/ADC_Timer.c **** 
 306:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 307:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetQDMode
ARM GAS  C:\Temp\cc01nvIH.s 			page 9


 308:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 309:Generated_Source\PSoC4/ADC_Timer.c **** *
 310:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 311:Generated_Source\PSoC4/ADC_Timer.c **** *  Sets the the Quadrature Decoder to one of the 3 supported modes.
 312:Generated_Source\PSoC4/ADC_Timer.c **** *  Its functionality is only applicable to Quadrature Decoder operation.
 313:Generated_Source\PSoC4/ADC_Timer.c **** *
 314:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 315:Generated_Source\PSoC4/ADC_Timer.c **** *  qdMode: Quadrature Decoder mode
 316:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
 317:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_MODE_X1 - Counts on phi 1 rising
 318:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_MODE_X2 - Counts on both edges of phi1 (2x faster)
 319:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_MODE_X4 - Counts on both edges of phi1 and phi2
 320:Generated_Source\PSoC4/ADC_Timer.c **** *                                        (4x faster)
 321:Generated_Source\PSoC4/ADC_Timer.c **** *
 322:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 323:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 324:Generated_Source\PSoC4/ADC_Timer.c **** *
 325:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 326:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetQDMode(uint32 qdMode)
 327:Generated_Source\PSoC4/ADC_Timer.c **** {
 150              		.loc 1 327 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              	.LVL8:
 155 0000 10B5     		push	{r4, lr}
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 4, -8
 158              		.cfi_offset 14, -4
 159 0002 0400     		movs	r4, r0
 328:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
 329:Generated_Source\PSoC4/ADC_Timer.c **** 
 330:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
 160              		.loc 1 330 0
 161 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 162              	.LVL9:
 331:Generated_Source\PSoC4/ADC_Timer.c **** 
 332:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG &= (uint32)~ADC_Timer_QUAD_MODE_MASK;
 163              		.loc 1 332 0
 164 0008 054B     		ldr	r3, .L11
 165 000a 1968     		ldr	r1, [r3]
 166 000c 054A     		ldr	r2, .L11+4
 167 000e 0A40     		ands	r2, r1
 168 0010 1A60     		str	r2, [r3]
 333:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG |= qdMode;
 169              		.loc 1 333 0
 170 0012 1A68     		ldr	r2, [r3]
 171 0014 1443     		orrs	r4, r2
 172              	.LVL10:
 173 0016 1C60     		str	r4, [r3]
 334:Generated_Source\PSoC4/ADC_Timer.c **** 
 335:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
 174              		.loc 1 335 0
 175 0018 FFF7FEFF 		bl	CyExitCriticalSection
 176              	.LVL11:
 336:Generated_Source\PSoC4/ADC_Timer.c **** }
 177              		.loc 1 336 0
ARM GAS  C:\Temp\cc01nvIH.s 			page 10


 178              		@ sp needed
 179 001c 10BD     		pop	{r4, pc}
 180              	.L12:
 181 001e C046     		.align	2
 182              	.L11:
 183 0020 00010540 		.word	1074069760
 184 0024 FFFF8FFF 		.word	-7340033
 185              		.cfi_endproc
 186              	.LFE5:
 187              		.size	ADC_Timer_SetQDMode, .-ADC_Timer_SetQDMode
 188              		.section	.text.ADC_Timer_SetPrescaler,"ax",%progbits
 189              		.align	2
 190              		.global	ADC_Timer_SetPrescaler
 191              		.code	16
 192              		.thumb_func
 193              		.type	ADC_Timer_SetPrescaler, %function
 194              	ADC_Timer_SetPrescaler:
 195              	.LFB6:
 337:Generated_Source\PSoC4/ADC_Timer.c **** 
 338:Generated_Source\PSoC4/ADC_Timer.c **** 
 339:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 340:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetPrescaler
 341:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 342:Generated_Source\PSoC4/ADC_Timer.c **** *
 343:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 344:Generated_Source\PSoC4/ADC_Timer.c **** *  Sets the prescaler value that is applied to the clock input.  Not applicable
 345:Generated_Source\PSoC4/ADC_Timer.c **** *  to a PWM with the dead time mode or Quadrature Decoder mode.
 346:Generated_Source\PSoC4/ADC_Timer.c **** *
 347:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 348:Generated_Source\PSoC4/ADC_Timer.c **** *  prescaler: Prescaler divider value
 349:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
 350:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_PRESCALE_DIVBY1    - Divide by 1 (no prescaling)
 351:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_PRESCALE_DIVBY2    - Divide by 2
 352:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_PRESCALE_DIVBY4    - Divide by 4
 353:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_PRESCALE_DIVBY8    - Divide by 8
 354:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_PRESCALE_DIVBY16   - Divide by 16
 355:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_PRESCALE_DIVBY32   - Divide by 32
 356:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_PRESCALE_DIVBY64   - Divide by 64
 357:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_PRESCALE_DIVBY128  - Divide by 128
 358:Generated_Source\PSoC4/ADC_Timer.c **** *
 359:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 360:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 361:Generated_Source\PSoC4/ADC_Timer.c **** *
 362:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 363:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetPrescaler(uint32 prescaler)
 364:Generated_Source\PSoC4/ADC_Timer.c **** {
 196              		.loc 1 364 0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 0
 199              		@ frame_needed = 0, uses_anonymous_args = 0
 200              	.LVL12:
 201 0000 10B5     		push	{r4, lr}
 202              		.cfi_def_cfa_offset 8
 203              		.cfi_offset 4, -8
 204              		.cfi_offset 14, -4
 205 0002 0400     		movs	r4, r0
 365:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
ARM GAS  C:\Temp\cc01nvIH.s 			page 11


 366:Generated_Source\PSoC4/ADC_Timer.c **** 
 367:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
 206              		.loc 1 367 0
 207 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 208              	.LVL13:
 368:Generated_Source\PSoC4/ADC_Timer.c **** 
 369:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG &= (uint32)~ADC_Timer_PRESCALER_MASK;
 209              		.loc 1 369 0
 210 0008 054B     		ldr	r3, .L14
 211 000a 1968     		ldr	r1, [r3]
 212 000c 054A     		ldr	r2, .L14+4
 213 000e 0A40     		ands	r2, r1
 214 0010 1A60     		str	r2, [r3]
 370:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG |= prescaler;
 215              		.loc 1 370 0
 216 0012 1A68     		ldr	r2, [r3]
 217 0014 1443     		orrs	r4, r2
 218              	.LVL14:
 219 0016 1C60     		str	r4, [r3]
 371:Generated_Source\PSoC4/ADC_Timer.c **** 
 372:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
 220              		.loc 1 372 0
 221 0018 FFF7FEFF 		bl	CyExitCriticalSection
 222              	.LVL15:
 373:Generated_Source\PSoC4/ADC_Timer.c **** }
 223              		.loc 1 373 0
 224              		@ sp needed
 225 001c 10BD     		pop	{r4, pc}
 226              	.L15:
 227 001e C046     		.align	2
 228              	.L14:
 229 0020 00010540 		.word	1074069760
 230 0024 FF00FFFF 		.word	-65281
 231              		.cfi_endproc
 232              	.LFE6:
 233              		.size	ADC_Timer_SetPrescaler, .-ADC_Timer_SetPrescaler
 234              		.section	.text.ADC_Timer_SetOneShot,"ax",%progbits
 235              		.align	2
 236              		.global	ADC_Timer_SetOneShot
 237              		.code	16
 238              		.thumb_func
 239              		.type	ADC_Timer_SetOneShot, %function
 240              	ADC_Timer_SetOneShot:
 241              	.LFB7:
 374:Generated_Source\PSoC4/ADC_Timer.c **** 
 375:Generated_Source\PSoC4/ADC_Timer.c **** 
 376:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 377:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetOneShot
 378:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 379:Generated_Source\PSoC4/ADC_Timer.c **** *
 380:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 381:Generated_Source\PSoC4/ADC_Timer.c **** *  Writes the register that controls whether the ADC_Timer runs
 382:Generated_Source\PSoC4/ADC_Timer.c **** *  continuously or stops when terminal count is reached.  By default the
 383:Generated_Source\PSoC4/ADC_Timer.c **** *  ADC_Timer operates in the continuous mode.
 384:Generated_Source\PSoC4/ADC_Timer.c **** *
 385:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 386:Generated_Source\PSoC4/ADC_Timer.c **** *  oneShotEnable
ARM GAS  C:\Temp\cc01nvIH.s 			page 12


 387:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
 388:Generated_Source\PSoC4/ADC_Timer.c **** *     - 0 - Continuous
 389:Generated_Source\PSoC4/ADC_Timer.c **** *     - 1 - Enable One Shot
 390:Generated_Source\PSoC4/ADC_Timer.c **** *
 391:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 392:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 393:Generated_Source\PSoC4/ADC_Timer.c **** *
 394:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 395:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetOneShot(uint32 oneShotEnable)
 396:Generated_Source\PSoC4/ADC_Timer.c **** {
 242              		.loc 1 396 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 246              	.LVL16:
 247 0000 70B5     		push	{r4, r5, r6, lr}
 248              		.cfi_def_cfa_offset 16
 249              		.cfi_offset 4, -16
 250              		.cfi_offset 5, -12
 251              		.cfi_offset 6, -8
 252              		.cfi_offset 14, -4
 253 0002 0400     		movs	r4, r0
 397:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
 398:Generated_Source\PSoC4/ADC_Timer.c **** 
 399:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
 254              		.loc 1 399 0
 255 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 256              	.LVL17:
 400:Generated_Source\PSoC4/ADC_Timer.c **** 
 401:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG &= (uint32)~ADC_Timer_ONESHOT_MASK;
 257              		.loc 1 401 0
 258 0008 0749     		ldr	r1, .L17
 259 000a 0A68     		ldr	r2, [r1]
 260 000c 074B     		ldr	r3, .L17+4
 261 000e 1340     		ands	r3, r2
 262 0010 0B60     		str	r3, [r1]
 402:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG |= ((uint32)((oneShotEnable & ADC_Timer_1BIT_MASK) <<
 263              		.loc 1 402 0
 264 0012 0D68     		ldr	r5, [r1]
 265 0014 A304     		lsls	r3, r4, #18
 266 0016 8022     		movs	r2, #128
 267 0018 D202     		lsls	r2, r2, #11
 268 001a 1340     		ands	r3, r2
 269 001c 2B43     		orrs	r3, r5
 270 001e 0B60     		str	r3, [r1]
 403:Generated_Source\PSoC4/ADC_Timer.c ****                                                                ADC_Timer_ONESHOT_SHIFT));
 404:Generated_Source\PSoC4/ADC_Timer.c **** 
 405:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
 271              		.loc 1 405 0
 272 0020 FFF7FEFF 		bl	CyExitCriticalSection
 273              	.LVL18:
 406:Generated_Source\PSoC4/ADC_Timer.c **** }
 274              		.loc 1 406 0
 275              		@ sp needed
 276              	.LVL19:
 277 0024 70BD     		pop	{r4, r5, r6, pc}
 278              	.L18:
ARM GAS  C:\Temp\cc01nvIH.s 			page 13


 279 0026 C046     		.align	2
 280              	.L17:
 281 0028 00010540 		.word	1074069760
 282 002c FFFFFBFF 		.word	-262145
 283              		.cfi_endproc
 284              	.LFE7:
 285              		.size	ADC_Timer_SetOneShot, .-ADC_Timer_SetOneShot
 286              		.section	.text.ADC_Timer_SetPWMMode,"ax",%progbits
 287              		.align	2
 288              		.global	ADC_Timer_SetPWMMode
 289              		.code	16
 290              		.thumb_func
 291              		.type	ADC_Timer_SetPWMMode, %function
 292              	ADC_Timer_SetPWMMode:
 293              	.LFB8:
 407:Generated_Source\PSoC4/ADC_Timer.c **** 
 408:Generated_Source\PSoC4/ADC_Timer.c **** 
 409:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 410:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetPWMMode
 411:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 412:Generated_Source\PSoC4/ADC_Timer.c **** *
 413:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 414:Generated_Source\PSoC4/ADC_Timer.c **** *  Writes the control register that determines what mode of operation the PWM
 415:Generated_Source\PSoC4/ADC_Timer.c **** *  output lines are driven in.  There is a setting for what to do on a
 416:Generated_Source\PSoC4/ADC_Timer.c **** *  comparison match (CC_MATCH), on an overflow (OVERFLOW) and on an underflow
 417:Generated_Source\PSoC4/ADC_Timer.c **** *  (UNDERFLOW).  The value for each of the three must be ORed together to form
 418:Generated_Source\PSoC4/ADC_Timer.c **** *  the mode.
 419:Generated_Source\PSoC4/ADC_Timer.c **** *
 420:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 421:Generated_Source\PSoC4/ADC_Timer.c **** *  modeMask: A combination of three mode settings.  Mask must include a value
 422:Generated_Source\PSoC4/ADC_Timer.c **** *  for each of the three or use one of the preconfigured PWM settings.
 423:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
 424:Generated_Source\PSoC4/ADC_Timer.c **** *     - CC_MATCH_SET        - Set on comparison match
 425:Generated_Source\PSoC4/ADC_Timer.c **** *     - CC_MATCH_CLEAR      - Clear on comparison match
 426:Generated_Source\PSoC4/ADC_Timer.c **** *     - CC_MATCH_INVERT     - Invert on comparison match
 427:Generated_Source\PSoC4/ADC_Timer.c **** *     - CC_MATCH_NO_CHANGE  - No change on comparison match
 428:Generated_Source\PSoC4/ADC_Timer.c **** *     - OVERLOW_SET         - Set on overflow
 429:Generated_Source\PSoC4/ADC_Timer.c **** *     - OVERLOW_CLEAR       - Clear on  overflow
 430:Generated_Source\PSoC4/ADC_Timer.c **** *     - OVERLOW_INVERT      - Invert on overflow
 431:Generated_Source\PSoC4/ADC_Timer.c **** *     - OVERLOW_NO_CHANGE   - No change on overflow
 432:Generated_Source\PSoC4/ADC_Timer.c **** *     - UNDERFLOW_SET       - Set on underflow
 433:Generated_Source\PSoC4/ADC_Timer.c **** *     - UNDERFLOW_CLEAR     - Clear on underflow
 434:Generated_Source\PSoC4/ADC_Timer.c **** *     - UNDERFLOW_INVERT    - Invert on underflow
 435:Generated_Source\PSoC4/ADC_Timer.c **** *     - UNDERFLOW_NO_CHANGE - No change on underflow
 436:Generated_Source\PSoC4/ADC_Timer.c **** *     - PWM_MODE_LEFT       - Setting for left aligned PWM.  Should be combined
 437:Generated_Source\PSoC4/ADC_Timer.c **** *                             with up counting mode
 438:Generated_Source\PSoC4/ADC_Timer.c **** *     - PWM_MODE_RIGHT      - Setting for right aligned PWM.  Should be combined
 439:Generated_Source\PSoC4/ADC_Timer.c **** *                             with down counting mode
 440:Generated_Source\PSoC4/ADC_Timer.c **** *     - PWM_MODE_CENTER     - Setting for center aligned PWM.  Should be
 441:Generated_Source\PSoC4/ADC_Timer.c **** *                             combined with up/down 0 mode
 442:Generated_Source\PSoC4/ADC_Timer.c **** *     - PWM_MODE_ASYM       - Setting for asymmetric PWM.  Should be combined
 443:Generated_Source\PSoC4/ADC_Timer.c **** *                             with up/down 1 mode
 444:Generated_Source\PSoC4/ADC_Timer.c **** *
 445:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 446:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 447:Generated_Source\PSoC4/ADC_Timer.c **** *
 448:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
ARM GAS  C:\Temp\cc01nvIH.s 			page 14


 449:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetPWMMode(uint32 modeMask)
 450:Generated_Source\PSoC4/ADC_Timer.c **** {
 294              		.loc 1 450 0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 0, uses_anonymous_args = 0
 298              		@ link register save eliminated.
 299              	.LVL20:
 451:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_TRIG_CONTROL2_REG = (modeMask & ADC_Timer_6BIT_MASK);
 300              		.loc 1 451 0
 301 0000 3F23     		movs	r3, #63
 302 0002 1840     		ands	r0, r3
 303              	.LVL21:
 304 0004 014B     		ldr	r3, .L20
 305 0006 1860     		str	r0, [r3]
 452:Generated_Source\PSoC4/ADC_Timer.c **** }
 306              		.loc 1 452 0
 307              		@ sp needed
 308 0008 7047     		bx	lr
 309              	.L21:
 310 000a C046     		.align	2
 311              	.L20:
 312 000c 28010540 		.word	1074069800
 313              		.cfi_endproc
 314              	.LFE8:
 315              		.size	ADC_Timer_SetPWMMode, .-ADC_Timer_SetPWMMode
 316              		.section	.text.ADC_Timer_SetPWMSyncKill,"ax",%progbits
 317              		.align	2
 318              		.global	ADC_Timer_SetPWMSyncKill
 319              		.code	16
 320              		.thumb_func
 321              		.type	ADC_Timer_SetPWMSyncKill, %function
 322              	ADC_Timer_SetPWMSyncKill:
 323              	.LFB9:
 453:Generated_Source\PSoC4/ADC_Timer.c **** 
 454:Generated_Source\PSoC4/ADC_Timer.c **** 
 455:Generated_Source\PSoC4/ADC_Timer.c **** 
 456:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 457:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetPWMSyncKill
 458:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 459:Generated_Source\PSoC4/ADC_Timer.c **** *
 460:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 461:Generated_Source\PSoC4/ADC_Timer.c **** *  Writes the register that controls whether the PWM kill signal (stop input)
 462:Generated_Source\PSoC4/ADC_Timer.c **** *  causes asynchronous or synchronous kill operation.  By default the kill
 463:Generated_Source\PSoC4/ADC_Timer.c **** *  operation is asynchronous.  This functionality is only applicable to the PWM
 464:Generated_Source\PSoC4/ADC_Timer.c **** *  and PWM with dead time modes.
 465:Generated_Source\PSoC4/ADC_Timer.c **** *
 466:Generated_Source\PSoC4/ADC_Timer.c **** *  For Synchronous mode the kill signal disables both the line and line_n
 467:Generated_Source\PSoC4/ADC_Timer.c **** *  signals until the next terminal count.
 468:Generated_Source\PSoC4/ADC_Timer.c **** *
 469:Generated_Source\PSoC4/ADC_Timer.c **** *  For Asynchronous mode the kill signal disables both the line and line_n
 470:Generated_Source\PSoC4/ADC_Timer.c **** *  signals when the kill signal is present.  This mode should only be used
 471:Generated_Source\PSoC4/ADC_Timer.c **** *  when the kill signal (stop input) is configured in the pass through mode
 472:Generated_Source\PSoC4/ADC_Timer.c **** *  (Level sensitive signal).
 473:Generated_Source\PSoC4/ADC_Timer.c **** 
 474:Generated_Source\PSoC4/ADC_Timer.c **** *
 475:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
ARM GAS  C:\Temp\cc01nvIH.s 			page 15


 476:Generated_Source\PSoC4/ADC_Timer.c **** *  syncKillEnable
 477:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
 478:Generated_Source\PSoC4/ADC_Timer.c **** *     - 0 - Asynchronous
 479:Generated_Source\PSoC4/ADC_Timer.c **** *     - 1 - Synchronous
 480:Generated_Source\PSoC4/ADC_Timer.c **** *
 481:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 482:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 483:Generated_Source\PSoC4/ADC_Timer.c **** *
 484:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 485:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetPWMSyncKill(uint32 syncKillEnable)
 486:Generated_Source\PSoC4/ADC_Timer.c **** {
 324              		.loc 1 486 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328              	.LVL22:
 329 0000 70B5     		push	{r4, r5, r6, lr}
 330              		.cfi_def_cfa_offset 16
 331              		.cfi_offset 4, -16
 332              		.cfi_offset 5, -12
 333              		.cfi_offset 6, -8
 334              		.cfi_offset 14, -4
 335 0002 0400     		movs	r4, r0
 487:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
 488:Generated_Source\PSoC4/ADC_Timer.c **** 
 489:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
 336              		.loc 1 489 0
 337 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 338              	.LVL23:
 490:Generated_Source\PSoC4/ADC_Timer.c **** 
 491:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG &= (uint32)~ADC_Timer_PWM_SYNC_KILL_MASK;
 339              		.loc 1 491 0
 340 0008 064A     		ldr	r2, .L23
 341 000a 1368     		ldr	r3, [r2]
 342 000c 0421     		movs	r1, #4
 343 000e 8B43     		bics	r3, r1
 344 0010 1360     		str	r3, [r2]
 492:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG |= ((uint32)((syncKillEnable & ADC_Timer_1BIT_MASK)  <<
 345              		.loc 1 492 0
 346 0012 1568     		ldr	r5, [r2]
 347 0014 A300     		lsls	r3, r4, #2
 348 0016 1940     		ands	r1, r3
 349 0018 0C00     		movs	r4, r1
 350              	.LVL24:
 351 001a 2C43     		orrs	r4, r5
 352 001c 1460     		str	r4, [r2]
 493:Generated_Source\PSoC4/ADC_Timer.c ****                                                ADC_Timer_PWM_SYNC_KILL_SHIFT));
 494:Generated_Source\PSoC4/ADC_Timer.c **** 
 495:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
 353              		.loc 1 495 0
 354 001e FFF7FEFF 		bl	CyExitCriticalSection
 355              	.LVL25:
 496:Generated_Source\PSoC4/ADC_Timer.c **** }
 356              		.loc 1 496 0
 357              		@ sp needed
 358 0022 70BD     		pop	{r4, r5, r6, pc}
 359              	.L24:
ARM GAS  C:\Temp\cc01nvIH.s 			page 16


 360              		.align	2
 361              	.L23:
 362 0024 00010540 		.word	1074069760
 363              		.cfi_endproc
 364              	.LFE9:
 365              		.size	ADC_Timer_SetPWMSyncKill, .-ADC_Timer_SetPWMSyncKill
 366              		.section	.text.ADC_Timer_SetPWMStopOnKill,"ax",%progbits
 367              		.align	2
 368              		.global	ADC_Timer_SetPWMStopOnKill
 369              		.code	16
 370              		.thumb_func
 371              		.type	ADC_Timer_SetPWMStopOnKill, %function
 372              	ADC_Timer_SetPWMStopOnKill:
 373              	.LFB10:
 497:Generated_Source\PSoC4/ADC_Timer.c **** 
 498:Generated_Source\PSoC4/ADC_Timer.c **** 
 499:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 500:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetPWMStopOnKill
 501:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 502:Generated_Source\PSoC4/ADC_Timer.c **** *
 503:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 504:Generated_Source\PSoC4/ADC_Timer.c **** *  Writes the register that controls whether the PWM kill signal (stop input)
 505:Generated_Source\PSoC4/ADC_Timer.c **** *  causes the PWM counter to stop.  By default the kill operation does not stop
 506:Generated_Source\PSoC4/ADC_Timer.c **** *  the counter.  This functionality is only applicable to the three PWM modes.
 507:Generated_Source\PSoC4/ADC_Timer.c **** *
 508:Generated_Source\PSoC4/ADC_Timer.c **** *
 509:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 510:Generated_Source\PSoC4/ADC_Timer.c **** *  stopOnKillEnable
 511:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
 512:Generated_Source\PSoC4/ADC_Timer.c **** *     - 0 - Don't stop
 513:Generated_Source\PSoC4/ADC_Timer.c **** *     - 1 - Stop
 514:Generated_Source\PSoC4/ADC_Timer.c **** *
 515:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 516:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 517:Generated_Source\PSoC4/ADC_Timer.c **** *
 518:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 519:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetPWMStopOnKill(uint32 stopOnKillEnable)
 520:Generated_Source\PSoC4/ADC_Timer.c **** {
 374              		.loc 1 520 0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 0
 377              		@ frame_needed = 0, uses_anonymous_args = 0
 378              	.LVL26:
 379 0000 70B5     		push	{r4, r5, r6, lr}
 380              		.cfi_def_cfa_offset 16
 381              		.cfi_offset 4, -16
 382              		.cfi_offset 5, -12
 383              		.cfi_offset 6, -8
 384              		.cfi_offset 14, -4
 385 0002 0400     		movs	r4, r0
 521:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
 522:Generated_Source\PSoC4/ADC_Timer.c **** 
 523:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
 386              		.loc 1 523 0
 387 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 388              	.LVL27:
 524:Generated_Source\PSoC4/ADC_Timer.c **** 
ARM GAS  C:\Temp\cc01nvIH.s 			page 17


 525:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG &= (uint32)~ADC_Timer_PWM_STOP_KILL_MASK;
 389              		.loc 1 525 0
 390 0008 064A     		ldr	r2, .L26
 391 000a 1368     		ldr	r3, [r2]
 392 000c 0821     		movs	r1, #8
 393 000e 8B43     		bics	r3, r1
 394 0010 1360     		str	r3, [r2]
 526:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG |= ((uint32)((stopOnKillEnable & ADC_Timer_1BIT_MASK)  <<
 395              		.loc 1 526 0
 396 0012 1568     		ldr	r5, [r2]
 397 0014 E300     		lsls	r3, r4, #3
 398 0016 1940     		ands	r1, r3
 399 0018 0C00     		movs	r4, r1
 400              	.LVL28:
 401 001a 2C43     		orrs	r4, r5
 402 001c 1460     		str	r4, [r2]
 527:Generated_Source\PSoC4/ADC_Timer.c ****                                                          ADC_Timer_PWM_STOP_KILL_SHIFT));
 528:Generated_Source\PSoC4/ADC_Timer.c **** 
 529:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
 403              		.loc 1 529 0
 404 001e FFF7FEFF 		bl	CyExitCriticalSection
 405              	.LVL29:
 530:Generated_Source\PSoC4/ADC_Timer.c **** }
 406              		.loc 1 530 0
 407              		@ sp needed
 408 0022 70BD     		pop	{r4, r5, r6, pc}
 409              	.L27:
 410              		.align	2
 411              	.L26:
 412 0024 00010540 		.word	1074069760
 413              		.cfi_endproc
 414              	.LFE10:
 415              		.size	ADC_Timer_SetPWMStopOnKill, .-ADC_Timer_SetPWMStopOnKill
 416              		.section	.text.ADC_Timer_SetPWMDeadTime,"ax",%progbits
 417              		.align	2
 418              		.global	ADC_Timer_SetPWMDeadTime
 419              		.code	16
 420              		.thumb_func
 421              		.type	ADC_Timer_SetPWMDeadTime, %function
 422              	ADC_Timer_SetPWMDeadTime:
 423              	.LFB11:
 531:Generated_Source\PSoC4/ADC_Timer.c **** 
 532:Generated_Source\PSoC4/ADC_Timer.c **** 
 533:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 534:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetPWMDeadTime
 535:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 536:Generated_Source\PSoC4/ADC_Timer.c **** *
 537:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 538:Generated_Source\PSoC4/ADC_Timer.c **** *  Writes the dead time control value.  This value delays the rising edge of
 539:Generated_Source\PSoC4/ADC_Timer.c **** *  both the line and line_n signals the designated number of cycles resulting
 540:Generated_Source\PSoC4/ADC_Timer.c **** *  in both signals being inactive for that many cycles.  This functionality is
 541:Generated_Source\PSoC4/ADC_Timer.c **** *  only applicable to the PWM in the dead time mode.
 542:Generated_Source\PSoC4/ADC_Timer.c **** 
 543:Generated_Source\PSoC4/ADC_Timer.c **** *
 544:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 545:Generated_Source\PSoC4/ADC_Timer.c **** *  Dead time to insert
 546:Generated_Source\PSoC4/ADC_Timer.c **** *   Values: 0 to 255
ARM GAS  C:\Temp\cc01nvIH.s 			page 18


 547:Generated_Source\PSoC4/ADC_Timer.c **** *
 548:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 549:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 550:Generated_Source\PSoC4/ADC_Timer.c **** *
 551:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 552:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetPWMDeadTime(uint32 deadTime)
 553:Generated_Source\PSoC4/ADC_Timer.c **** {
 424              		.loc 1 553 0
 425              		.cfi_startproc
 426              		@ args = 0, pretend = 0, frame = 0
 427              		@ frame_needed = 0, uses_anonymous_args = 0
 428              	.LVL30:
 429 0000 10B5     		push	{r4, lr}
 430              		.cfi_def_cfa_offset 8
 431              		.cfi_offset 4, -8
 432              		.cfi_offset 14, -4
 433 0002 0400     		movs	r4, r0
 554:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
 555:Generated_Source\PSoC4/ADC_Timer.c **** 
 556:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
 434              		.loc 1 556 0
 435 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 436              	.LVL31:
 557:Generated_Source\PSoC4/ADC_Timer.c **** 
 558:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG &= (uint32)~ADC_Timer_PRESCALER_MASK;
 437              		.loc 1 558 0
 438 0008 064B     		ldr	r3, .L29
 439 000a 1968     		ldr	r1, [r3]
 440 000c 064A     		ldr	r2, .L29+4
 441 000e 0A40     		ands	r2, r1
 442 0010 1A60     		str	r2, [r3]
 559:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG |= ((uint32)((deadTime & ADC_Timer_8BIT_MASK) <<
 443              		.loc 1 559 0
 444 0012 1A68     		ldr	r2, [r3]
 445 0014 2406     		lsls	r4, r4, #24
 446              	.LVL32:
 447 0016 240C     		lsrs	r4, r4, #16
 448 0018 1443     		orrs	r4, r2
 449 001a 1C60     		str	r4, [r3]
 560:Generated_Source\PSoC4/ADC_Timer.c ****                                                           ADC_Timer_PRESCALER_SHIFT));
 561:Generated_Source\PSoC4/ADC_Timer.c **** 
 562:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
 450              		.loc 1 562 0
 451 001c FFF7FEFF 		bl	CyExitCriticalSection
 452              	.LVL33:
 563:Generated_Source\PSoC4/ADC_Timer.c **** }
 453              		.loc 1 563 0
 454              		@ sp needed
 455 0020 10BD     		pop	{r4, pc}
 456              	.L30:
 457 0022 C046     		.align	2
 458              	.L29:
 459 0024 00010540 		.word	1074069760
 460 0028 FF00FFFF 		.word	-65281
 461              		.cfi_endproc
 462              	.LFE11:
 463              		.size	ADC_Timer_SetPWMDeadTime, .-ADC_Timer_SetPWMDeadTime
ARM GAS  C:\Temp\cc01nvIH.s 			page 19


 464              		.section	.text.ADC_Timer_SetPWMInvert,"ax",%progbits
 465              		.align	2
 466              		.global	ADC_Timer_SetPWMInvert
 467              		.code	16
 468              		.thumb_func
 469              		.type	ADC_Timer_SetPWMInvert, %function
 470              	ADC_Timer_SetPWMInvert:
 471              	.LFB12:
 564:Generated_Source\PSoC4/ADC_Timer.c **** 
 565:Generated_Source\PSoC4/ADC_Timer.c **** 
 566:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 567:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetPWMInvert
 568:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 569:Generated_Source\PSoC4/ADC_Timer.c **** *
 570:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 571:Generated_Source\PSoC4/ADC_Timer.c **** *  Writes the bits that control whether the line and line_n outputs are
 572:Generated_Source\PSoC4/ADC_Timer.c **** *  inverted from their normal output values.  This functionality is only
 573:Generated_Source\PSoC4/ADC_Timer.c **** *  applicable to the three PWM modes.
 574:Generated_Source\PSoC4/ADC_Timer.c **** *
 575:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 576:Generated_Source\PSoC4/ADC_Timer.c **** *  mask: Mask of outputs to invert.
 577:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
 578:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_INVERT_LINE   - Inverts the line output
 579:Generated_Source\PSoC4/ADC_Timer.c **** *         - ADC_Timer_INVERT_LINE_N - Inverts the line_n output
 580:Generated_Source\PSoC4/ADC_Timer.c **** *
 581:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 582:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 583:Generated_Source\PSoC4/ADC_Timer.c **** *
 584:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 585:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetPWMInvert(uint32 mask)
 586:Generated_Source\PSoC4/ADC_Timer.c **** {
 472              		.loc 1 586 0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 0
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476              	.LVL34:
 477 0000 10B5     		push	{r4, lr}
 478              		.cfi_def_cfa_offset 8
 479              		.cfi_offset 4, -8
 480              		.cfi_offset 14, -4
 481 0002 0400     		movs	r4, r0
 587:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
 588:Generated_Source\PSoC4/ADC_Timer.c **** 
 589:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
 482              		.loc 1 589 0
 483 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 484              	.LVL35:
 590:Generated_Source\PSoC4/ADC_Timer.c **** 
 591:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG &= (uint32)~ADC_Timer_INV_OUT_MASK;
 485              		.loc 1 591 0
 486 0008 054B     		ldr	r3, .L32
 487 000a 1968     		ldr	r1, [r3]
 488 000c 054A     		ldr	r2, .L32+4
 489 000e 0A40     		ands	r2, r1
 490 0010 1A60     		str	r2, [r3]
 592:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG |= mask;
 491              		.loc 1 592 0
ARM GAS  C:\Temp\cc01nvIH.s 			page 20


 492 0012 1A68     		ldr	r2, [r3]
 493 0014 1443     		orrs	r4, r2
 494              	.LVL36:
 495 0016 1C60     		str	r4, [r3]
 593:Generated_Source\PSoC4/ADC_Timer.c **** 
 594:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
 496              		.loc 1 594 0
 497 0018 FFF7FEFF 		bl	CyExitCriticalSection
 498              	.LVL37:
 595:Generated_Source\PSoC4/ADC_Timer.c **** }
 499              		.loc 1 595 0
 500              		@ sp needed
 501 001c 10BD     		pop	{r4, pc}
 502              	.L33:
 503 001e C046     		.align	2
 504              	.L32:
 505 0020 00010540 		.word	1074069760
 506 0024 FFFFCFFF 		.word	-3145729
 507              		.cfi_endproc
 508              	.LFE12:
 509              		.size	ADC_Timer_SetPWMInvert, .-ADC_Timer_SetPWMInvert
 510              		.section	.text.ADC_Timer_WriteCounter,"ax",%progbits
 511              		.align	2
 512              		.global	ADC_Timer_WriteCounter
 513              		.code	16
 514              		.thumb_func
 515              		.type	ADC_Timer_WriteCounter, %function
 516              	ADC_Timer_WriteCounter:
 517              	.LFB13:
 596:Generated_Source\PSoC4/ADC_Timer.c **** 
 597:Generated_Source\PSoC4/ADC_Timer.c **** 
 598:Generated_Source\PSoC4/ADC_Timer.c **** 
 599:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 600:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_WriteCounter
 601:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 602:Generated_Source\PSoC4/ADC_Timer.c **** *
 603:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 604:Generated_Source\PSoC4/ADC_Timer.c **** *  Writes a new 16bit counter value directly into the counter register, thus
 605:Generated_Source\PSoC4/ADC_Timer.c **** *  setting the counter (not the period) to the value written. It is not
 606:Generated_Source\PSoC4/ADC_Timer.c **** *  advised to write to this field when the counter is running.
 607:Generated_Source\PSoC4/ADC_Timer.c **** *
 608:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 609:Generated_Source\PSoC4/ADC_Timer.c **** *  count: value to write
 610:Generated_Source\PSoC4/ADC_Timer.c **** *
 611:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 612:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 613:Generated_Source\PSoC4/ADC_Timer.c **** *
 614:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 615:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_WriteCounter(uint32 count)
 616:Generated_Source\PSoC4/ADC_Timer.c **** {
 518              		.loc 1 616 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 0
 521              		@ frame_needed = 0, uses_anonymous_args = 0
 522              		@ link register save eliminated.
 523              	.LVL38:
 617:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_COUNTER_REG = (count & ADC_Timer_16BIT_MASK);
ARM GAS  C:\Temp\cc01nvIH.s 			page 21


 524              		.loc 1 617 0
 525 0000 0004     		lsls	r0, r0, #16
 526              	.LVL39:
 527 0002 000C     		lsrs	r0, r0, #16
 528 0004 014B     		ldr	r3, .L35
 529 0006 1860     		str	r0, [r3]
 618:Generated_Source\PSoC4/ADC_Timer.c **** }
 530              		.loc 1 618 0
 531              		@ sp needed
 532 0008 7047     		bx	lr
 533              	.L36:
 534 000a C046     		.align	2
 535              	.L35:
 536 000c 08010540 		.word	1074069768
 537              		.cfi_endproc
 538              	.LFE13:
 539              		.size	ADC_Timer_WriteCounter, .-ADC_Timer_WriteCounter
 540              		.section	.text.ADC_Timer_ReadCounter,"ax",%progbits
 541              		.align	2
 542              		.global	ADC_Timer_ReadCounter
 543              		.code	16
 544              		.thumb_func
 545              		.type	ADC_Timer_ReadCounter, %function
 546              	ADC_Timer_ReadCounter:
 547              	.LFB14:
 619:Generated_Source\PSoC4/ADC_Timer.c **** 
 620:Generated_Source\PSoC4/ADC_Timer.c **** 
 621:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_ReadCounter
 623:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 624:Generated_Source\PSoC4/ADC_Timer.c **** *
 625:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 626:Generated_Source\PSoC4/ADC_Timer.c **** *  Reads the current counter value.
 627:Generated_Source\PSoC4/ADC_Timer.c **** *
 628:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 629:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 630:Generated_Source\PSoC4/ADC_Timer.c **** *
 631:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 632:Generated_Source\PSoC4/ADC_Timer.c **** *  Current counter value
 633:Generated_Source\PSoC4/ADC_Timer.c **** *
 634:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 635:Generated_Source\PSoC4/ADC_Timer.c **** uint32 ADC_Timer_ReadCounter(void)
 636:Generated_Source\PSoC4/ADC_Timer.c **** {
 548              		.loc 1 636 0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 552              		@ link register save eliminated.
 637:Generated_Source\PSoC4/ADC_Timer.c ****     return (ADC_Timer_COUNTER_REG & ADC_Timer_16BIT_MASK);
 553              		.loc 1 637 0
 554 0000 024B     		ldr	r3, .L38
 555 0002 1868     		ldr	r0, [r3]
 556 0004 0004     		lsls	r0, r0, #16
 557 0006 000C     		lsrs	r0, r0, #16
 638:Generated_Source\PSoC4/ADC_Timer.c **** }
 558              		.loc 1 638 0
 559              		@ sp needed
ARM GAS  C:\Temp\cc01nvIH.s 			page 22


 560 0008 7047     		bx	lr
 561              	.L39:
 562 000a C046     		.align	2
 563              	.L38:
 564 000c 08010540 		.word	1074069768
 565              		.cfi_endproc
 566              	.LFE14:
 567              		.size	ADC_Timer_ReadCounter, .-ADC_Timer_ReadCounter
 568              		.section	.text.ADC_Timer_SetCounterMode,"ax",%progbits
 569              		.align	2
 570              		.global	ADC_Timer_SetCounterMode
 571              		.code	16
 572              		.thumb_func
 573              		.type	ADC_Timer_SetCounterMode, %function
 574              	ADC_Timer_SetCounterMode:
 575              	.LFB15:
 639:Generated_Source\PSoC4/ADC_Timer.c **** 
 640:Generated_Source\PSoC4/ADC_Timer.c **** 
 641:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 642:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetCounterMode
 643:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 644:Generated_Source\PSoC4/ADC_Timer.c **** *
 645:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 646:Generated_Source\PSoC4/ADC_Timer.c **** *  Sets the counter mode.  Applicable to all modes except Quadrature Decoder
 647:Generated_Source\PSoC4/ADC_Timer.c **** *  and the PWM with a pseudo random output.
 648:Generated_Source\PSoC4/ADC_Timer.c **** *
 649:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 650:Generated_Source\PSoC4/ADC_Timer.c **** *  counterMode: Enumerated counter type values
 651:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
 652:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_COUNT_UP       - Counts up
 653:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_COUNT_DOWN     - Counts down
 654:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_COUNT_UPDOWN0  - Counts up and down. Terminal count
 655:Generated_Source\PSoC4/ADC_Timer.c **** *                                         generated when counter reaches 0
 656:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_COUNT_UPDOWN1  - Counts up and down. Terminal count
 657:Generated_Source\PSoC4/ADC_Timer.c **** *                                         generated both when counter reaches 0
 658:Generated_Source\PSoC4/ADC_Timer.c **** *                                         and period
 659:Generated_Source\PSoC4/ADC_Timer.c **** *
 660:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 661:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 662:Generated_Source\PSoC4/ADC_Timer.c **** *
 663:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 664:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetCounterMode(uint32 counterMode)
 665:Generated_Source\PSoC4/ADC_Timer.c **** {
 576              		.loc 1 665 0
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 0
 579              		@ frame_needed = 0, uses_anonymous_args = 0
 580              	.LVL40:
 581 0000 10B5     		push	{r4, lr}
 582              		.cfi_def_cfa_offset 8
 583              		.cfi_offset 4, -8
 584              		.cfi_offset 14, -4
 585 0002 0400     		movs	r4, r0
 666:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
 667:Generated_Source\PSoC4/ADC_Timer.c **** 
 668:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
 586              		.loc 1 668 0
ARM GAS  C:\Temp\cc01nvIH.s 			page 23


 587 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 588              	.LVL41:
 669:Generated_Source\PSoC4/ADC_Timer.c **** 
 670:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG &= (uint32)~ADC_Timer_UPDOWN_MASK;
 589              		.loc 1 670 0
 590 0008 054B     		ldr	r3, .L41
 591 000a 1968     		ldr	r1, [r3]
 592 000c 054A     		ldr	r2, .L41+4
 593 000e 0A40     		ands	r2, r1
 594 0010 1A60     		str	r2, [r3]
 671:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG |= counterMode;
 595              		.loc 1 671 0
 596 0012 1A68     		ldr	r2, [r3]
 597 0014 1443     		orrs	r4, r2
 598              	.LVL42:
 599 0016 1C60     		str	r4, [r3]
 672:Generated_Source\PSoC4/ADC_Timer.c **** 
 673:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
 600              		.loc 1 673 0
 601 0018 FFF7FEFF 		bl	CyExitCriticalSection
 602              	.LVL43:
 674:Generated_Source\PSoC4/ADC_Timer.c **** }
 603              		.loc 1 674 0
 604              		@ sp needed
 605 001c 10BD     		pop	{r4, pc}
 606              	.L42:
 607 001e C046     		.align	2
 608              	.L41:
 609 0020 00010540 		.word	1074069760
 610 0024 FFFFFCFF 		.word	-196609
 611              		.cfi_endproc
 612              	.LFE15:
 613              		.size	ADC_Timer_SetCounterMode, .-ADC_Timer_SetCounterMode
 614              		.section	.text.ADC_Timer_WritePeriod,"ax",%progbits
 615              		.align	2
 616              		.global	ADC_Timer_WritePeriod
 617              		.code	16
 618              		.thumb_func
 619              		.type	ADC_Timer_WritePeriod, %function
 620              	ADC_Timer_WritePeriod:
 621              	.LFB16:
 675:Generated_Source\PSoC4/ADC_Timer.c **** 
 676:Generated_Source\PSoC4/ADC_Timer.c **** 
 677:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 678:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_WritePeriod
 679:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 680:Generated_Source\PSoC4/ADC_Timer.c **** *
 681:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 682:Generated_Source\PSoC4/ADC_Timer.c **** *  Writes the 16 bit period register with the new period value.
 683:Generated_Source\PSoC4/ADC_Timer.c **** *  To cause the counter to count for N cycles this register should be written
 684:Generated_Source\PSoC4/ADC_Timer.c **** *  with N-1 (counts from 0 to period inclusive).
 685:Generated_Source\PSoC4/ADC_Timer.c **** *
 686:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 687:Generated_Source\PSoC4/ADC_Timer.c **** *  period: Period value
 688:Generated_Source\PSoC4/ADC_Timer.c **** *
 689:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 690:Generated_Source\PSoC4/ADC_Timer.c **** *  None
ARM GAS  C:\Temp\cc01nvIH.s 			page 24


 691:Generated_Source\PSoC4/ADC_Timer.c **** *
 692:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 693:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_WritePeriod(uint32 period)
 694:Generated_Source\PSoC4/ADC_Timer.c **** {
 622              		.loc 1 694 0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 0
 625              		@ frame_needed = 0, uses_anonymous_args = 0
 626              		@ link register save eliminated.
 627              	.LVL44:
 695:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_PERIOD_REG = (period & ADC_Timer_16BIT_MASK);
 628              		.loc 1 695 0
 629 0000 0004     		lsls	r0, r0, #16
 630              	.LVL45:
 631 0002 000C     		lsrs	r0, r0, #16
 632 0004 014B     		ldr	r3, .L44
 633 0006 1860     		str	r0, [r3]
 696:Generated_Source\PSoC4/ADC_Timer.c **** }
 634              		.loc 1 696 0
 635              		@ sp needed
 636 0008 7047     		bx	lr
 637              	.L45:
 638 000a C046     		.align	2
 639              	.L44:
 640 000c 14010540 		.word	1074069780
 641              		.cfi_endproc
 642              	.LFE16:
 643              		.size	ADC_Timer_WritePeriod, .-ADC_Timer_WritePeriod
 644              		.section	.text.ADC_Timer_ReadPeriod,"ax",%progbits
 645              		.align	2
 646              		.global	ADC_Timer_ReadPeriod
 647              		.code	16
 648              		.thumb_func
 649              		.type	ADC_Timer_ReadPeriod, %function
 650              	ADC_Timer_ReadPeriod:
 651              	.LFB17:
 697:Generated_Source\PSoC4/ADC_Timer.c **** 
 698:Generated_Source\PSoC4/ADC_Timer.c **** 
 699:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 700:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_ReadPeriod
 701:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 702:Generated_Source\PSoC4/ADC_Timer.c **** *
 703:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 704:Generated_Source\PSoC4/ADC_Timer.c **** *  Reads the 16 bit period register.
 705:Generated_Source\PSoC4/ADC_Timer.c **** *
 706:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 707:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 708:Generated_Source\PSoC4/ADC_Timer.c **** *
 709:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 710:Generated_Source\PSoC4/ADC_Timer.c **** *  Period value
 711:Generated_Source\PSoC4/ADC_Timer.c **** *
 712:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 713:Generated_Source\PSoC4/ADC_Timer.c **** uint32 ADC_Timer_ReadPeriod(void)
 714:Generated_Source\PSoC4/ADC_Timer.c **** {
 652              		.loc 1 714 0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Temp\cc01nvIH.s 			page 25


 655              		@ frame_needed = 0, uses_anonymous_args = 0
 656              		@ link register save eliminated.
 715:Generated_Source\PSoC4/ADC_Timer.c ****     return (ADC_Timer_PERIOD_REG & ADC_Timer_16BIT_MASK);
 657              		.loc 1 715 0
 658 0000 024B     		ldr	r3, .L47
 659 0002 1868     		ldr	r0, [r3]
 660 0004 0004     		lsls	r0, r0, #16
 661 0006 000C     		lsrs	r0, r0, #16
 716:Generated_Source\PSoC4/ADC_Timer.c **** }
 662              		.loc 1 716 0
 663              		@ sp needed
 664 0008 7047     		bx	lr
 665              	.L48:
 666 000a C046     		.align	2
 667              	.L47:
 668 000c 14010540 		.word	1074069780
 669              		.cfi_endproc
 670              	.LFE17:
 671              		.size	ADC_Timer_ReadPeriod, .-ADC_Timer_ReadPeriod
 672              		.section	.text.ADC_Timer_SetCompareSwap,"ax",%progbits
 673              		.align	2
 674              		.global	ADC_Timer_SetCompareSwap
 675              		.code	16
 676              		.thumb_func
 677              		.type	ADC_Timer_SetCompareSwap, %function
 678              	ADC_Timer_SetCompareSwap:
 679              	.LFB18:
 717:Generated_Source\PSoC4/ADC_Timer.c **** 
 718:Generated_Source\PSoC4/ADC_Timer.c **** 
 719:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 720:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetCompareSwap
 721:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 722:Generated_Source\PSoC4/ADC_Timer.c **** *
 723:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 724:Generated_Source\PSoC4/ADC_Timer.c **** *  Writes the register that controls whether the compare registers are
 725:Generated_Source\PSoC4/ADC_Timer.c **** *  swapped. When enabled in the Timer/Counter mode(without capture) the swap
 726:Generated_Source\PSoC4/ADC_Timer.c **** *  occurs at a TC event. In the PWM mode the swap occurs at the next TC event
 727:Generated_Source\PSoC4/ADC_Timer.c **** *  following a hardware switch event.
 728:Generated_Source\PSoC4/ADC_Timer.c **** *
 729:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 730:Generated_Source\PSoC4/ADC_Timer.c **** *  swapEnable
 731:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
 732:Generated_Source\PSoC4/ADC_Timer.c **** *     - 0 - Disable swap
 733:Generated_Source\PSoC4/ADC_Timer.c **** *     - 1 - Enable swap
 734:Generated_Source\PSoC4/ADC_Timer.c **** *
 735:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 736:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 737:Generated_Source\PSoC4/ADC_Timer.c **** *
 738:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 739:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetCompareSwap(uint32 swapEnable)
 740:Generated_Source\PSoC4/ADC_Timer.c **** {
 680              		.loc 1 740 0
 681              		.cfi_startproc
 682              		@ args = 0, pretend = 0, frame = 0
 683              		@ frame_needed = 0, uses_anonymous_args = 0
 684              	.LVL46:
 685 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Temp\cc01nvIH.s 			page 26


 686              		.cfi_def_cfa_offset 8
 687              		.cfi_offset 4, -8
 688              		.cfi_offset 14, -4
 689 0002 0400     		movs	r4, r0
 741:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
 742:Generated_Source\PSoC4/ADC_Timer.c **** 
 743:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
 690              		.loc 1 743 0
 691 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 692              	.LVL47:
 744:Generated_Source\PSoC4/ADC_Timer.c **** 
 745:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG &= (uint32)~ADC_Timer_RELOAD_CC_MASK;
 693              		.loc 1 745 0
 694 0008 054B     		ldr	r3, .L50
 695 000a 1A68     		ldr	r2, [r3]
 696 000c 0121     		movs	r1, #1
 697 000e 8A43     		bics	r2, r1
 698 0010 1A60     		str	r2, [r3]
 746:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG |= (swapEnable & ADC_Timer_1BIT_MASK);
 699              		.loc 1 746 0
 700 0012 1A68     		ldr	r2, [r3]
 701 0014 0C40     		ands	r4, r1
 702              	.LVL48:
 703 0016 1443     		orrs	r4, r2
 704 0018 1C60     		str	r4, [r3]
 747:Generated_Source\PSoC4/ADC_Timer.c **** 
 748:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
 705              		.loc 1 748 0
 706 001a FFF7FEFF 		bl	CyExitCriticalSection
 707              	.LVL49:
 749:Generated_Source\PSoC4/ADC_Timer.c **** }
 708              		.loc 1 749 0
 709              		@ sp needed
 710 001e 10BD     		pop	{r4, pc}
 711              	.L51:
 712              		.align	2
 713              	.L50:
 714 0020 00010540 		.word	1074069760
 715              		.cfi_endproc
 716              	.LFE18:
 717              		.size	ADC_Timer_SetCompareSwap, .-ADC_Timer_SetCompareSwap
 718              		.section	.text.ADC_Timer_WritePeriodBuf,"ax",%progbits
 719              		.align	2
 720              		.global	ADC_Timer_WritePeriodBuf
 721              		.code	16
 722              		.thumb_func
 723              		.type	ADC_Timer_WritePeriodBuf, %function
 724              	ADC_Timer_WritePeriodBuf:
 725              	.LFB19:
 750:Generated_Source\PSoC4/ADC_Timer.c **** 
 751:Generated_Source\PSoC4/ADC_Timer.c **** 
 752:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 753:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_WritePeriodBuf
 754:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 755:Generated_Source\PSoC4/ADC_Timer.c **** *
 756:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 757:Generated_Source\PSoC4/ADC_Timer.c **** *  Writes the 16 bit period buf register with the new period value.
ARM GAS  C:\Temp\cc01nvIH.s 			page 27


 758:Generated_Source\PSoC4/ADC_Timer.c **** *
 759:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 760:Generated_Source\PSoC4/ADC_Timer.c **** *  periodBuf: Period value
 761:Generated_Source\PSoC4/ADC_Timer.c **** *
 762:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 763:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 764:Generated_Source\PSoC4/ADC_Timer.c **** *
 765:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 766:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_WritePeriodBuf(uint32 periodBuf)
 767:Generated_Source\PSoC4/ADC_Timer.c **** {
 726              		.loc 1 767 0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 0
 729              		@ frame_needed = 0, uses_anonymous_args = 0
 730              		@ link register save eliminated.
 731              	.LVL50:
 768:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_PERIOD_BUF_REG = (periodBuf & ADC_Timer_16BIT_MASK);
 732              		.loc 1 768 0
 733 0000 0004     		lsls	r0, r0, #16
 734              	.LVL51:
 735 0002 000C     		lsrs	r0, r0, #16
 736 0004 014B     		ldr	r3, .L53
 737 0006 1860     		str	r0, [r3]
 769:Generated_Source\PSoC4/ADC_Timer.c **** }
 738              		.loc 1 769 0
 739              		@ sp needed
 740 0008 7047     		bx	lr
 741              	.L54:
 742 000a C046     		.align	2
 743              	.L53:
 744 000c 18010540 		.word	1074069784
 745              		.cfi_endproc
 746              	.LFE19:
 747              		.size	ADC_Timer_WritePeriodBuf, .-ADC_Timer_WritePeriodBuf
 748              		.section	.text.ADC_Timer_ReadPeriodBuf,"ax",%progbits
 749              		.align	2
 750              		.global	ADC_Timer_ReadPeriodBuf
 751              		.code	16
 752              		.thumb_func
 753              		.type	ADC_Timer_ReadPeriodBuf, %function
 754              	ADC_Timer_ReadPeriodBuf:
 755              	.LFB20:
 770:Generated_Source\PSoC4/ADC_Timer.c **** 
 771:Generated_Source\PSoC4/ADC_Timer.c **** 
 772:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 773:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_ReadPeriodBuf
 774:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 775:Generated_Source\PSoC4/ADC_Timer.c **** *
 776:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 777:Generated_Source\PSoC4/ADC_Timer.c **** *  Reads the 16 bit period buf register.
 778:Generated_Source\PSoC4/ADC_Timer.c **** *
 779:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 780:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 781:Generated_Source\PSoC4/ADC_Timer.c **** *
 782:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 783:Generated_Source\PSoC4/ADC_Timer.c **** *  Period value
 784:Generated_Source\PSoC4/ADC_Timer.c **** *
ARM GAS  C:\Temp\cc01nvIH.s 			page 28


 785:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 786:Generated_Source\PSoC4/ADC_Timer.c **** uint32 ADC_Timer_ReadPeriodBuf(void)
 787:Generated_Source\PSoC4/ADC_Timer.c **** {
 756              		.loc 1 787 0
 757              		.cfi_startproc
 758              		@ args = 0, pretend = 0, frame = 0
 759              		@ frame_needed = 0, uses_anonymous_args = 0
 760              		@ link register save eliminated.
 788:Generated_Source\PSoC4/ADC_Timer.c ****     return (ADC_Timer_PERIOD_BUF_REG & ADC_Timer_16BIT_MASK);
 761              		.loc 1 788 0
 762 0000 024B     		ldr	r3, .L56
 763 0002 1868     		ldr	r0, [r3]
 764 0004 0004     		lsls	r0, r0, #16
 765 0006 000C     		lsrs	r0, r0, #16
 789:Generated_Source\PSoC4/ADC_Timer.c **** }
 766              		.loc 1 789 0
 767              		@ sp needed
 768 0008 7047     		bx	lr
 769              	.L57:
 770 000a C046     		.align	2
 771              	.L56:
 772 000c 18010540 		.word	1074069784
 773              		.cfi_endproc
 774              	.LFE20:
 775              		.size	ADC_Timer_ReadPeriodBuf, .-ADC_Timer_ReadPeriodBuf
 776              		.section	.text.ADC_Timer_SetPeriodSwap,"ax",%progbits
 777              		.align	2
 778              		.global	ADC_Timer_SetPeriodSwap
 779              		.code	16
 780              		.thumb_func
 781              		.type	ADC_Timer_SetPeriodSwap, %function
 782              	ADC_Timer_SetPeriodSwap:
 783              	.LFB21:
 790:Generated_Source\PSoC4/ADC_Timer.c **** 
 791:Generated_Source\PSoC4/ADC_Timer.c **** 
 792:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 793:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetPeriodSwap
 794:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 795:Generated_Source\PSoC4/ADC_Timer.c **** *
 796:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 797:Generated_Source\PSoC4/ADC_Timer.c **** *  Writes the register that controls whether the period registers are
 798:Generated_Source\PSoC4/ADC_Timer.c **** *  swapped. When enabled in Timer/Counter mode the swap occurs at a TC event.
 799:Generated_Source\PSoC4/ADC_Timer.c **** *  In the PWM mode the swap occurs at the next TC event following a hardware
 800:Generated_Source\PSoC4/ADC_Timer.c **** *  switch event.
 801:Generated_Source\PSoC4/ADC_Timer.c **** *
 802:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 803:Generated_Source\PSoC4/ADC_Timer.c **** *  swapEnable
 804:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
 805:Generated_Source\PSoC4/ADC_Timer.c **** *     - 0 - Disable swap
 806:Generated_Source\PSoC4/ADC_Timer.c **** *     - 1 - Enable swap
 807:Generated_Source\PSoC4/ADC_Timer.c **** *
 808:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 809:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 810:Generated_Source\PSoC4/ADC_Timer.c **** *
 811:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 812:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetPeriodSwap(uint32 swapEnable)
 813:Generated_Source\PSoC4/ADC_Timer.c **** {
ARM GAS  C:\Temp\cc01nvIH.s 			page 29


 784              		.loc 1 813 0
 785              		.cfi_startproc
 786              		@ args = 0, pretend = 0, frame = 0
 787              		@ frame_needed = 0, uses_anonymous_args = 0
 788              	.LVL52:
 789 0000 70B5     		push	{r4, r5, r6, lr}
 790              		.cfi_def_cfa_offset 16
 791              		.cfi_offset 4, -16
 792              		.cfi_offset 5, -12
 793              		.cfi_offset 6, -8
 794              		.cfi_offset 14, -4
 795 0002 0400     		movs	r4, r0
 814:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
 815:Generated_Source\PSoC4/ADC_Timer.c **** 
 816:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
 796              		.loc 1 816 0
 797 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 798              	.LVL53:
 817:Generated_Source\PSoC4/ADC_Timer.c **** 
 818:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG &= (uint32)~ADC_Timer_RELOAD_PERIOD_MASK;
 799              		.loc 1 818 0
 800 0008 064A     		ldr	r2, .L59
 801 000a 1368     		ldr	r3, [r2]
 802 000c 0221     		movs	r1, #2
 803 000e 8B43     		bics	r3, r1
 804 0010 1360     		str	r3, [r2]
 819:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_CONTROL_REG |= ((uint32)((swapEnable & ADC_Timer_1BIT_MASK) <<
 805              		.loc 1 819 0
 806 0012 1568     		ldr	r5, [r2]
 807 0014 6300     		lsls	r3, r4, #1
 808 0016 1940     		ands	r1, r3
 809 0018 0C00     		movs	r4, r1
 810              	.LVL54:
 811 001a 2C43     		orrs	r4, r5
 812 001c 1460     		str	r4, [r2]
 820:Generated_Source\PSoC4/ADC_Timer.c ****                                                             ADC_Timer_RELOAD_PERIOD_SHIFT));
 821:Generated_Source\PSoC4/ADC_Timer.c **** 
 822:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
 813              		.loc 1 822 0
 814 001e FFF7FEFF 		bl	CyExitCriticalSection
 815              	.LVL55:
 823:Generated_Source\PSoC4/ADC_Timer.c **** }
 816              		.loc 1 823 0
 817              		@ sp needed
 818 0022 70BD     		pop	{r4, r5, r6, pc}
 819              	.L60:
 820              		.align	2
 821              	.L59:
 822 0024 00010540 		.word	1074069760
 823              		.cfi_endproc
 824              	.LFE21:
 825              		.size	ADC_Timer_SetPeriodSwap, .-ADC_Timer_SetPeriodSwap
 826              		.section	.text.ADC_Timer_WriteCompare,"ax",%progbits
 827              		.align	2
 828              		.global	ADC_Timer_WriteCompare
 829              		.code	16
 830              		.thumb_func
ARM GAS  C:\Temp\cc01nvIH.s 			page 30


 831              		.type	ADC_Timer_WriteCompare, %function
 832              	ADC_Timer_WriteCompare:
 833              	.LFB22:
 824:Generated_Source\PSoC4/ADC_Timer.c **** 
 825:Generated_Source\PSoC4/ADC_Timer.c **** 
 826:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 827:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_WriteCompare
 828:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 829:Generated_Source\PSoC4/ADC_Timer.c **** *
 830:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 831:Generated_Source\PSoC4/ADC_Timer.c **** *  Writes the 16 bit compare register with the new compare value. Not
 832:Generated_Source\PSoC4/ADC_Timer.c **** *  applicable for Timer/Counter with Capture or in Quadrature Decoder modes.
 833:Generated_Source\PSoC4/ADC_Timer.c **** *
 834:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 835:Generated_Source\PSoC4/ADC_Timer.c **** *  compare: Compare value
 836:Generated_Source\PSoC4/ADC_Timer.c **** *
 837:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 838:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 839:Generated_Source\PSoC4/ADC_Timer.c **** *
 840:Generated_Source\PSoC4/ADC_Timer.c **** * Note:
 841:Generated_Source\PSoC4/ADC_Timer.c **** *  It is not recommended to use the value equal to "0" or equal to 
 842:Generated_Source\PSoC4/ADC_Timer.c **** *  "period value" in Center or Asymmetric align PWM modes on the 
 843:Generated_Source\PSoC4/ADC_Timer.c **** *  PSoC 4100/PSoC 4200 devices.
 844:Generated_Source\PSoC4/ADC_Timer.c **** *  PSoC 4000 devices write the 16 bit compare register with the decremented 
 845:Generated_Source\PSoC4/ADC_Timer.c **** *  compare value in the Up counting mode (except 0x0u), and the incremented 
 846:Generated_Source\PSoC4/ADC_Timer.c **** *  compare value in the Down counting mode (except 0xFFFFu).
 847:Generated_Source\PSoC4/ADC_Timer.c **** *
 848:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 849:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_WriteCompare(uint32 compare)
 850:Generated_Source\PSoC4/ADC_Timer.c **** {
 834              		.loc 1 850 0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 0
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 838              		@ link register save eliminated.
 839              	.LVL56:
 851:Generated_Source\PSoC4/ADC_Timer.c ****     #if (ADC_Timer_CY_TCPWM_4000)
 852:Generated_Source\PSoC4/ADC_Timer.c ****         uint32 currentMode;
 853:Generated_Source\PSoC4/ADC_Timer.c ****     #endif /* (ADC_Timer_CY_TCPWM_4000) */
 854:Generated_Source\PSoC4/ADC_Timer.c **** 
 855:Generated_Source\PSoC4/ADC_Timer.c ****     #if (ADC_Timer_CY_TCPWM_4000)
 856:Generated_Source\PSoC4/ADC_Timer.c ****         currentMode = ((ADC_Timer_CONTROL_REG & ADC_Timer_UPDOWN_MASK) >> ADC_Timer_UPDOWN_SHIFT);
 857:Generated_Source\PSoC4/ADC_Timer.c **** 
 858:Generated_Source\PSoC4/ADC_Timer.c ****         if (((uint32)ADC_Timer__COUNT_DOWN == currentMode) && (0xFFFFu != compare))
 859:Generated_Source\PSoC4/ADC_Timer.c ****         {
 860:Generated_Source\PSoC4/ADC_Timer.c ****             compare++;
 861:Generated_Source\PSoC4/ADC_Timer.c ****         }
 862:Generated_Source\PSoC4/ADC_Timer.c ****         else if (((uint32)ADC_Timer__COUNT_UP == currentMode) && (0u != compare))
 863:Generated_Source\PSoC4/ADC_Timer.c ****         {
 864:Generated_Source\PSoC4/ADC_Timer.c ****             compare--;
 865:Generated_Source\PSoC4/ADC_Timer.c ****         }
 866:Generated_Source\PSoC4/ADC_Timer.c ****         else
 867:Generated_Source\PSoC4/ADC_Timer.c ****         {
 868:Generated_Source\PSoC4/ADC_Timer.c ****         }
 869:Generated_Source\PSoC4/ADC_Timer.c ****         
 870:Generated_Source\PSoC4/ADC_Timer.c ****     
 871:Generated_Source\PSoC4/ADC_Timer.c ****     #endif /* (ADC_Timer_CY_TCPWM_4000) */
ARM GAS  C:\Temp\cc01nvIH.s 			page 31


 872:Generated_Source\PSoC4/ADC_Timer.c ****     
 873:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_COMP_CAP_REG = (compare & ADC_Timer_16BIT_MASK);
 840              		.loc 1 873 0
 841 0000 0004     		lsls	r0, r0, #16
 842              	.LVL57:
 843 0002 000C     		lsrs	r0, r0, #16
 844 0004 014B     		ldr	r3, .L62
 845 0006 1860     		str	r0, [r3]
 874:Generated_Source\PSoC4/ADC_Timer.c **** }
 846              		.loc 1 874 0
 847              		@ sp needed
 848 0008 7047     		bx	lr
 849              	.L63:
 850 000a C046     		.align	2
 851              	.L62:
 852 000c 0C010540 		.word	1074069772
 853              		.cfi_endproc
 854              	.LFE22:
 855              		.size	ADC_Timer_WriteCompare, .-ADC_Timer_WriteCompare
 856              		.section	.text.ADC_Timer_ReadCompare,"ax",%progbits
 857              		.align	2
 858              		.global	ADC_Timer_ReadCompare
 859              		.code	16
 860              		.thumb_func
 861              		.type	ADC_Timer_ReadCompare, %function
 862              	ADC_Timer_ReadCompare:
 863              	.LFB23:
 875:Generated_Source\PSoC4/ADC_Timer.c **** 
 876:Generated_Source\PSoC4/ADC_Timer.c **** 
 877:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 878:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_ReadCompare
 879:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 880:Generated_Source\PSoC4/ADC_Timer.c **** *
 881:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 882:Generated_Source\PSoC4/ADC_Timer.c **** *  Reads the compare register. Not applicable for Timer/Counter with Capture
 883:Generated_Source\PSoC4/ADC_Timer.c **** *  or in Quadrature Decoder modes.
 884:Generated_Source\PSoC4/ADC_Timer.c **** *  PSoC 4000 devices read the incremented compare register value in the 
 885:Generated_Source\PSoC4/ADC_Timer.c **** *  Up counting mode (except 0xFFFFu), and the decremented value in the 
 886:Generated_Source\PSoC4/ADC_Timer.c **** *  Down counting mode (except 0x0u).
 887:Generated_Source\PSoC4/ADC_Timer.c **** *
 888:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 889:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 890:Generated_Source\PSoC4/ADC_Timer.c **** *
 891:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 892:Generated_Source\PSoC4/ADC_Timer.c **** *  Compare value
 893:Generated_Source\PSoC4/ADC_Timer.c **** *
 894:Generated_Source\PSoC4/ADC_Timer.c **** * Note:
 895:Generated_Source\PSoC4/ADC_Timer.c **** *  PSoC 4000 devices read the incremented compare register value in the 
 896:Generated_Source\PSoC4/ADC_Timer.c **** *  Up counting mode (except 0xFFFFu), and the decremented value in the 
 897:Generated_Source\PSoC4/ADC_Timer.c **** *  Down counting mode (except 0x0u).
 898:Generated_Source\PSoC4/ADC_Timer.c **** *
 899:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 900:Generated_Source\PSoC4/ADC_Timer.c **** uint32 ADC_Timer_ReadCompare(void)
 901:Generated_Source\PSoC4/ADC_Timer.c **** {
 864              		.loc 1 901 0
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Temp\cc01nvIH.s 			page 32


 867              		@ frame_needed = 0, uses_anonymous_args = 0
 868              		@ link register save eliminated.
 902:Generated_Source\PSoC4/ADC_Timer.c ****     #if (ADC_Timer_CY_TCPWM_4000)
 903:Generated_Source\PSoC4/ADC_Timer.c ****         uint32 currentMode;
 904:Generated_Source\PSoC4/ADC_Timer.c ****         uint32 regVal;
 905:Generated_Source\PSoC4/ADC_Timer.c ****     #endif /* (ADC_Timer_CY_TCPWM_4000) */
 906:Generated_Source\PSoC4/ADC_Timer.c **** 
 907:Generated_Source\PSoC4/ADC_Timer.c ****     #if (ADC_Timer_CY_TCPWM_4000)
 908:Generated_Source\PSoC4/ADC_Timer.c ****         currentMode = ((ADC_Timer_CONTROL_REG & ADC_Timer_UPDOWN_MASK) >> ADC_Timer_UPDOWN_SHIFT);
 909:Generated_Source\PSoC4/ADC_Timer.c ****         
 910:Generated_Source\PSoC4/ADC_Timer.c ****         regVal = ADC_Timer_COMP_CAP_REG;
 911:Generated_Source\PSoC4/ADC_Timer.c ****         
 912:Generated_Source\PSoC4/ADC_Timer.c ****         if (((uint32)ADC_Timer__COUNT_DOWN == currentMode) && (0u != regVal))
 913:Generated_Source\PSoC4/ADC_Timer.c ****         {
 914:Generated_Source\PSoC4/ADC_Timer.c ****             regVal--;
 915:Generated_Source\PSoC4/ADC_Timer.c ****         }
 916:Generated_Source\PSoC4/ADC_Timer.c ****         else if (((uint32)ADC_Timer__COUNT_UP == currentMode) && (0xFFFFu != regVal))
 917:Generated_Source\PSoC4/ADC_Timer.c ****         {
 918:Generated_Source\PSoC4/ADC_Timer.c ****             regVal++;
 919:Generated_Source\PSoC4/ADC_Timer.c ****         }
 920:Generated_Source\PSoC4/ADC_Timer.c ****         else
 921:Generated_Source\PSoC4/ADC_Timer.c ****         {
 922:Generated_Source\PSoC4/ADC_Timer.c ****         }
 923:Generated_Source\PSoC4/ADC_Timer.c **** 
 924:Generated_Source\PSoC4/ADC_Timer.c ****         return (regVal & ADC_Timer_16BIT_MASK);
 925:Generated_Source\PSoC4/ADC_Timer.c ****     #else
 926:Generated_Source\PSoC4/ADC_Timer.c ****         return (ADC_Timer_COMP_CAP_REG & ADC_Timer_16BIT_MASK);
 869              		.loc 1 926 0
 870 0000 024B     		ldr	r3, .L65
 871 0002 1868     		ldr	r0, [r3]
 872 0004 0004     		lsls	r0, r0, #16
 873 0006 000C     		lsrs	r0, r0, #16
 927:Generated_Source\PSoC4/ADC_Timer.c ****     #endif /* (ADC_Timer_CY_TCPWM_4000) */
 928:Generated_Source\PSoC4/ADC_Timer.c **** }
 874              		.loc 1 928 0
 875              		@ sp needed
 876 0008 7047     		bx	lr
 877              	.L66:
 878 000a C046     		.align	2
 879              	.L65:
 880 000c 0C010540 		.word	1074069772
 881              		.cfi_endproc
 882              	.LFE23:
 883              		.size	ADC_Timer_ReadCompare, .-ADC_Timer_ReadCompare
 884              		.section	.text.ADC_Timer_WriteCompareBuf,"ax",%progbits
 885              		.align	2
 886              		.global	ADC_Timer_WriteCompareBuf
 887              		.code	16
 888              		.thumb_func
 889              		.type	ADC_Timer_WriteCompareBuf, %function
 890              	ADC_Timer_WriteCompareBuf:
 891              	.LFB24:
 929:Generated_Source\PSoC4/ADC_Timer.c **** 
 930:Generated_Source\PSoC4/ADC_Timer.c **** 
 931:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 932:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_WriteCompareBuf
 933:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
ARM GAS  C:\Temp\cc01nvIH.s 			page 33


 934:Generated_Source\PSoC4/ADC_Timer.c **** *
 935:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 936:Generated_Source\PSoC4/ADC_Timer.c **** *  Writes the 16 bit compare buffer register with the new compare value. Not
 937:Generated_Source\PSoC4/ADC_Timer.c **** *  applicable for Timer/Counter with Capture or in Quadrature Decoder modes.
 938:Generated_Source\PSoC4/ADC_Timer.c **** *
 939:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 940:Generated_Source\PSoC4/ADC_Timer.c **** *  compareBuf: Compare value
 941:Generated_Source\PSoC4/ADC_Timer.c **** *
 942:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 943:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 944:Generated_Source\PSoC4/ADC_Timer.c **** *
 945:Generated_Source\PSoC4/ADC_Timer.c **** * Note:
 946:Generated_Source\PSoC4/ADC_Timer.c **** *  It is not recommended to use the value equal to "0" or equal to 
 947:Generated_Source\PSoC4/ADC_Timer.c **** *  "period value" in Center or Asymmetric align PWM modes on the 
 948:Generated_Source\PSoC4/ADC_Timer.c **** *  PSoC 4100/PSoC 4200 devices.
 949:Generated_Source\PSoC4/ADC_Timer.c **** *  PSoC 4000 devices write the 16 bit compare register with the decremented 
 950:Generated_Source\PSoC4/ADC_Timer.c **** *  compare value in the Up counting mode (except 0x0u), and the incremented 
 951:Generated_Source\PSoC4/ADC_Timer.c **** *  compare value in the Down counting mode (except 0xFFFFu).
 952:Generated_Source\PSoC4/ADC_Timer.c **** *
 953:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
 954:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_WriteCompareBuf(uint32 compareBuf)
 955:Generated_Source\PSoC4/ADC_Timer.c **** {
 892              		.loc 1 955 0
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 0
 895              		@ frame_needed = 0, uses_anonymous_args = 0
 896              		@ link register save eliminated.
 897              	.LVL58:
 956:Generated_Source\PSoC4/ADC_Timer.c ****     #if (ADC_Timer_CY_TCPWM_4000)
 957:Generated_Source\PSoC4/ADC_Timer.c ****         uint32 currentMode;
 958:Generated_Source\PSoC4/ADC_Timer.c ****     #endif /* (ADC_Timer_CY_TCPWM_4000) */
 959:Generated_Source\PSoC4/ADC_Timer.c **** 
 960:Generated_Source\PSoC4/ADC_Timer.c ****     #if (ADC_Timer_CY_TCPWM_4000)
 961:Generated_Source\PSoC4/ADC_Timer.c ****         currentMode = ((ADC_Timer_CONTROL_REG & ADC_Timer_UPDOWN_MASK) >> ADC_Timer_UPDOWN_SHIFT);
 962:Generated_Source\PSoC4/ADC_Timer.c **** 
 963:Generated_Source\PSoC4/ADC_Timer.c ****         if (((uint32)ADC_Timer__COUNT_DOWN == currentMode) && (0xFFFFu != compareBuf))
 964:Generated_Source\PSoC4/ADC_Timer.c ****         {
 965:Generated_Source\PSoC4/ADC_Timer.c ****             compareBuf++;
 966:Generated_Source\PSoC4/ADC_Timer.c ****         }
 967:Generated_Source\PSoC4/ADC_Timer.c ****         else if (((uint32)ADC_Timer__COUNT_UP == currentMode) && (0u != compareBuf))
 968:Generated_Source\PSoC4/ADC_Timer.c ****         {
 969:Generated_Source\PSoC4/ADC_Timer.c ****             compareBuf --;
 970:Generated_Source\PSoC4/ADC_Timer.c ****         }
 971:Generated_Source\PSoC4/ADC_Timer.c ****         else
 972:Generated_Source\PSoC4/ADC_Timer.c ****         {
 973:Generated_Source\PSoC4/ADC_Timer.c ****         }
 974:Generated_Source\PSoC4/ADC_Timer.c ****     #endif /* (ADC_Timer_CY_TCPWM_4000) */
 975:Generated_Source\PSoC4/ADC_Timer.c ****     
 976:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_COMP_CAP_BUF_REG = (compareBuf & ADC_Timer_16BIT_MASK);
 898              		.loc 1 976 0
 899 0000 0004     		lsls	r0, r0, #16
 900              	.LVL59:
 901 0002 000C     		lsrs	r0, r0, #16
 902 0004 014B     		ldr	r3, .L68
 903 0006 1860     		str	r0, [r3]
 977:Generated_Source\PSoC4/ADC_Timer.c **** }
 904              		.loc 1 977 0
ARM GAS  C:\Temp\cc01nvIH.s 			page 34


 905              		@ sp needed
 906 0008 7047     		bx	lr
 907              	.L69:
 908 000a C046     		.align	2
 909              	.L68:
 910 000c 10010540 		.word	1074069776
 911              		.cfi_endproc
 912              	.LFE24:
 913              		.size	ADC_Timer_WriteCompareBuf, .-ADC_Timer_WriteCompareBuf
 914              		.section	.text.ADC_Timer_ReadCompareBuf,"ax",%progbits
 915              		.align	2
 916              		.global	ADC_Timer_ReadCompareBuf
 917              		.code	16
 918              		.thumb_func
 919              		.type	ADC_Timer_ReadCompareBuf, %function
 920              	ADC_Timer_ReadCompareBuf:
 921              	.LFB25:
 978:Generated_Source\PSoC4/ADC_Timer.c **** 
 979:Generated_Source\PSoC4/ADC_Timer.c **** 
 980:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
 981:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_ReadCompareBuf
 982:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
 983:Generated_Source\PSoC4/ADC_Timer.c **** *
 984:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
 985:Generated_Source\PSoC4/ADC_Timer.c **** *  Reads the compare buffer register. Not applicable for Timer/Counter with
 986:Generated_Source\PSoC4/ADC_Timer.c **** *  Capture or in Quadrature Decoder modes.
 987:Generated_Source\PSoC4/ADC_Timer.c **** *
 988:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
 989:Generated_Source\PSoC4/ADC_Timer.c **** *  None
 990:Generated_Source\PSoC4/ADC_Timer.c **** *
 991:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
 992:Generated_Source\PSoC4/ADC_Timer.c **** *  Compare buffer value
 993:Generated_Source\PSoC4/ADC_Timer.c **** *
 994:Generated_Source\PSoC4/ADC_Timer.c **** * Note:
 995:Generated_Source\PSoC4/ADC_Timer.c **** *  PSoC 4000 devices read the incremented compare register value in the 
 996:Generated_Source\PSoC4/ADC_Timer.c **** *  Up counting mode (except 0xFFFFu), and the decremented value in the 
 997:Generated_Source\PSoC4/ADC_Timer.c **** *  Down counting mode (except 0x0u).
 998:Generated_Source\PSoC4/ADC_Timer.c **** *
 999:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
1000:Generated_Source\PSoC4/ADC_Timer.c **** uint32 ADC_Timer_ReadCompareBuf(void)
1001:Generated_Source\PSoC4/ADC_Timer.c **** {
 922              		.loc 1 1001 0
 923              		.cfi_startproc
 924              		@ args = 0, pretend = 0, frame = 0
 925              		@ frame_needed = 0, uses_anonymous_args = 0
 926              		@ link register save eliminated.
1002:Generated_Source\PSoC4/ADC_Timer.c ****     #if (ADC_Timer_CY_TCPWM_4000)
1003:Generated_Source\PSoC4/ADC_Timer.c ****         uint32 currentMode;
1004:Generated_Source\PSoC4/ADC_Timer.c ****         uint32 regVal;
1005:Generated_Source\PSoC4/ADC_Timer.c ****     #endif /* (ADC_Timer_CY_TCPWM_4000) */
1006:Generated_Source\PSoC4/ADC_Timer.c **** 
1007:Generated_Source\PSoC4/ADC_Timer.c ****     #if (ADC_Timer_CY_TCPWM_4000)
1008:Generated_Source\PSoC4/ADC_Timer.c ****         currentMode = ((ADC_Timer_CONTROL_REG & ADC_Timer_UPDOWN_MASK) >> ADC_Timer_UPDOWN_SHIFT);
1009:Generated_Source\PSoC4/ADC_Timer.c **** 
1010:Generated_Source\PSoC4/ADC_Timer.c ****         regVal = ADC_Timer_COMP_CAP_BUF_REG;
1011:Generated_Source\PSoC4/ADC_Timer.c ****         
1012:Generated_Source\PSoC4/ADC_Timer.c ****         if (((uint32)ADC_Timer__COUNT_DOWN == currentMode) && (0u != regVal))
ARM GAS  C:\Temp\cc01nvIH.s 			page 35


1013:Generated_Source\PSoC4/ADC_Timer.c ****         {
1014:Generated_Source\PSoC4/ADC_Timer.c ****             regVal--;
1015:Generated_Source\PSoC4/ADC_Timer.c ****         }
1016:Generated_Source\PSoC4/ADC_Timer.c ****         else if (((uint32)ADC_Timer__COUNT_UP == currentMode) && (0xFFFFu != regVal))
1017:Generated_Source\PSoC4/ADC_Timer.c ****         {
1018:Generated_Source\PSoC4/ADC_Timer.c ****             regVal++;
1019:Generated_Source\PSoC4/ADC_Timer.c ****         }
1020:Generated_Source\PSoC4/ADC_Timer.c ****         else
1021:Generated_Source\PSoC4/ADC_Timer.c ****         {
1022:Generated_Source\PSoC4/ADC_Timer.c ****         }
1023:Generated_Source\PSoC4/ADC_Timer.c **** 
1024:Generated_Source\PSoC4/ADC_Timer.c ****         return (regVal & ADC_Timer_16BIT_MASK);
1025:Generated_Source\PSoC4/ADC_Timer.c ****     #else
1026:Generated_Source\PSoC4/ADC_Timer.c ****         return (ADC_Timer_COMP_CAP_BUF_REG & ADC_Timer_16BIT_MASK);
 927              		.loc 1 1026 0
 928 0000 024B     		ldr	r3, .L71
 929 0002 1868     		ldr	r0, [r3]
 930 0004 0004     		lsls	r0, r0, #16
 931 0006 000C     		lsrs	r0, r0, #16
1027:Generated_Source\PSoC4/ADC_Timer.c ****     #endif /* (ADC_Timer_CY_TCPWM_4000) */
1028:Generated_Source\PSoC4/ADC_Timer.c **** }
 932              		.loc 1 1028 0
 933              		@ sp needed
 934 0008 7047     		bx	lr
 935              	.L72:
 936 000a C046     		.align	2
 937              	.L71:
 938 000c 10010540 		.word	1074069776
 939              		.cfi_endproc
 940              	.LFE25:
 941              		.size	ADC_Timer_ReadCompareBuf, .-ADC_Timer_ReadCompareBuf
 942              		.section	.text.ADC_Timer_ReadCapture,"ax",%progbits
 943              		.align	2
 944              		.global	ADC_Timer_ReadCapture
 945              		.code	16
 946              		.thumb_func
 947              		.type	ADC_Timer_ReadCapture, %function
 948              	ADC_Timer_ReadCapture:
 949              	.LFB26:
1029:Generated_Source\PSoC4/ADC_Timer.c **** 
1030:Generated_Source\PSoC4/ADC_Timer.c **** 
1031:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
1032:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_ReadCapture
1033:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
1034:Generated_Source\PSoC4/ADC_Timer.c **** *
1035:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
1036:Generated_Source\PSoC4/ADC_Timer.c **** *  Reads the captured counter value. This API is applicable only for
1037:Generated_Source\PSoC4/ADC_Timer.c **** *  Timer/Counter with the capture mode and Quadrature Decoder modes.
1038:Generated_Source\PSoC4/ADC_Timer.c **** *
1039:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
1040:Generated_Source\PSoC4/ADC_Timer.c **** *  None
1041:Generated_Source\PSoC4/ADC_Timer.c **** *
1042:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
1043:Generated_Source\PSoC4/ADC_Timer.c **** *  Capture value
1044:Generated_Source\PSoC4/ADC_Timer.c **** *
1045:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
1046:Generated_Source\PSoC4/ADC_Timer.c **** uint32 ADC_Timer_ReadCapture(void)
ARM GAS  C:\Temp\cc01nvIH.s 			page 36


1047:Generated_Source\PSoC4/ADC_Timer.c **** {
 950              		.loc 1 1047 0
 951              		.cfi_startproc
 952              		@ args = 0, pretend = 0, frame = 0
 953              		@ frame_needed = 0, uses_anonymous_args = 0
 954              		@ link register save eliminated.
1048:Generated_Source\PSoC4/ADC_Timer.c ****     return (ADC_Timer_COMP_CAP_REG & ADC_Timer_16BIT_MASK);
 955              		.loc 1 1048 0
 956 0000 024B     		ldr	r3, .L74
 957 0002 1868     		ldr	r0, [r3]
 958 0004 0004     		lsls	r0, r0, #16
 959 0006 000C     		lsrs	r0, r0, #16
1049:Generated_Source\PSoC4/ADC_Timer.c **** }
 960              		.loc 1 1049 0
 961              		@ sp needed
 962 0008 7047     		bx	lr
 963              	.L75:
 964 000a C046     		.align	2
 965              	.L74:
 966 000c 0C010540 		.word	1074069772
 967              		.cfi_endproc
 968              	.LFE26:
 969              		.size	ADC_Timer_ReadCapture, .-ADC_Timer_ReadCapture
 970              		.section	.text.ADC_Timer_ReadCaptureBuf,"ax",%progbits
 971              		.align	2
 972              		.global	ADC_Timer_ReadCaptureBuf
 973              		.code	16
 974              		.thumb_func
 975              		.type	ADC_Timer_ReadCaptureBuf, %function
 976              	ADC_Timer_ReadCaptureBuf:
 977              	.LFB27:
1050:Generated_Source\PSoC4/ADC_Timer.c **** 
1051:Generated_Source\PSoC4/ADC_Timer.c **** 
1052:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
1053:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_ReadCaptureBuf
1054:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
1055:Generated_Source\PSoC4/ADC_Timer.c **** *
1056:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
1057:Generated_Source\PSoC4/ADC_Timer.c **** *  Reads the capture buffer register. This API is applicable only for
1058:Generated_Source\PSoC4/ADC_Timer.c **** *  Timer/Counter with the capture mode and Quadrature Decoder modes.
1059:Generated_Source\PSoC4/ADC_Timer.c **** *
1060:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
1061:Generated_Source\PSoC4/ADC_Timer.c **** *  None
1062:Generated_Source\PSoC4/ADC_Timer.c **** *
1063:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
1064:Generated_Source\PSoC4/ADC_Timer.c **** *  Capture buffer value
1065:Generated_Source\PSoC4/ADC_Timer.c **** *
1066:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
1067:Generated_Source\PSoC4/ADC_Timer.c **** uint32 ADC_Timer_ReadCaptureBuf(void)
1068:Generated_Source\PSoC4/ADC_Timer.c **** {
 978              		.loc 1 1068 0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 0
 981              		@ frame_needed = 0, uses_anonymous_args = 0
 982              		@ link register save eliminated.
1069:Generated_Source\PSoC4/ADC_Timer.c ****     return (ADC_Timer_COMP_CAP_BUF_REG & ADC_Timer_16BIT_MASK);
 983              		.loc 1 1069 0
ARM GAS  C:\Temp\cc01nvIH.s 			page 37


 984 0000 024B     		ldr	r3, .L77
 985 0002 1868     		ldr	r0, [r3]
 986 0004 0004     		lsls	r0, r0, #16
 987 0006 000C     		lsrs	r0, r0, #16
1070:Generated_Source\PSoC4/ADC_Timer.c **** }
 988              		.loc 1 1070 0
 989              		@ sp needed
 990 0008 7047     		bx	lr
 991              	.L78:
 992 000a C046     		.align	2
 993              	.L77:
 994 000c 10010540 		.word	1074069776
 995              		.cfi_endproc
 996              	.LFE27:
 997              		.size	ADC_Timer_ReadCaptureBuf, .-ADC_Timer_ReadCaptureBuf
 998              		.section	.text.ADC_Timer_SetCaptureMode,"ax",%progbits
 999              		.align	2
 1000              		.global	ADC_Timer_SetCaptureMode
 1001              		.code	16
 1002              		.thumb_func
 1003              		.type	ADC_Timer_SetCaptureMode, %function
 1004              	ADC_Timer_SetCaptureMode:
 1005              	.LFB28:
1071:Generated_Source\PSoC4/ADC_Timer.c **** 
1072:Generated_Source\PSoC4/ADC_Timer.c **** 
1073:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
1074:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetCaptureMode
1075:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
1076:Generated_Source\PSoC4/ADC_Timer.c **** *
1077:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
1078:Generated_Source\PSoC4/ADC_Timer.c **** *  Sets the capture trigger mode. For PWM mode this is the switch input.
1079:Generated_Source\PSoC4/ADC_Timer.c **** *  This input is not applicable to the Timer/Counter without Capture and
1080:Generated_Source\PSoC4/ADC_Timer.c **** *  Quadrature Decoder modes.
1081:Generated_Source\PSoC4/ADC_Timer.c **** *
1082:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
1083:Generated_Source\PSoC4/ADC_Timer.c **** *  triggerMode: Enumerated trigger mode value
1084:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
1085:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_LEVEL     - Level
1086:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_RISING    - Rising edge
1087:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_FALLING   - Falling edge
1088:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_BOTH      - Both rising and falling edge
1089:Generated_Source\PSoC4/ADC_Timer.c **** *
1090:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
1091:Generated_Source\PSoC4/ADC_Timer.c **** *  None
1092:Generated_Source\PSoC4/ADC_Timer.c **** *
1093:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
1094:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetCaptureMode(uint32 triggerMode)
1095:Generated_Source\PSoC4/ADC_Timer.c **** {
 1006              		.loc 1 1095 0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 0
 1009              		@ frame_needed = 0, uses_anonymous_args = 0
 1010              	.LVL60:
 1011 0000 10B5     		push	{r4, lr}
 1012              		.cfi_def_cfa_offset 8
 1013              		.cfi_offset 4, -8
 1014              		.cfi_offset 14, -4
ARM GAS  C:\Temp\cc01nvIH.s 			page 38


 1015 0002 0400     		movs	r4, r0
1096:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
1097:Generated_Source\PSoC4/ADC_Timer.c **** 
1098:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
 1016              		.loc 1 1098 0
 1017 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 1018              	.LVL61:
1099:Generated_Source\PSoC4/ADC_Timer.c **** 
1100:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_TRIG_CONTROL1_REG &= (uint32)~ADC_Timer_CAPTURE_MASK;
 1019              		.loc 1 1100 0
 1020 0008 054B     		ldr	r3, .L80
 1021 000a 1A68     		ldr	r2, [r3]
 1022 000c 0321     		movs	r1, #3
 1023 000e 8A43     		bics	r2, r1
 1024 0010 1A60     		str	r2, [r3]
1101:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_TRIG_CONTROL1_REG |= triggerMode;
 1025              		.loc 1 1101 0
 1026 0012 1A68     		ldr	r2, [r3]
 1027 0014 1443     		orrs	r4, r2
 1028              	.LVL62:
 1029 0016 1C60     		str	r4, [r3]
1102:Generated_Source\PSoC4/ADC_Timer.c **** 
1103:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
 1030              		.loc 1 1103 0
 1031 0018 FFF7FEFF 		bl	CyExitCriticalSection
 1032              	.LVL63:
1104:Generated_Source\PSoC4/ADC_Timer.c **** }
 1033              		.loc 1 1104 0
 1034              		@ sp needed
 1035 001c 10BD     		pop	{r4, pc}
 1036              	.L81:
 1037 001e C046     		.align	2
 1038              	.L80:
 1039 0020 24010540 		.word	1074069796
 1040              		.cfi_endproc
 1041              	.LFE28:
 1042              		.size	ADC_Timer_SetCaptureMode, .-ADC_Timer_SetCaptureMode
 1043              		.section	.text.ADC_Timer_SetReloadMode,"ax",%progbits
 1044              		.align	2
 1045              		.global	ADC_Timer_SetReloadMode
 1046              		.code	16
 1047              		.thumb_func
 1048              		.type	ADC_Timer_SetReloadMode, %function
 1049              	ADC_Timer_SetReloadMode:
 1050              	.LFB29:
1105:Generated_Source\PSoC4/ADC_Timer.c **** 
1106:Generated_Source\PSoC4/ADC_Timer.c **** 
1107:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
1108:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetReloadMode
1109:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
1110:Generated_Source\PSoC4/ADC_Timer.c **** *
1111:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
1112:Generated_Source\PSoC4/ADC_Timer.c **** *  Sets the reload trigger mode. For Quadrature Decoder mode this is the index
1113:Generated_Source\PSoC4/ADC_Timer.c **** *  input.
1114:Generated_Source\PSoC4/ADC_Timer.c **** *
1115:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
1116:Generated_Source\PSoC4/ADC_Timer.c **** *  triggerMode: Enumerated trigger mode value
ARM GAS  C:\Temp\cc01nvIH.s 			page 39


1117:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
1118:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_LEVEL     - Level
1119:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_RISING    - Rising edge
1120:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_FALLING   - Falling edge
1121:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_BOTH      - Both rising and falling edge
1122:Generated_Source\PSoC4/ADC_Timer.c **** *
1123:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
1124:Generated_Source\PSoC4/ADC_Timer.c **** *  None
1125:Generated_Source\PSoC4/ADC_Timer.c **** *
1126:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
1127:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetReloadMode(uint32 triggerMode)
1128:Generated_Source\PSoC4/ADC_Timer.c **** {
 1051              		.loc 1 1128 0
 1052              		.cfi_startproc
 1053              		@ args = 0, pretend = 0, frame = 0
 1054              		@ frame_needed = 0, uses_anonymous_args = 0
 1055              	.LVL64:
 1056 0000 10B5     		push	{r4, lr}
 1057              		.cfi_def_cfa_offset 8
 1058              		.cfi_offset 4, -8
 1059              		.cfi_offset 14, -4
 1060 0002 0400     		movs	r4, r0
1129:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
1130:Generated_Source\PSoC4/ADC_Timer.c **** 
1131:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
 1061              		.loc 1 1131 0
 1062 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 1063              	.LVL65:
1132:Generated_Source\PSoC4/ADC_Timer.c **** 
1133:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_TRIG_CONTROL1_REG &= (uint32)~ADC_Timer_RELOAD_MASK;
 1064              		.loc 1 1133 0
 1065 0008 054B     		ldr	r3, .L83
 1066 000a 1A68     		ldr	r2, [r3]
 1067 000c 3021     		movs	r1, #48
 1068 000e 8A43     		bics	r2, r1
 1069 0010 1A60     		str	r2, [r3]
1134:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << ADC_Timer_RELOAD_SHIFT));
 1070              		.loc 1 1134 0
 1071 0012 1A68     		ldr	r2, [r3]
 1072 0014 2401     		lsls	r4, r4, #4
 1073              	.LVL66:
 1074 0016 1443     		orrs	r4, r2
 1075 0018 1C60     		str	r4, [r3]
1135:Generated_Source\PSoC4/ADC_Timer.c **** 
1136:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
 1076              		.loc 1 1136 0
 1077 001a FFF7FEFF 		bl	CyExitCriticalSection
 1078              	.LVL67:
1137:Generated_Source\PSoC4/ADC_Timer.c **** }
 1079              		.loc 1 1137 0
 1080              		@ sp needed
 1081 001e 10BD     		pop	{r4, pc}
 1082              	.L84:
 1083              		.align	2
 1084              	.L83:
 1085 0020 24010540 		.word	1074069796
 1086              		.cfi_endproc
ARM GAS  C:\Temp\cc01nvIH.s 			page 40


 1087              	.LFE29:
 1088              		.size	ADC_Timer_SetReloadMode, .-ADC_Timer_SetReloadMode
 1089              		.section	.text.ADC_Timer_SetStartMode,"ax",%progbits
 1090              		.align	2
 1091              		.global	ADC_Timer_SetStartMode
 1092              		.code	16
 1093              		.thumb_func
 1094              		.type	ADC_Timer_SetStartMode, %function
 1095              	ADC_Timer_SetStartMode:
 1096              	.LFB30:
1138:Generated_Source\PSoC4/ADC_Timer.c **** 
1139:Generated_Source\PSoC4/ADC_Timer.c **** 
1140:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
1141:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetStartMode
1142:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
1143:Generated_Source\PSoC4/ADC_Timer.c **** *
1144:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
1145:Generated_Source\PSoC4/ADC_Timer.c **** *  Sets the start trigger mode. For Quadrature Decoder mode this is the
1146:Generated_Source\PSoC4/ADC_Timer.c **** *  phiB input.
1147:Generated_Source\PSoC4/ADC_Timer.c **** *
1148:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
1149:Generated_Source\PSoC4/ADC_Timer.c **** *  triggerMode: Enumerated trigger mode value
1150:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
1151:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_LEVEL     - Level
1152:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_RISING    - Rising edge
1153:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_FALLING   - Falling edge
1154:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_BOTH      - Both rising and falling edge
1155:Generated_Source\PSoC4/ADC_Timer.c **** *
1156:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
1157:Generated_Source\PSoC4/ADC_Timer.c **** *  None
1158:Generated_Source\PSoC4/ADC_Timer.c **** *
1159:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
1160:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetStartMode(uint32 triggerMode)
1161:Generated_Source\PSoC4/ADC_Timer.c **** {
 1097              		.loc 1 1161 0
 1098              		.cfi_startproc
 1099              		@ args = 0, pretend = 0, frame = 0
 1100              		@ frame_needed = 0, uses_anonymous_args = 0
 1101              	.LVL68:
 1102 0000 10B5     		push	{r4, lr}
 1103              		.cfi_def_cfa_offset 8
 1104              		.cfi_offset 4, -8
 1105              		.cfi_offset 14, -4
 1106 0002 0400     		movs	r4, r0
1162:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
1163:Generated_Source\PSoC4/ADC_Timer.c **** 
1164:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
 1107              		.loc 1 1164 0
 1108 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 1109              	.LVL69:
1165:Generated_Source\PSoC4/ADC_Timer.c **** 
1166:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_TRIG_CONTROL1_REG &= (uint32)~ADC_Timer_START_MASK;
 1110              		.loc 1 1166 0
 1111 0008 054B     		ldr	r3, .L86
 1112 000a 1968     		ldr	r1, [r3]
 1113 000c 054A     		ldr	r2, .L86+4
 1114 000e 0A40     		ands	r2, r1
ARM GAS  C:\Temp\cc01nvIH.s 			page 41


 1115 0010 1A60     		str	r2, [r3]
1167:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << ADC_Timer_START_SHIFT));
 1116              		.loc 1 1167 0
 1117 0012 1A68     		ldr	r2, [r3]
 1118 0014 2402     		lsls	r4, r4, #8
 1119              	.LVL70:
 1120 0016 1443     		orrs	r4, r2
 1121 0018 1C60     		str	r4, [r3]
1168:Generated_Source\PSoC4/ADC_Timer.c **** 
1169:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
 1122              		.loc 1 1169 0
 1123 001a FFF7FEFF 		bl	CyExitCriticalSection
 1124              	.LVL71:
1170:Generated_Source\PSoC4/ADC_Timer.c **** }
 1125              		.loc 1 1170 0
 1126              		@ sp needed
 1127 001e 10BD     		pop	{r4, pc}
 1128              	.L87:
 1129              		.align	2
 1130              	.L86:
 1131 0020 24010540 		.word	1074069796
 1132 0024 FFFCFFFF 		.word	-769
 1133              		.cfi_endproc
 1134              	.LFE30:
 1135              		.size	ADC_Timer_SetStartMode, .-ADC_Timer_SetStartMode
 1136              		.section	.text.ADC_Timer_SetStopMode,"ax",%progbits
 1137              		.align	2
 1138              		.global	ADC_Timer_SetStopMode
 1139              		.code	16
 1140              		.thumb_func
 1141              		.type	ADC_Timer_SetStopMode, %function
 1142              	ADC_Timer_SetStopMode:
 1143              	.LFB31:
1171:Generated_Source\PSoC4/ADC_Timer.c **** 
1172:Generated_Source\PSoC4/ADC_Timer.c **** 
1173:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
1174:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetStopMode
1175:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
1176:Generated_Source\PSoC4/ADC_Timer.c **** *
1177:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
1178:Generated_Source\PSoC4/ADC_Timer.c **** *  Sets the stop trigger mode. For PWM mode this is the kill input.
1179:Generated_Source\PSoC4/ADC_Timer.c **** *
1180:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
1181:Generated_Source\PSoC4/ADC_Timer.c **** *  triggerMode: Enumerated trigger mode value
1182:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
1183:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_LEVEL     - Level
1184:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_RISING    - Rising edge
1185:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_FALLING   - Falling edge
1186:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_BOTH      - Both rising and falling edge
1187:Generated_Source\PSoC4/ADC_Timer.c **** *
1188:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
1189:Generated_Source\PSoC4/ADC_Timer.c **** *  None
1190:Generated_Source\PSoC4/ADC_Timer.c **** *
1191:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
1192:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetStopMode(uint32 triggerMode)
1193:Generated_Source\PSoC4/ADC_Timer.c **** {
 1144              		.loc 1 1193 0
ARM GAS  C:\Temp\cc01nvIH.s 			page 42


 1145              		.cfi_startproc
 1146              		@ args = 0, pretend = 0, frame = 0
 1147              		@ frame_needed = 0, uses_anonymous_args = 0
 1148              	.LVL72:
 1149 0000 10B5     		push	{r4, lr}
 1150              		.cfi_def_cfa_offset 8
 1151              		.cfi_offset 4, -8
 1152              		.cfi_offset 14, -4
 1153 0002 0400     		movs	r4, r0
1194:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
1195:Generated_Source\PSoC4/ADC_Timer.c **** 
1196:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
 1154              		.loc 1 1196 0
 1155 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 1156              	.LVL73:
1197:Generated_Source\PSoC4/ADC_Timer.c **** 
1198:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_TRIG_CONTROL1_REG &= (uint32)~ADC_Timer_STOP_MASK;
 1157              		.loc 1 1198 0
 1158 0008 054B     		ldr	r3, .L89
 1159 000a 1A68     		ldr	r2, [r3]
 1160 000c C021     		movs	r1, #192
 1161 000e 8A43     		bics	r2, r1
 1162 0010 1A60     		str	r2, [r3]
1199:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << ADC_Timer_STOP_SHIFT));
 1163              		.loc 1 1199 0
 1164 0012 1A68     		ldr	r2, [r3]
 1165 0014 A401     		lsls	r4, r4, #6
 1166              	.LVL74:
 1167 0016 1443     		orrs	r4, r2
 1168 0018 1C60     		str	r4, [r3]
1200:Generated_Source\PSoC4/ADC_Timer.c **** 
1201:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
 1169              		.loc 1 1201 0
 1170 001a FFF7FEFF 		bl	CyExitCriticalSection
 1171              	.LVL75:
1202:Generated_Source\PSoC4/ADC_Timer.c **** }
 1172              		.loc 1 1202 0
 1173              		@ sp needed
 1174 001e 10BD     		pop	{r4, pc}
 1175              	.L90:
 1176              		.align	2
 1177              	.L89:
 1178 0020 24010540 		.word	1074069796
 1179              		.cfi_endproc
 1180              	.LFE31:
 1181              		.size	ADC_Timer_SetStopMode, .-ADC_Timer_SetStopMode
 1182              		.section	.text.ADC_Timer_SetCountMode,"ax",%progbits
 1183              		.align	2
 1184              		.global	ADC_Timer_SetCountMode
 1185              		.code	16
 1186              		.thumb_func
 1187              		.type	ADC_Timer_SetCountMode, %function
 1188              	ADC_Timer_SetCountMode:
 1189              	.LFB32:
1203:Generated_Source\PSoC4/ADC_Timer.c **** 
1204:Generated_Source\PSoC4/ADC_Timer.c **** 
1205:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
ARM GAS  C:\Temp\cc01nvIH.s 			page 43


1206:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetCountMode
1207:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
1208:Generated_Source\PSoC4/ADC_Timer.c **** *
1209:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
1210:Generated_Source\PSoC4/ADC_Timer.c **** *  Sets the count trigger mode. For Quadrature Decoder mode this is the phiA
1211:Generated_Source\PSoC4/ADC_Timer.c **** *  input.
1212:Generated_Source\PSoC4/ADC_Timer.c **** *
1213:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
1214:Generated_Source\PSoC4/ADC_Timer.c **** *  triggerMode: Enumerated trigger mode value
1215:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
1216:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_LEVEL     - Level
1217:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_RISING    - Rising edge
1218:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_FALLING   - Falling edge
1219:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_TRIG_BOTH      - Both rising and falling edge
1220:Generated_Source\PSoC4/ADC_Timer.c **** *
1221:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
1222:Generated_Source\PSoC4/ADC_Timer.c **** *  None
1223:Generated_Source\PSoC4/ADC_Timer.c **** *
1224:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
1225:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetCountMode(uint32 triggerMode)
1226:Generated_Source\PSoC4/ADC_Timer.c **** {
 1190              		.loc 1 1226 0
 1191              		.cfi_startproc
 1192              		@ args = 0, pretend = 0, frame = 0
 1193              		@ frame_needed = 0, uses_anonymous_args = 0
 1194              	.LVL76:
 1195 0000 10B5     		push	{r4, lr}
 1196              		.cfi_def_cfa_offset 8
 1197              		.cfi_offset 4, -8
 1198              		.cfi_offset 14, -4
 1199 0002 0400     		movs	r4, r0
1227:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
1228:Generated_Source\PSoC4/ADC_Timer.c **** 
1229:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
 1200              		.loc 1 1229 0
 1201 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 1202              	.LVL77:
1230:Generated_Source\PSoC4/ADC_Timer.c **** 
1231:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_TRIG_CONTROL1_REG &= (uint32)~ADC_Timer_COUNT_MASK;
 1203              		.loc 1 1231 0
 1204 0008 054B     		ldr	r3, .L92
 1205 000a 1A68     		ldr	r2, [r3]
 1206 000c 0C21     		movs	r1, #12
 1207 000e 8A43     		bics	r2, r1
 1208 0010 1A60     		str	r2, [r3]
1232:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << ADC_Timer_COUNT_SHIFT));
 1209              		.loc 1 1232 0
 1210 0012 1A68     		ldr	r2, [r3]
 1211 0014 A400     		lsls	r4, r4, #2
 1212              	.LVL78:
 1213 0016 1443     		orrs	r4, r2
 1214 0018 1C60     		str	r4, [r3]
1233:Generated_Source\PSoC4/ADC_Timer.c **** 
1234:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
 1215              		.loc 1 1234 0
 1216 001a FFF7FEFF 		bl	CyExitCriticalSection
 1217              	.LVL79:
ARM GAS  C:\Temp\cc01nvIH.s 			page 44


1235:Generated_Source\PSoC4/ADC_Timer.c **** }
 1218              		.loc 1 1235 0
 1219              		@ sp needed
 1220 001e 10BD     		pop	{r4, pc}
 1221              	.L93:
 1222              		.align	2
 1223              	.L92:
 1224 0020 24010540 		.word	1074069796
 1225              		.cfi_endproc
 1226              	.LFE32:
 1227              		.size	ADC_Timer_SetCountMode, .-ADC_Timer_SetCountMode
 1228              		.section	.text.ADC_Timer_TriggerCommand,"ax",%progbits
 1229              		.align	2
 1230              		.global	ADC_Timer_TriggerCommand
 1231              		.code	16
 1232              		.thumb_func
 1233              		.type	ADC_Timer_TriggerCommand, %function
 1234              	ADC_Timer_TriggerCommand:
 1235              	.LFB33:
1236:Generated_Source\PSoC4/ADC_Timer.c **** 
1237:Generated_Source\PSoC4/ADC_Timer.c **** 
1238:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
1239:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_TriggerCommand
1240:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
1241:Generated_Source\PSoC4/ADC_Timer.c **** *
1242:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
1243:Generated_Source\PSoC4/ADC_Timer.c **** *  Triggers the designated command to occur on the designated TCPWM instances.
1244:Generated_Source\PSoC4/ADC_Timer.c **** *  The mask can be used to apply this command simultaneously to more than one
1245:Generated_Source\PSoC4/ADC_Timer.c **** *  instance.  This allows multiple TCPWM instances to be synchronized.
1246:Generated_Source\PSoC4/ADC_Timer.c **** *
1247:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
1248:Generated_Source\PSoC4/ADC_Timer.c **** *  mask: A combination of mask bits for each instance of the TCPWM that the
1249:Generated_Source\PSoC4/ADC_Timer.c **** *        command should apply to.  This function from one instance can be used
1250:Generated_Source\PSoC4/ADC_Timer.c **** *        to apply the command to any of the instances in the design.
1251:Generated_Source\PSoC4/ADC_Timer.c **** *        The mask value for a specific instance is available with the MASK
1252:Generated_Source\PSoC4/ADC_Timer.c **** *        define.
1253:Generated_Source\PSoC4/ADC_Timer.c **** *  command: Enumerated command values. Capture command only applicable for
1254:Generated_Source\PSoC4/ADC_Timer.c **** *           Timer/Counter with Capture and PWM modes.
1255:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
1256:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_CMD_CAPTURE    - Trigger Capture/Switch command
1257:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_CMD_RELOAD     - Trigger Reload/Index command
1258:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_CMD_STOP       - Trigger Stop/Kill command
1259:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_CMD_START      - Trigger Start/phiB command
1260:Generated_Source\PSoC4/ADC_Timer.c **** *
1261:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
1262:Generated_Source\PSoC4/ADC_Timer.c **** *  None
1263:Generated_Source\PSoC4/ADC_Timer.c **** *
1264:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
1265:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_TriggerCommand(uint32 mask, uint32 command)
1266:Generated_Source\PSoC4/ADC_Timer.c **** {
 1236              		.loc 1 1266 0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 0
 1239              		@ frame_needed = 0, uses_anonymous_args = 0
 1240              	.LVL80:
 1241 0000 70B5     		push	{r4, r5, r6, lr}
 1242              		.cfi_def_cfa_offset 16
ARM GAS  C:\Temp\cc01nvIH.s 			page 45


 1243              		.cfi_offset 4, -16
 1244              		.cfi_offset 5, -12
 1245              		.cfi_offset 6, -8
 1246              		.cfi_offset 14, -4
 1247 0002 0400     		movs	r4, r0
 1248 0004 0D00     		movs	r5, r1
1267:Generated_Source\PSoC4/ADC_Timer.c ****     uint8 enableInterrupts;
1268:Generated_Source\PSoC4/ADC_Timer.c **** 
1269:Generated_Source\PSoC4/ADC_Timer.c ****     enableInterrupts = CyEnterCriticalSection();
 1249              		.loc 1 1269 0
 1250 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 1251              	.LVL81:
1270:Generated_Source\PSoC4/ADC_Timer.c **** 
1271:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_COMMAND_REG = ((uint32)(mask << command));
 1252              		.loc 1 1271 0
 1253 000a AC40     		lsls	r4, r4, r5
 1254              	.LVL82:
 1255 000c 024B     		ldr	r3, .L95
 1256 000e 1C60     		str	r4, [r3]
1272:Generated_Source\PSoC4/ADC_Timer.c **** 
1273:Generated_Source\PSoC4/ADC_Timer.c ****     CyExitCriticalSection(enableInterrupts);
 1257              		.loc 1 1273 0
 1258 0010 FFF7FEFF 		bl	CyExitCriticalSection
 1259              	.LVL83:
1274:Generated_Source\PSoC4/ADC_Timer.c **** }
 1260              		.loc 1 1274 0
 1261              		@ sp needed
 1262              	.LVL84:
 1263 0014 70BD     		pop	{r4, r5, r6, pc}
 1264              	.L96:
 1265 0016 C046     		.align	2
 1266              	.L95:
 1267 0018 08000540 		.word	1074069512
 1268              		.cfi_endproc
 1269              	.LFE33:
 1270              		.size	ADC_Timer_TriggerCommand, .-ADC_Timer_TriggerCommand
 1271              		.section	.text.ADC_Timer_ReadStatus,"ax",%progbits
 1272              		.align	2
 1273              		.global	ADC_Timer_ReadStatus
 1274              		.code	16
 1275              		.thumb_func
 1276              		.type	ADC_Timer_ReadStatus, %function
 1277              	ADC_Timer_ReadStatus:
 1278              	.LFB34:
1275:Generated_Source\PSoC4/ADC_Timer.c **** 
1276:Generated_Source\PSoC4/ADC_Timer.c **** 
1277:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
1278:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_ReadStatus
1279:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
1280:Generated_Source\PSoC4/ADC_Timer.c **** *
1281:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
1282:Generated_Source\PSoC4/ADC_Timer.c **** *  Reads the status of the ADC_Timer.
1283:Generated_Source\PSoC4/ADC_Timer.c **** *
1284:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
1285:Generated_Source\PSoC4/ADC_Timer.c **** *  None
1286:Generated_Source\PSoC4/ADC_Timer.c **** *
1287:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
ARM GAS  C:\Temp\cc01nvIH.s 			page 46


1288:Generated_Source\PSoC4/ADC_Timer.c **** *  Status
1289:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
1290:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_STATUS_DOWN    - Set if counting down
1291:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_STATUS_RUNNING - Set if counter is running
1292:Generated_Source\PSoC4/ADC_Timer.c **** *
1293:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
1294:Generated_Source\PSoC4/ADC_Timer.c **** uint32 ADC_Timer_ReadStatus(void)
1295:Generated_Source\PSoC4/ADC_Timer.c **** {
 1279              		.loc 1 1295 0
 1280              		.cfi_startproc
 1281              		@ args = 0, pretend = 0, frame = 0
 1282              		@ frame_needed = 0, uses_anonymous_args = 0
 1283              		@ link register save eliminated.
1296:Generated_Source\PSoC4/ADC_Timer.c ****     return ((ADC_Timer_STATUS_REG >> ADC_Timer_RUNNING_STATUS_SHIFT) |
 1284              		.loc 1 1296 0
 1285 0000 034B     		ldr	r3, .L98
 1286 0002 1868     		ldr	r0, [r3]
 1287 0004 820F     		lsrs	r2, r0, #30
1297:Generated_Source\PSoC4/ADC_Timer.c ****             (ADC_Timer_STATUS_REG & ADC_Timer_STATUS_DOWN));
 1288              		.loc 1 1297 0
 1289 0006 1B68     		ldr	r3, [r3]
 1290 0008 0120     		movs	r0, #1
 1291 000a 1840     		ands	r0, r3
1296:Generated_Source\PSoC4/ADC_Timer.c ****     return ((ADC_Timer_STATUS_REG >> ADC_Timer_RUNNING_STATUS_SHIFT) |
 1292              		.loc 1 1296 0
 1293 000c 1043     		orrs	r0, r2
1298:Generated_Source\PSoC4/ADC_Timer.c **** }
 1294              		.loc 1 1298 0
 1295              		@ sp needed
 1296 000e 7047     		bx	lr
 1297              	.L99:
 1298              		.align	2
 1299              	.L98:
 1300 0010 04010540 		.word	1074069764
 1301              		.cfi_endproc
 1302              	.LFE34:
 1303              		.size	ADC_Timer_ReadStatus, .-ADC_Timer_ReadStatus
 1304              		.section	.text.ADC_Timer_SetInterruptMode,"ax",%progbits
 1305              		.align	2
 1306              		.global	ADC_Timer_SetInterruptMode
 1307              		.code	16
 1308              		.thumb_func
 1309              		.type	ADC_Timer_SetInterruptMode, %function
 1310              	ADC_Timer_SetInterruptMode:
 1311              	.LFB35:
1299:Generated_Source\PSoC4/ADC_Timer.c **** 
1300:Generated_Source\PSoC4/ADC_Timer.c **** 
1301:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
1302:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetInterruptMode
1303:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
1304:Generated_Source\PSoC4/ADC_Timer.c **** *
1305:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
1306:Generated_Source\PSoC4/ADC_Timer.c **** *  Sets the interrupt mask to control which interrupt
1307:Generated_Source\PSoC4/ADC_Timer.c **** *  requests generate the interrupt signal.
1308:Generated_Source\PSoC4/ADC_Timer.c **** *
1309:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
1310:Generated_Source\PSoC4/ADC_Timer.c **** *   interruptMask: Mask of bits to be enabled
ARM GAS  C:\Temp\cc01nvIH.s 			page 47


1311:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
1312:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_INTR_MASK_TC       - Terminal count mask
1313:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_INTR_MASK_CC_MATCH - Compare count / capture mask
1314:Generated_Source\PSoC4/ADC_Timer.c **** *
1315:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
1316:Generated_Source\PSoC4/ADC_Timer.c **** *  None
1317:Generated_Source\PSoC4/ADC_Timer.c **** *
1318:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
1319:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetInterruptMode(uint32 interruptMask)
1320:Generated_Source\PSoC4/ADC_Timer.c **** {
 1312              		.loc 1 1320 0
 1313              		.cfi_startproc
 1314              		@ args = 0, pretend = 0, frame = 0
 1315              		@ frame_needed = 0, uses_anonymous_args = 0
 1316              		@ link register save eliminated.
 1317              	.LVL85:
1321:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_INTERRUPT_MASK_REG =  interruptMask;
 1318              		.loc 1 1321 0
 1319 0000 014B     		ldr	r3, .L101
 1320 0002 1860     		str	r0, [r3]
1322:Generated_Source\PSoC4/ADC_Timer.c **** }
 1321              		.loc 1 1322 0
 1322              		@ sp needed
 1323 0004 7047     		bx	lr
 1324              	.L102:
 1325 0006 C046     		.align	2
 1326              	.L101:
 1327 0008 38010540 		.word	1074069816
 1328              		.cfi_endproc
 1329              	.LFE35:
 1330              		.size	ADC_Timer_SetInterruptMode, .-ADC_Timer_SetInterruptMode
 1331              		.section	.text.ADC_Timer_Init,"ax",%progbits
 1332              		.align	2
 1333              		.global	ADC_Timer_Init
 1334              		.code	16
 1335              		.thumb_func
 1336              		.type	ADC_Timer_Init, %function
 1337              	ADC_Timer_Init:
 1338              	.LFB0:
  39:Generated_Source\PSoC4/ADC_Timer.c **** 
 1339              		.loc 1 39 0
 1340              		.cfi_startproc
 1341              		@ args = 0, pretend = 0, frame = 0
 1342              		@ frame_needed = 0, uses_anonymous_args = 0
 1343 0000 10B5     		push	{r4, lr}
 1344              		.cfi_def_cfa_offset 8
 1345              		.cfi_offset 4, -8
 1346              		.cfi_offset 14, -4
  58:Generated_Source\PSoC4/ADC_Timer.c ****         
 1347              		.loc 1 58 0
 1348 0002 8022     		movs	r2, #128
 1349 0004 9204     		lsls	r2, r2, #18
 1350 0006 074B     		ldr	r3, .L104
 1351 0008 1A60     		str	r2, [r3]
  61:Generated_Source\PSoC4/ADC_Timer.c ****     
 1352              		.loc 1 61 0
 1353 000a 0C22     		movs	r2, #12
ARM GAS  C:\Temp\cc01nvIH.s 			page 48


 1354 000c 064B     		ldr	r3, .L104+4
 1355 000e 1A60     		str	r2, [r3]
  64:Generated_Source\PSoC4/ADC_Timer.c ****         
 1356              		.loc 1 64 0
 1357 0010 0120     		movs	r0, #1
 1358 0012 FFF7FEFF 		bl	ADC_Timer_SetInterruptMode
 1359              	.LVL86:
  67:Generated_Source\PSoC4/ADC_Timer.c **** 
 1360              		.loc 1 67 0
 1361 0016 0548     		ldr	r0, .L104+8
 1362 0018 FFF7FEFF 		bl	ADC_Timer_WritePeriod
 1363              	.LVL87:
  84:Generated_Source\PSoC4/ADC_Timer.c ****         #endif /* (ADC_Timer_CY_TCPWM_V2 && ADC_Timer_TIMER_UPDOWN_CNT_USED && !ADC_Timer_CY_TCPWM_
 1364              		.loc 1 84 0
 1365 001c 0020     		movs	r0, #0
 1366 001e FFF7FEFF 		bl	ADC_Timer_WriteCounter
 1367              	.LVL88:
 160:Generated_Source\PSoC4/ADC_Timer.c **** 
 1368              		.loc 1 160 0
 1369              		@ sp needed
 1370 0022 10BD     		pop	{r4, pc}
 1371              	.L105:
 1372              		.align	2
 1373              	.L104:
 1374 0024 00010540 		.word	1074069760
 1375 0028 24010540 		.word	1074069796
 1376 002c FFFF0000 		.word	65535
 1377              		.cfi_endproc
 1378              	.LFE0:
 1379              		.size	ADC_Timer_Init, .-ADC_Timer_Init
 1380              		.section	.text.ADC_Timer_Start,"ax",%progbits
 1381              		.align	2
 1382              		.global	ADC_Timer_Start
 1383              		.code	16
 1384              		.thumb_func
 1385              		.type	ADC_Timer_Start, %function
 1386              	ADC_Timer_Start:
 1387              	.LFB2:
 231:Generated_Source\PSoC4/ADC_Timer.c ****     if (0u == ADC_Timer_initVar)
 1388              		.loc 1 231 0
 1389              		.cfi_startproc
 1390              		@ args = 0, pretend = 0, frame = 0
 1391              		@ frame_needed = 0, uses_anonymous_args = 0
 1392 0000 10B5     		push	{r4, lr}
 1393              		.cfi_def_cfa_offset 8
 1394              		.cfi_offset 4, -8
 1395              		.cfi_offset 14, -4
 232:Generated_Source\PSoC4/ADC_Timer.c ****     {
 1396              		.loc 1 232 0
 1397 0002 064B     		ldr	r3, .L108
 1398 0004 1B78     		ldrb	r3, [r3]
 1399 0006 002B     		cmp	r3, #0
 1400 0008 04D1     		bne	.L107
 234:Generated_Source\PSoC4/ADC_Timer.c ****         ADC_Timer_initVar = 1u;
 1401              		.loc 1 234 0
 1402 000a FFF7FEFF 		bl	ADC_Timer_Init
 1403              	.LVL89:
ARM GAS  C:\Temp\cc01nvIH.s 			page 49


 235:Generated_Source\PSoC4/ADC_Timer.c ****     }
 1404              		.loc 1 235 0
 1405 000e 0122     		movs	r2, #1
 1406 0010 024B     		ldr	r3, .L108
 1407 0012 1A70     		strb	r2, [r3]
 1408              	.L107:
 238:Generated_Source\PSoC4/ADC_Timer.c **** }
 1409              		.loc 1 238 0
 1410 0014 FFF7FEFF 		bl	ADC_Timer_Enable
 1411              	.LVL90:
 239:Generated_Source\PSoC4/ADC_Timer.c **** 
 1412              		.loc 1 239 0
 1413              		@ sp needed
 1414 0018 10BD     		pop	{r4, pc}
 1415              	.L109:
 1416 001a C046     		.align	2
 1417              	.L108:
 1418 001c 00000000 		.word	.LANCHOR0
 1419              		.cfi_endproc
 1420              	.LFE2:
 1421              		.size	ADC_Timer_Start, .-ADC_Timer_Start
 1422              		.section	.text.ADC_Timer_GetInterruptSourceMasked,"ax",%progbits
 1423              		.align	2
 1424              		.global	ADC_Timer_GetInterruptSourceMasked
 1425              		.code	16
 1426              		.thumb_func
 1427              		.type	ADC_Timer_GetInterruptSourceMasked, %function
 1428              	ADC_Timer_GetInterruptSourceMasked:
 1429              	.LFB36:
1323:Generated_Source\PSoC4/ADC_Timer.c **** 
1324:Generated_Source\PSoC4/ADC_Timer.c **** 
1325:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
1326:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_GetInterruptSourceMasked
1327:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
1328:Generated_Source\PSoC4/ADC_Timer.c **** *
1329:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
1330:Generated_Source\PSoC4/ADC_Timer.c **** *  Gets the interrupt requests masked by the interrupt mask.
1331:Generated_Source\PSoC4/ADC_Timer.c **** *
1332:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
1333:Generated_Source\PSoC4/ADC_Timer.c **** *   None
1334:Generated_Source\PSoC4/ADC_Timer.c **** *
1335:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
1336:Generated_Source\PSoC4/ADC_Timer.c **** *  Masked interrupt source
1337:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
1338:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_INTR_MASK_TC       - Terminal count mask
1339:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_INTR_MASK_CC_MATCH - Compare count / capture mask
1340:Generated_Source\PSoC4/ADC_Timer.c **** *
1341:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
1342:Generated_Source\PSoC4/ADC_Timer.c **** uint32 ADC_Timer_GetInterruptSourceMasked(void)
1343:Generated_Source\PSoC4/ADC_Timer.c **** {
 1430              		.loc 1 1343 0
 1431              		.cfi_startproc
 1432              		@ args = 0, pretend = 0, frame = 0
 1433              		@ frame_needed = 0, uses_anonymous_args = 0
 1434              		@ link register save eliminated.
1344:Generated_Source\PSoC4/ADC_Timer.c ****     return (ADC_Timer_INTERRUPT_MASKED_REG);
 1435              		.loc 1 1344 0
ARM GAS  C:\Temp\cc01nvIH.s 			page 50


 1436 0000 014B     		ldr	r3, .L111
 1437 0002 1868     		ldr	r0, [r3]
1345:Generated_Source\PSoC4/ADC_Timer.c **** }
 1438              		.loc 1 1345 0
 1439              		@ sp needed
 1440 0004 7047     		bx	lr
 1441              	.L112:
 1442 0006 C046     		.align	2
 1443              	.L111:
 1444 0008 3C010540 		.word	1074069820
 1445              		.cfi_endproc
 1446              	.LFE36:
 1447              		.size	ADC_Timer_GetInterruptSourceMasked, .-ADC_Timer_GetInterruptSourceMasked
 1448              		.section	.text.ADC_Timer_GetInterruptSource,"ax",%progbits
 1449              		.align	2
 1450              		.global	ADC_Timer_GetInterruptSource
 1451              		.code	16
 1452              		.thumb_func
 1453              		.type	ADC_Timer_GetInterruptSource, %function
 1454              	ADC_Timer_GetInterruptSource:
 1455              	.LFB37:
1346:Generated_Source\PSoC4/ADC_Timer.c **** 
1347:Generated_Source\PSoC4/ADC_Timer.c **** 
1348:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
1349:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_GetInterruptSource
1350:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
1351:Generated_Source\PSoC4/ADC_Timer.c **** *
1352:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
1353:Generated_Source\PSoC4/ADC_Timer.c **** *  Gets the interrupt requests (without masking).
1354:Generated_Source\PSoC4/ADC_Timer.c **** *
1355:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
1356:Generated_Source\PSoC4/ADC_Timer.c **** *  None
1357:Generated_Source\PSoC4/ADC_Timer.c **** *
1358:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
1359:Generated_Source\PSoC4/ADC_Timer.c **** *  Interrupt request value
1360:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
1361:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_INTR_MASK_TC       - Terminal count mask
1362:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_INTR_MASK_CC_MATCH - Compare count / capture mask
1363:Generated_Source\PSoC4/ADC_Timer.c **** *
1364:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
1365:Generated_Source\PSoC4/ADC_Timer.c **** uint32 ADC_Timer_GetInterruptSource(void)
1366:Generated_Source\PSoC4/ADC_Timer.c **** {
 1456              		.loc 1 1366 0
 1457              		.cfi_startproc
 1458              		@ args = 0, pretend = 0, frame = 0
 1459              		@ frame_needed = 0, uses_anonymous_args = 0
 1460              		@ link register save eliminated.
1367:Generated_Source\PSoC4/ADC_Timer.c ****     return (ADC_Timer_INTERRUPT_REQ_REG);
 1461              		.loc 1 1367 0
 1462 0000 014B     		ldr	r3, .L114
 1463 0002 1868     		ldr	r0, [r3]
1368:Generated_Source\PSoC4/ADC_Timer.c **** }
 1464              		.loc 1 1368 0
 1465              		@ sp needed
 1466 0004 7047     		bx	lr
 1467              	.L115:
 1468 0006 C046     		.align	2
ARM GAS  C:\Temp\cc01nvIH.s 			page 51


 1469              	.L114:
 1470 0008 30010540 		.word	1074069808
 1471              		.cfi_endproc
 1472              	.LFE37:
 1473              		.size	ADC_Timer_GetInterruptSource, .-ADC_Timer_GetInterruptSource
 1474              		.section	.text.ADC_Timer_ClearInterrupt,"ax",%progbits
 1475              		.align	2
 1476              		.global	ADC_Timer_ClearInterrupt
 1477              		.code	16
 1478              		.thumb_func
 1479              		.type	ADC_Timer_ClearInterrupt, %function
 1480              	ADC_Timer_ClearInterrupt:
 1481              	.LFB38:
1369:Generated_Source\PSoC4/ADC_Timer.c **** 
1370:Generated_Source\PSoC4/ADC_Timer.c **** 
1371:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
1372:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_ClearInterrupt
1373:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
1374:Generated_Source\PSoC4/ADC_Timer.c **** *
1375:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
1376:Generated_Source\PSoC4/ADC_Timer.c **** *  Clears the interrupt request.
1377:Generated_Source\PSoC4/ADC_Timer.c **** *
1378:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
1379:Generated_Source\PSoC4/ADC_Timer.c **** *   interruptMask: Mask of interrupts to clear
1380:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
1381:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_INTR_MASK_TC       - Terminal count mask
1382:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_INTR_MASK_CC_MATCH - Compare count / capture mask
1383:Generated_Source\PSoC4/ADC_Timer.c **** *
1384:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
1385:Generated_Source\PSoC4/ADC_Timer.c **** *  None
1386:Generated_Source\PSoC4/ADC_Timer.c **** *
1387:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
1388:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_ClearInterrupt(uint32 interruptMask)
1389:Generated_Source\PSoC4/ADC_Timer.c **** {
 1482              		.loc 1 1389 0
 1483              		.cfi_startproc
 1484              		@ args = 0, pretend = 0, frame = 0
 1485              		@ frame_needed = 0, uses_anonymous_args = 0
 1486              		@ link register save eliminated.
 1487              	.LVL91:
1390:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_INTERRUPT_REQ_REG = interruptMask;
 1488              		.loc 1 1390 0
 1489 0000 014B     		ldr	r3, .L117
 1490 0002 1860     		str	r0, [r3]
1391:Generated_Source\PSoC4/ADC_Timer.c **** }
 1491              		.loc 1 1391 0
 1492              		@ sp needed
 1493 0004 7047     		bx	lr
 1494              	.L118:
 1495 0006 C046     		.align	2
 1496              	.L117:
 1497 0008 30010540 		.word	1074069808
 1498              		.cfi_endproc
 1499              	.LFE38:
 1500              		.size	ADC_Timer_ClearInterrupt, .-ADC_Timer_ClearInterrupt
 1501              		.section	.text.ADC_Timer_SetInterrupt,"ax",%progbits
 1502              		.align	2
ARM GAS  C:\Temp\cc01nvIH.s 			page 52


 1503              		.global	ADC_Timer_SetInterrupt
 1504              		.code	16
 1505              		.thumb_func
 1506              		.type	ADC_Timer_SetInterrupt, %function
 1507              	ADC_Timer_SetInterrupt:
 1508              	.LFB39:
1392:Generated_Source\PSoC4/ADC_Timer.c **** 
1393:Generated_Source\PSoC4/ADC_Timer.c **** 
1394:Generated_Source\PSoC4/ADC_Timer.c **** /*******************************************************************************
1395:Generated_Source\PSoC4/ADC_Timer.c **** * Function Name: ADC_Timer_SetInterrupt
1396:Generated_Source\PSoC4/ADC_Timer.c **** ********************************************************************************
1397:Generated_Source\PSoC4/ADC_Timer.c **** *
1398:Generated_Source\PSoC4/ADC_Timer.c **** * Summary:
1399:Generated_Source\PSoC4/ADC_Timer.c **** *  Sets a software interrupt request.
1400:Generated_Source\PSoC4/ADC_Timer.c **** *
1401:Generated_Source\PSoC4/ADC_Timer.c **** * Parameters:
1402:Generated_Source\PSoC4/ADC_Timer.c **** *   interruptMask: Mask of interrupts to set
1403:Generated_Source\PSoC4/ADC_Timer.c **** *   Values:
1404:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_INTR_MASK_TC       - Terminal count mask
1405:Generated_Source\PSoC4/ADC_Timer.c **** *     - ADC_Timer_INTR_MASK_CC_MATCH - Compare count / capture mask
1406:Generated_Source\PSoC4/ADC_Timer.c **** *
1407:Generated_Source\PSoC4/ADC_Timer.c **** * Return:
1408:Generated_Source\PSoC4/ADC_Timer.c **** *  None
1409:Generated_Source\PSoC4/ADC_Timer.c **** *
1410:Generated_Source\PSoC4/ADC_Timer.c **** *******************************************************************************/
1411:Generated_Source\PSoC4/ADC_Timer.c **** void ADC_Timer_SetInterrupt(uint32 interruptMask)
1412:Generated_Source\PSoC4/ADC_Timer.c **** {
 1509              		.loc 1 1412 0
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 0
 1512              		@ frame_needed = 0, uses_anonymous_args = 0
 1513              		@ link register save eliminated.
 1514              	.LVL92:
1413:Generated_Source\PSoC4/ADC_Timer.c ****     ADC_Timer_INTERRUPT_SET_REG = interruptMask;
 1515              		.loc 1 1413 0
 1516 0000 014B     		ldr	r3, .L120
 1517 0002 1860     		str	r0, [r3]
1414:Generated_Source\PSoC4/ADC_Timer.c **** }
 1518              		.loc 1 1414 0
 1519              		@ sp needed
 1520 0004 7047     		bx	lr
 1521              	.L121:
 1522 0006 C046     		.align	2
 1523              	.L120:
 1524 0008 34010540 		.word	1074069812
 1525              		.cfi_endproc
 1526              	.LFE39:
 1527              		.size	ADC_Timer_SetInterrupt, .-ADC_Timer_SetInterrupt
 1528              		.global	ADC_Timer_initVar
 1529              		.bss
 1530              		.set	.LANCHOR0,. + 0
 1531              		.type	ADC_Timer_initVar, %object
 1532              		.size	ADC_Timer_initVar, 1
 1533              	ADC_Timer_initVar:
 1534 0000 00       		.space	1
 1535              		.text
 1536              	.Letext0:
ARM GAS  C:\Temp\cc01nvIH.s 			page 53


 1537              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1538              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 1539              		.section	.debug_info,"",%progbits
 1540              	.Ldebug_info0:
 1541 0000 DE080000 		.4byte	0x8de
 1542 0004 0400     		.2byte	0x4
 1543 0006 00000000 		.4byte	.Ldebug_abbrev0
 1544 000a 04       		.byte	0x4
 1545 000b 01       		.uleb128 0x1
 1546 000c BF000000 		.4byte	.LASF79
 1547 0010 0C       		.byte	0xc
 1548 0011 9C000000 		.4byte	.LASF80
 1549 0015 90040000 		.4byte	.LASF81
 1550 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1551 001d 00000000 		.4byte	0
 1552 0021 00000000 		.4byte	.Ldebug_line0
 1553 0025 02       		.uleb128 0x2
 1554 0026 01       		.byte	0x1
 1555 0027 06       		.byte	0x6
 1556 0028 97010000 		.4byte	.LASF0
 1557 002c 02       		.uleb128 0x2
 1558 002d 01       		.byte	0x1
 1559 002e 08       		.byte	0x8
 1560 002f 29040000 		.4byte	.LASF1
 1561 0033 02       		.uleb128 0x2
 1562 0034 02       		.byte	0x2
 1563 0035 05       		.byte	0x5
 1564 0036 48040000 		.4byte	.LASF2
 1565 003a 02       		.uleb128 0x2
 1566 003b 02       		.byte	0x2
 1567 003c 07       		.byte	0x7
 1568 003d C7020000 		.4byte	.LASF3
 1569 0041 02       		.uleb128 0x2
 1570 0042 04       		.byte	0x4
 1571 0043 05       		.byte	0x5
 1572 0044 D4010000 		.4byte	.LASF4
 1573 0048 02       		.uleb128 0x2
 1574 0049 04       		.byte	0x4
 1575 004a 07       		.byte	0x7
 1576 004b 7C020000 		.4byte	.LASF5
 1577 004f 02       		.uleb128 0x2
 1578 0050 08       		.byte	0x8
 1579 0051 05       		.byte	0x5
 1580 0052 89010000 		.4byte	.LASF6
 1581 0056 02       		.uleb128 0x2
 1582 0057 08       		.byte	0x8
 1583 0058 07       		.byte	0x7
 1584 0059 54010000 		.4byte	.LASF7
 1585 005d 03       		.uleb128 0x3
 1586 005e 04       		.byte	0x4
 1587 005f 05       		.byte	0x5
 1588 0060 696E7400 		.ascii	"int\000"
 1589 0064 02       		.uleb128 0x2
 1590 0065 04       		.byte	0x4
 1591 0066 07       		.byte	0x7
 1592 0067 67020000 		.4byte	.LASF8
 1593 006b 04       		.uleb128 0x4
ARM GAS  C:\Temp\cc01nvIH.s 			page 54


 1594 006c F5010000 		.4byte	.LASF9
 1595 0070 02       		.byte	0x2
 1596 0071 E401     		.2byte	0x1e4
 1597 0073 2C000000 		.4byte	0x2c
 1598 0077 04       		.uleb128 0x4
 1599 0078 1B020000 		.4byte	.LASF10
 1600 007c 02       		.byte	0x2
 1601 007d E601     		.2byte	0x1e6
 1602 007f 48000000 		.4byte	0x48
 1603 0083 02       		.uleb128 0x2
 1604 0084 04       		.byte	0x4
 1605 0085 04       		.byte	0x4
 1606 0086 E9030000 		.4byte	.LASF11
 1607 008a 02       		.uleb128 0x2
 1608 008b 08       		.byte	0x8
 1609 008c 04       		.byte	0x4
 1610 008d 14020000 		.4byte	.LASF12
 1611 0091 02       		.uleb128 0x2
 1612 0092 01       		.byte	0x1
 1613 0093 08       		.byte	0x8
 1614 0094 11050000 		.4byte	.LASF13
 1615 0098 04       		.uleb128 0x4
 1616 0099 3B030000 		.4byte	.LASF14
 1617 009d 02       		.byte	0x2
 1618 009e 9002     		.2byte	0x290
 1619 00a0 A4000000 		.4byte	0xa4
 1620 00a4 05       		.uleb128 0x5
 1621 00a5 77000000 		.4byte	0x77
 1622 00a9 02       		.uleb128 0x2
 1623 00aa 08       		.byte	0x8
 1624 00ab 04       		.byte	0x4
 1625 00ac 7B030000 		.4byte	.LASF15
 1626 00b0 02       		.uleb128 0x2
 1627 00b1 04       		.byte	0x4
 1628 00b2 07       		.byte	0x7
 1629 00b3 58030000 		.4byte	.LASF16
 1630 00b7 06       		.uleb128 0x6
 1631 00b8 00050000 		.4byte	.LASF17
 1632 00bc 01       		.byte	0x1
 1633 00bd B1       		.byte	0xb1
 1634 00be 00000000 		.4byte	.LFB1
 1635 00c2 1C000000 		.4byte	.LFE1-.LFB1
 1636 00c6 01       		.uleb128 0x1
 1637 00c7 9C       		.byte	0x9c
 1638 00c8 EE000000 		.4byte	0xee
 1639 00cc 07       		.uleb128 0x7
 1640 00cd AF050000 		.4byte	.LASF19
 1641 00d1 01       		.byte	0x1
 1642 00d2 B3       		.byte	0xb3
 1643 00d3 6B000000 		.4byte	0x6b
 1644 00d7 00000000 		.4byte	.LLST0
 1645 00db 08       		.uleb128 0x8
 1646 00dc 06000000 		.4byte	.LVL0
 1647 00e0 CB080000 		.4byte	0x8cb
 1648 00e4 08       		.uleb128 0x8
 1649 00e5 14000000 		.4byte	.LVL1
 1650 00e9 D6080000 		.4byte	0x8d6
ARM GAS  C:\Temp\cc01nvIH.s 			page 55


 1651 00ed 00       		.byte	0
 1652 00ee 09       		.uleb128 0x9
 1653 00ef 8D000000 		.4byte	.LASF18
 1654 00f3 01       		.byte	0x1
 1655 00f4 0001     		.2byte	0x100
 1656 00f6 00000000 		.4byte	.LFB3
 1657 00fa 1C000000 		.4byte	.LFE3-.LFB3
 1658 00fe 01       		.uleb128 0x1
 1659 00ff 9C       		.byte	0x9c
 1660 0100 27010000 		.4byte	0x127
 1661 0104 0A       		.uleb128 0xa
 1662 0105 AF050000 		.4byte	.LASF19
 1663 0109 01       		.byte	0x1
 1664 010a 0201     		.2byte	0x102
 1665 010c 6B000000 		.4byte	0x6b
 1666 0110 13000000 		.4byte	.LLST1
 1667 0114 08       		.uleb128 0x8
 1668 0115 06000000 		.4byte	.LVL2
 1669 0119 CB080000 		.4byte	0x8cb
 1670 011d 08       		.uleb128 0x8
 1671 011e 14000000 		.4byte	.LVL3
 1672 0122 D6080000 		.4byte	0x8d6
 1673 0126 00       		.byte	0
 1674 0127 09       		.uleb128 0x9
 1675 0128 D9040000 		.4byte	.LASF20
 1676 012c 01       		.byte	0x1
 1677 012d 2501     		.2byte	0x125
 1678 012f 00000000 		.4byte	.LFB4
 1679 0133 28000000 		.4byte	.LFE4-.LFB4
 1680 0137 01       		.uleb128 0x1
 1681 0138 9C       		.byte	0x9c
 1682 0139 70010000 		.4byte	0x170
 1683 013d 0B       		.uleb128 0xb
 1684 013e 16050000 		.4byte	.LASF22
 1685 0142 01       		.byte	0x1
 1686 0143 2501     		.2byte	0x125
 1687 0145 77000000 		.4byte	0x77
 1688 0149 26000000 		.4byte	.LLST2
 1689 014d 0A       		.uleb128 0xa
 1690 014e AF050000 		.4byte	.LASF19
 1691 0152 01       		.byte	0x1
 1692 0153 2701     		.2byte	0x127
 1693 0155 6B000000 		.4byte	0x6b
 1694 0159 52000000 		.4byte	.LLST3
 1695 015d 08       		.uleb128 0x8
 1696 015e 08000000 		.4byte	.LVL5
 1697 0162 CB080000 		.4byte	0x8cb
 1698 0166 08       		.uleb128 0x8
 1699 0167 1C000000 		.4byte	.LVL7
 1700 016b D6080000 		.4byte	0x8d6
 1701 016f 00       		.byte	0
 1702 0170 09       		.uleb128 0x9
 1703 0171 27030000 		.4byte	.LASF21
 1704 0175 01       		.byte	0x1
 1705 0176 4601     		.2byte	0x146
 1706 0178 00000000 		.4byte	.LFB5
 1707 017c 28000000 		.4byte	.LFE5-.LFB5
ARM GAS  C:\Temp\cc01nvIH.s 			page 56


 1708 0180 01       		.uleb128 0x1
 1709 0181 9C       		.byte	0x9c
 1710 0182 B9010000 		.4byte	0x1b9
 1711 0186 0B       		.uleb128 0xb
 1712 0187 6B010000 		.4byte	.LASF23
 1713 018b 01       		.byte	0x1
 1714 018c 4601     		.2byte	0x146
 1715 018e 77000000 		.4byte	0x77
 1716 0192 65000000 		.4byte	.LLST4
 1717 0196 0A       		.uleb128 0xa
 1718 0197 AF050000 		.4byte	.LASF19
 1719 019b 01       		.byte	0x1
 1720 019c 4801     		.2byte	0x148
 1721 019e 6B000000 		.4byte	0x6b
 1722 01a2 91000000 		.4byte	.LLST5
 1723 01a6 08       		.uleb128 0x8
 1724 01a7 08000000 		.4byte	.LVL9
 1725 01ab CB080000 		.4byte	0x8cb
 1726 01af 08       		.uleb128 0x8
 1727 01b0 1C000000 		.4byte	.LVL11
 1728 01b4 D6080000 		.4byte	0x8d6
 1729 01b8 00       		.byte	0
 1730 01b9 09       		.uleb128 0x9
 1731 01ba 72010000 		.4byte	.LASF24
 1732 01be 01       		.byte	0x1
 1733 01bf 6B01     		.2byte	0x16b
 1734 01c1 00000000 		.4byte	.LFB6
 1735 01c5 28000000 		.4byte	.LFE6-.LFB6
 1736 01c9 01       		.uleb128 0x1
 1737 01ca 9C       		.byte	0x9c
 1738 01cb 02020000 		.4byte	0x202
 1739 01cf 0B       		.uleb128 0xb
 1740 01d0 EF030000 		.4byte	.LASF25
 1741 01d4 01       		.byte	0x1
 1742 01d5 6B01     		.2byte	0x16b
 1743 01d7 77000000 		.4byte	0x77
 1744 01db A4000000 		.4byte	.LLST6
 1745 01df 0A       		.uleb128 0xa
 1746 01e0 AF050000 		.4byte	.LASF19
 1747 01e4 01       		.byte	0x1
 1748 01e5 6D01     		.2byte	0x16d
 1749 01e7 6B000000 		.4byte	0x6b
 1750 01eb D0000000 		.4byte	.LLST7
 1751 01ef 08       		.uleb128 0x8
 1752 01f0 08000000 		.4byte	.LVL13
 1753 01f4 CB080000 		.4byte	0x8cb
 1754 01f8 08       		.uleb128 0x8
 1755 01f9 1C000000 		.4byte	.LVL15
 1756 01fd D6080000 		.4byte	0x8d6
 1757 0201 00       		.byte	0
 1758 0202 09       		.uleb128 0x9
 1759 0203 36050000 		.4byte	.LASF26
 1760 0207 01       		.byte	0x1
 1761 0208 8B01     		.2byte	0x18b
 1762 020a 00000000 		.4byte	.LFB7
 1763 020e 30000000 		.4byte	.LFE7-.LFB7
 1764 0212 01       		.uleb128 0x1
ARM GAS  C:\Temp\cc01nvIH.s 			page 57


 1765 0213 9C       		.byte	0x9c
 1766 0214 4B020000 		.4byte	0x24b
 1767 0218 0B       		.uleb128 0xb
 1768 0219 F3020000 		.4byte	.LASF27
 1769 021d 01       		.byte	0x1
 1770 021e 8B01     		.2byte	0x18b
 1771 0220 77000000 		.4byte	0x77
 1772 0224 E3000000 		.4byte	.LLST8
 1773 0228 0A       		.uleb128 0xa
 1774 0229 AF050000 		.4byte	.LASF19
 1775 022d 01       		.byte	0x1
 1776 022e 8D01     		.2byte	0x18d
 1777 0230 6B000000 		.4byte	0x6b
 1778 0234 0F010000 		.4byte	.LLST9
 1779 0238 08       		.uleb128 0x8
 1780 0239 08000000 		.4byte	.LVL17
 1781 023d CB080000 		.4byte	0x8cb
 1782 0241 08       		.uleb128 0x8
 1783 0242 24000000 		.4byte	.LVL18
 1784 0246 D6080000 		.4byte	0x8d6
 1785 024a 00       		.byte	0
 1786 024b 09       		.uleb128 0x9
 1787 024c D6050000 		.4byte	.LASF28
 1788 0250 01       		.byte	0x1
 1789 0251 C101     		.2byte	0x1c1
 1790 0253 00000000 		.4byte	.LFB8
 1791 0257 10000000 		.4byte	.LFE8-.LFB8
 1792 025b 01       		.uleb128 0x1
 1793 025c 9C       		.byte	0x9c
 1794 025d 72020000 		.4byte	0x272
 1795 0261 0B       		.uleb128 0xb
 1796 0262 8E020000 		.4byte	.LASF29
 1797 0266 01       		.byte	0x1
 1798 0267 C101     		.2byte	0x1c1
 1799 0269 77000000 		.4byte	0x77
 1800 026d 22010000 		.4byte	.LLST10
 1801 0271 00       		.byte	0
 1802 0272 09       		.uleb128 0x9
 1803 0273 DA020000 		.4byte	.LASF30
 1804 0277 01       		.byte	0x1
 1805 0278 E501     		.2byte	0x1e5
 1806 027a 00000000 		.4byte	.LFB9
 1807 027e 28000000 		.4byte	.LFE9-.LFB9
 1808 0282 01       		.uleb128 0x1
 1809 0283 9C       		.byte	0x9c
 1810 0284 BB020000 		.4byte	0x2bb
 1811 0288 0B       		.uleb128 0xb
 1812 0289 EB050000 		.4byte	.LASF31
 1813 028d 01       		.byte	0x1
 1814 028e E501     		.2byte	0x1e5
 1815 0290 77000000 		.4byte	0x77
 1816 0294 43010000 		.4byte	.LLST11
 1817 0298 0A       		.uleb128 0xa
 1818 0299 AF050000 		.4byte	.LASF19
 1819 029d 01       		.byte	0x1
 1820 029e E701     		.2byte	0x1e7
 1821 02a0 6B000000 		.4byte	0x6b
ARM GAS  C:\Temp\cc01nvIH.s 			page 58


 1822 02a4 6F010000 		.4byte	.LLST12
 1823 02a8 08       		.uleb128 0x8
 1824 02a9 08000000 		.4byte	.LVL23
 1825 02ad CB080000 		.4byte	0x8cb
 1826 02b1 08       		.uleb128 0x8
 1827 02b2 22000000 		.4byte	.LVL25
 1828 02b6 D6080000 		.4byte	0x8d6
 1829 02ba 00       		.byte	0
 1830 02bb 09       		.uleb128 0x9
 1831 02bc 1B050000 		.4byte	.LASF32
 1832 02c0 01       		.byte	0x1
 1833 02c1 0702     		.2byte	0x207
 1834 02c3 00000000 		.4byte	.LFB10
 1835 02c7 28000000 		.4byte	.LFE10-.LFB10
 1836 02cb 01       		.uleb128 0x1
 1837 02cc 9C       		.byte	0x9c
 1838 02cd 04030000 		.4byte	0x304
 1839 02d1 0B       		.uleb128 0xb
 1840 02d2 37040000 		.4byte	.LASF33
 1841 02d6 01       		.byte	0x1
 1842 02d7 0702     		.2byte	0x207
 1843 02d9 77000000 		.4byte	0x77
 1844 02dd 82010000 		.4byte	.LLST13
 1845 02e1 0A       		.uleb128 0xa
 1846 02e2 AF050000 		.4byte	.LASF19
 1847 02e6 01       		.byte	0x1
 1848 02e7 0902     		.2byte	0x209
 1849 02e9 6B000000 		.4byte	0x6b
 1850 02ed AE010000 		.4byte	.LLST14
 1851 02f1 08       		.uleb128 0x8
 1852 02f2 08000000 		.4byte	.LVL27
 1853 02f6 CB080000 		.4byte	0x8cb
 1854 02fa 08       		.uleb128 0x8
 1855 02fb 22000000 		.4byte	.LVL29
 1856 02ff D6080000 		.4byte	0x8d6
 1857 0303 00       		.byte	0
 1858 0304 09       		.uleb128 0x9
 1859 0305 77040000 		.4byte	.LASF34
 1860 0309 01       		.byte	0x1
 1861 030a 2802     		.2byte	0x228
 1862 030c 00000000 		.4byte	.LFB11
 1863 0310 2C000000 		.4byte	.LFE11-.LFB11
 1864 0314 01       		.uleb128 0x1
 1865 0315 9C       		.byte	0x9c
 1866 0316 4D030000 		.4byte	0x34d
 1867 031a 0B       		.uleb128 0xb
 1868 031b 45020000 		.4byte	.LASF35
 1869 031f 01       		.byte	0x1
 1870 0320 2802     		.2byte	0x228
 1871 0322 77000000 		.4byte	0x77
 1872 0326 C1010000 		.4byte	.LLST15
 1873 032a 0A       		.uleb128 0xa
 1874 032b AF050000 		.4byte	.LASF19
 1875 032f 01       		.byte	0x1
 1876 0330 2A02     		.2byte	0x22a
 1877 0332 6B000000 		.4byte	0x6b
 1878 0336 ED010000 		.4byte	.LLST16
ARM GAS  C:\Temp\cc01nvIH.s 			page 59


 1879 033a 08       		.uleb128 0x8
 1880 033b 08000000 		.4byte	.LVL31
 1881 033f CB080000 		.4byte	0x8cb
 1882 0343 08       		.uleb128 0x8
 1883 0344 20000000 		.4byte	.LVL33
 1884 0348 D6080000 		.4byte	0x8d6
 1885 034c 00       		.byte	0
 1886 034d 09       		.uleb128 0x9
 1887 034e 28060000 		.4byte	.LASF36
 1888 0352 01       		.byte	0x1
 1889 0353 4902     		.2byte	0x249
 1890 0355 00000000 		.4byte	.LFB12
 1891 0359 28000000 		.4byte	.LFE12-.LFB12
 1892 035d 01       		.uleb128 0x1
 1893 035e 9C       		.byte	0x9c
 1894 035f 96030000 		.4byte	0x396
 1895 0363 0B       		.uleb128 0xb
 1896 0364 2E020000 		.4byte	.LASF37
 1897 0368 01       		.byte	0x1
 1898 0369 4902     		.2byte	0x249
 1899 036b 77000000 		.4byte	0x77
 1900 036f 00020000 		.4byte	.LLST17
 1901 0373 0A       		.uleb128 0xa
 1902 0374 AF050000 		.4byte	.LASF19
 1903 0378 01       		.byte	0x1
 1904 0379 4B02     		.2byte	0x24b
 1905 037b 6B000000 		.4byte	0x6b
 1906 037f 2C020000 		.4byte	.LLST18
 1907 0383 08       		.uleb128 0x8
 1908 0384 08000000 		.4byte	.LVL35
 1909 0388 CB080000 		.4byte	0x8cb
 1910 038c 08       		.uleb128 0x8
 1911 038d 1C000000 		.4byte	.LVL37
 1912 0391 D6080000 		.4byte	0x8d6
 1913 0395 00       		.byte	0
 1914 0396 09       		.uleb128 0x9
 1915 0397 7B050000 		.4byte	.LASF38
 1916 039b 01       		.byte	0x1
 1917 039c 6702     		.2byte	0x267
 1918 039e 00000000 		.4byte	.LFB13
 1919 03a2 10000000 		.4byte	.LFE13-.LFB13
 1920 03a6 01       		.uleb128 0x1
 1921 03a7 9C       		.byte	0x9c
 1922 03a8 BD030000 		.4byte	0x3bd
 1923 03ac 0B       		.uleb128 0xb
 1924 03ad 00000000 		.4byte	.LASF39
 1925 03b1 01       		.byte	0x1
 1926 03b2 6702     		.2byte	0x267
 1927 03b4 77000000 		.4byte	0x77
 1928 03b8 3F020000 		.4byte	.LLST19
 1929 03bc 00       		.byte	0
 1930 03bd 0C       		.uleb128 0xc
 1931 03be D3030000 		.4byte	.LASF44
 1932 03c2 01       		.byte	0x1
 1933 03c3 7B02     		.2byte	0x27b
 1934 03c5 77000000 		.4byte	0x77
 1935 03c9 00000000 		.4byte	.LFB14
ARM GAS  C:\Temp\cc01nvIH.s 			page 60


 1936 03cd 10000000 		.4byte	.LFE14-.LFB14
 1937 03d1 01       		.uleb128 0x1
 1938 03d2 9C       		.byte	0x9c
 1939 03d3 09       		.uleb128 0x9
 1940 03d4 74000000 		.4byte	.LASF40
 1941 03d8 01       		.byte	0x1
 1942 03d9 9802     		.2byte	0x298
 1943 03db 00000000 		.4byte	.LFB15
 1944 03df 28000000 		.4byte	.LFE15-.LFB15
 1945 03e3 01       		.uleb128 0x1
 1946 03e4 9C       		.byte	0x9c
 1947 03e5 1C040000 		.4byte	0x41c
 1948 03e9 0B       		.uleb128 0xb
 1949 03ea 4B050000 		.4byte	.LASF41
 1950 03ee 01       		.byte	0x1
 1951 03ef 9802     		.2byte	0x298
 1952 03f1 77000000 		.4byte	0x77
 1953 03f5 60020000 		.4byte	.LLST20
 1954 03f9 0A       		.uleb128 0xa
 1955 03fa AF050000 		.4byte	.LASF19
 1956 03fe 01       		.byte	0x1
 1957 03ff 9A02     		.2byte	0x29a
 1958 0401 6B000000 		.4byte	0x6b
 1959 0405 8C020000 		.4byte	.LLST21
 1960 0409 08       		.uleb128 0x8
 1961 040a 08000000 		.4byte	.LVL41
 1962 040e CB080000 		.4byte	0x8cb
 1963 0412 08       		.uleb128 0x8
 1964 0413 1C000000 		.4byte	.LVL43
 1965 0417 D6080000 		.4byte	0x8d6
 1966 041b 00       		.byte	0
 1967 041c 09       		.uleb128 0x9
 1968 041d C0050000 		.4byte	.LASF42
 1969 0421 01       		.byte	0x1
 1970 0422 B502     		.2byte	0x2b5
 1971 0424 00000000 		.4byte	.LFB16
 1972 0428 10000000 		.4byte	.LFE16-.LFB16
 1973 042c 01       		.uleb128 0x1
 1974 042d 9C       		.byte	0x9c
 1975 042e 43040000 		.4byte	0x443
 1976 0432 0B       		.uleb128 0xb
 1977 0433 4D010000 		.4byte	.LASF43
 1978 0437 01       		.byte	0x1
 1979 0438 B502     		.2byte	0x2b5
 1980 043a 77000000 		.4byte	0x77
 1981 043e 9F020000 		.4byte	.LLST22
 1982 0442 00       		.byte	0
 1983 0443 0C       		.uleb128 0xc
 1984 0444 EB040000 		.4byte	.LASF45
 1985 0448 01       		.byte	0x1
 1986 0449 C902     		.2byte	0x2c9
 1987 044b 77000000 		.4byte	0x77
 1988 044f 00000000 		.4byte	.LFB17
 1989 0453 10000000 		.4byte	.LFE17-.LFB17
 1990 0457 01       		.uleb128 0x1
 1991 0458 9C       		.byte	0x9c
 1992 0459 09       		.uleb128 0x9
ARM GAS  C:\Temp\cc01nvIH.s 			page 61


 1993 045a 4E020000 		.4byte	.LASF46
 1994 045e 01       		.byte	0x1
 1995 045f E302     		.2byte	0x2e3
 1996 0461 00000000 		.4byte	.LFB18
 1997 0465 24000000 		.4byte	.LFE18-.LFB18
 1998 0469 01       		.uleb128 0x1
 1999 046a 9C       		.byte	0x9c
 2000 046b A2040000 		.4byte	0x4a2
 2001 046f 0B       		.uleb128 0xb
 2002 0470 FA050000 		.4byte	.LASF47
 2003 0474 01       		.byte	0x1
 2004 0475 E302     		.2byte	0x2e3
 2005 0477 77000000 		.4byte	0x77
 2006 047b C0020000 		.4byte	.LLST23
 2007 047f 0A       		.uleb128 0xa
 2008 0480 AF050000 		.4byte	.LASF19
 2009 0484 01       		.byte	0x1
 2010 0485 E502     		.2byte	0x2e5
 2011 0487 6B000000 		.4byte	0x6b
 2012 048b EC020000 		.4byte	.LLST24
 2013 048f 08       		.uleb128 0x8
 2014 0490 08000000 		.4byte	.LVL47
 2015 0494 CB080000 		.4byte	0x8cb
 2016 0498 08       		.uleb128 0x8
 2017 0499 1E000000 		.4byte	.LVL49
 2018 049d D6080000 		.4byte	0x8d6
 2019 04a1 00       		.byte	0
 2020 04a2 09       		.uleb128 0x9
 2021 04a3 57050000 		.4byte	.LASF48
 2022 04a7 01       		.byte	0x1
 2023 04a8 FE02     		.2byte	0x2fe
 2024 04aa 00000000 		.4byte	.LFB19
 2025 04ae 10000000 		.4byte	.LFE19-.LFB19
 2026 04b2 01       		.uleb128 0x1
 2027 04b3 9C       		.byte	0x9c
 2028 04b4 C9040000 		.4byte	0x4c9
 2029 04b8 0B       		.uleb128 0xb
 2030 04b9 3F060000 		.4byte	.LASF49
 2031 04bd 01       		.byte	0x1
 2032 04be FE02     		.2byte	0x2fe
 2033 04c0 77000000 		.4byte	0x77
 2034 04c4 FF020000 		.4byte	.LLST25
 2035 04c8 00       		.byte	0
 2036 04c9 0C       		.uleb128 0xc
 2037 04ca A3010000 		.4byte	.LASF50
 2038 04ce 01       		.byte	0x1
 2039 04cf 1203     		.2byte	0x312
 2040 04d1 77000000 		.4byte	0x77
 2041 04d5 00000000 		.4byte	.LFB20
 2042 04d9 10000000 		.4byte	.LFE20-.LFB20
 2043 04dd 01       		.uleb128 0x1
 2044 04de 9C       		.byte	0x9c
 2045 04df 09       		.uleb128 0x9
 2046 04e0 46000000 		.4byte	.LASF51
 2047 04e4 01       		.byte	0x1
 2048 04e5 2C03     		.2byte	0x32c
 2049 04e7 00000000 		.4byte	.LFB21
ARM GAS  C:\Temp\cc01nvIH.s 			page 62


 2050 04eb 28000000 		.4byte	.LFE21-.LFB21
 2051 04ef 01       		.uleb128 0x1
 2052 04f0 9C       		.byte	0x9c
 2053 04f1 28050000 		.4byte	0x528
 2054 04f5 0B       		.uleb128 0xb
 2055 04f6 FA050000 		.4byte	.LASF47
 2056 04fa 01       		.byte	0x1
 2057 04fb 2C03     		.2byte	0x32c
 2058 04fd 77000000 		.4byte	0x77
 2059 0501 20030000 		.4byte	.LLST26
 2060 0505 0A       		.uleb128 0xa
 2061 0506 AF050000 		.4byte	.LASF19
 2062 050a 01       		.byte	0x1
 2063 050b 2E03     		.2byte	0x32e
 2064 050d 6B000000 		.4byte	0x6b
 2065 0511 4C030000 		.4byte	.LLST27
 2066 0515 08       		.uleb128 0x8
 2067 0516 08000000 		.4byte	.LVL53
 2068 051a CB080000 		.4byte	0x8cb
 2069 051e 08       		.uleb128 0x8
 2070 051f 22000000 		.4byte	.LVL55
 2071 0523 D6080000 		.4byte	0x8d6
 2072 0527 00       		.byte	0
 2073 0528 09       		.uleb128 0x9
 2074 0529 60040000 		.4byte	.LASF52
 2075 052d 01       		.byte	0x1
 2076 052e 5103     		.2byte	0x351
 2077 0530 00000000 		.4byte	.LFB22
 2078 0534 10000000 		.4byte	.LFE22-.LFB22
 2079 0538 01       		.uleb128 0x1
 2080 0539 9C       		.byte	0x9c
 2081 053a 4F050000 		.4byte	0x54f
 2082 053e 0B       		.uleb128 0xb
 2083 053f 9D030000 		.4byte	.LASF53
 2084 0543 01       		.byte	0x1
 2085 0544 5103     		.2byte	0x351
 2086 0546 77000000 		.4byte	0x77
 2087 054a 5F030000 		.4byte	.LLST28
 2088 054e 00       		.byte	0
 2089 054f 0C       		.uleb128 0xc
 2090 0550 01030000 		.4byte	.LASF54
 2091 0554 01       		.byte	0x1
 2092 0555 8403     		.2byte	0x384
 2093 0557 77000000 		.4byte	0x77
 2094 055b 00000000 		.4byte	.LFB23
 2095 055f 10000000 		.4byte	.LFE23-.LFB23
 2096 0563 01       		.uleb128 0x1
 2097 0564 9C       		.byte	0x9c
 2098 0565 09       		.uleb128 0x9
 2099 0566 61030000 		.4byte	.LASF55
 2100 056a 01       		.byte	0x1
 2101 056b BA03     		.2byte	0x3ba
 2102 056d 00000000 		.4byte	.LFB24
 2103 0571 10000000 		.4byte	.LFE24-.LFB24
 2104 0575 01       		.uleb128 0x1
 2105 0576 9C       		.byte	0x9c
 2106 0577 8C050000 		.4byte	0x58c
ARM GAS  C:\Temp\cc01nvIH.s 			page 63


 2107 057b 0B       		.uleb128 0xb
 2108 057c 70050000 		.4byte	.LASF56
 2109 0580 01       		.byte	0x1
 2110 0581 BA03     		.2byte	0x3ba
 2111 0583 77000000 		.4byte	0x77
 2112 0587 80030000 		.4byte	.LLST29
 2113 058b 00       		.byte	0
 2114 058c 0C       		.uleb128 0xc
 2115 058d 10040000 		.4byte	.LASF57
 2116 0591 01       		.byte	0x1
 2117 0592 E803     		.2byte	0x3e8
 2118 0594 77000000 		.4byte	0x77
 2119 0598 00000000 		.4byte	.LFB25
 2120 059c 10000000 		.4byte	.LFE25-.LFB25
 2121 05a0 01       		.uleb128 0x1
 2122 05a1 9C       		.byte	0x9c
 2123 05a2 0C       		.uleb128 0xc
 2124 05a3 5E000000 		.4byte	.LASF58
 2125 05a7 01       		.byte	0x1
 2126 05a8 1604     		.2byte	0x416
 2127 05aa 77000000 		.4byte	0x77
 2128 05ae 00000000 		.4byte	.LFB26
 2129 05b2 10000000 		.4byte	.LFE26-.LFB26
 2130 05b6 01       		.uleb128 0x1
 2131 05b7 9C       		.byte	0x9c
 2132 05b8 0C       		.uleb128 0xc
 2133 05b9 FB010000 		.4byte	.LASF59
 2134 05bd 01       		.byte	0x1
 2135 05be 2B04     		.2byte	0x42b
 2136 05c0 77000000 		.4byte	0x77
 2137 05c4 00000000 		.4byte	.LFB27
 2138 05c8 10000000 		.4byte	.LFE27-.LFB27
 2139 05cc 01       		.uleb128 0x1
 2140 05cd 9C       		.byte	0x9c
 2141 05ce 09       		.uleb128 0x9
 2142 05cf BB010000 		.4byte	.LASF60
 2143 05d3 01       		.byte	0x1
 2144 05d4 4604     		.2byte	0x446
 2145 05d6 00000000 		.4byte	.LFB28
 2146 05da 24000000 		.4byte	.LFE28-.LFB28
 2147 05de 01       		.uleb128 0x1
 2148 05df 9C       		.byte	0x9c
 2149 05e0 17060000 		.4byte	0x617
 2150 05e4 0B       		.uleb128 0xb
 2151 05e5 22020000 		.4byte	.LASF61
 2152 05e9 01       		.byte	0x1
 2153 05ea 4604     		.2byte	0x446
 2154 05ec 77000000 		.4byte	0x77
 2155 05f0 A1030000 		.4byte	.LLST30
 2156 05f4 0A       		.uleb128 0xa
 2157 05f5 AF050000 		.4byte	.LASF19
 2158 05f9 01       		.byte	0x1
 2159 05fa 4804     		.2byte	0x448
 2160 05fc 6B000000 		.4byte	0x6b
 2161 0600 CD030000 		.4byte	.LLST31
 2162 0604 08       		.uleb128 0x8
 2163 0605 08000000 		.4byte	.LVL61
ARM GAS  C:\Temp\cc01nvIH.s 			page 64


 2164 0609 CB080000 		.4byte	0x8cb
 2165 060d 08       		.uleb128 0x8
 2166 060e 1C000000 		.4byte	.LVL63
 2167 0612 D6080000 		.4byte	0x8d6
 2168 0616 00       		.byte	0
 2169 0617 09       		.uleb128 0x9
 2170 0618 DD010000 		.4byte	.LASF62
 2171 061c 01       		.byte	0x1
 2172 061d 6704     		.2byte	0x467
 2173 061f 00000000 		.4byte	.LFB29
 2174 0623 24000000 		.4byte	.LFE29-.LFB29
 2175 0627 01       		.uleb128 0x1
 2176 0628 9C       		.byte	0x9c
 2177 0629 60060000 		.4byte	0x660
 2178 062d 0B       		.uleb128 0xb
 2179 062e 22020000 		.4byte	.LASF61
 2180 0632 01       		.byte	0x1
 2181 0633 6704     		.2byte	0x467
 2182 0635 77000000 		.4byte	0x77
 2183 0639 E0030000 		.4byte	.LLST32
 2184 063d 0A       		.uleb128 0xa
 2185 063e AF050000 		.4byte	.LASF19
 2186 0642 01       		.byte	0x1
 2187 0643 6904     		.2byte	0x469
 2188 0645 6B000000 		.4byte	0x6b
 2189 0649 0C040000 		.4byte	.LLST33
 2190 064d 08       		.uleb128 0x8
 2191 064e 08000000 		.4byte	.LVL65
 2192 0652 CB080000 		.4byte	0x8cb
 2193 0656 08       		.uleb128 0x8
 2194 0657 1E000000 		.4byte	.LVL67
 2195 065b D6080000 		.4byte	0x8d6
 2196 065f 00       		.byte	0
 2197 0660 09       		.uleb128 0x9
 2198 0661 49060000 		.4byte	.LASF63
 2199 0665 01       		.byte	0x1
 2200 0666 8804     		.2byte	0x488
 2201 0668 00000000 		.4byte	.LFB30
 2202 066c 28000000 		.4byte	.LFE30-.LFB30
 2203 0670 01       		.uleb128 0x1
 2204 0671 9C       		.byte	0x9c
 2205 0672 A9060000 		.4byte	0x6a9
 2206 0676 0B       		.uleb128 0xb
 2207 0677 22020000 		.4byte	.LASF61
 2208 067b 01       		.byte	0x1
 2209 067c 8804     		.2byte	0x488
 2210 067e 77000000 		.4byte	0x77
 2211 0682 1F040000 		.4byte	.LLST34
 2212 0686 0A       		.uleb128 0xa
 2213 0687 AF050000 		.4byte	.LASF19
 2214 068b 01       		.byte	0x1
 2215 068c 8A04     		.2byte	0x48a
 2216 068e 6B000000 		.4byte	0x6b
 2217 0692 4B040000 		.4byte	.LLST35
 2218 0696 08       		.uleb128 0x8
 2219 0697 08000000 		.4byte	.LVL69
 2220 069b CB080000 		.4byte	0x8cb
ARM GAS  C:\Temp\cc01nvIH.s 			page 65


 2221 069f 08       		.uleb128 0x8
 2222 06a0 1E000000 		.4byte	.LVL71
 2223 06a4 D6080000 		.4byte	0x8d6
 2224 06a8 00       		.byte	0
 2225 06a9 09       		.uleb128 0x9
 2226 06aa 87030000 		.4byte	.LASF64
 2227 06ae 01       		.byte	0x1
 2228 06af A804     		.2byte	0x4a8
 2229 06b1 00000000 		.4byte	.LFB31
 2230 06b5 24000000 		.4byte	.LFE31-.LFB31
 2231 06b9 01       		.uleb128 0x1
 2232 06ba 9C       		.byte	0x9c
 2233 06bb F2060000 		.4byte	0x6f2
 2234 06bf 0B       		.uleb128 0xb
 2235 06c0 22020000 		.4byte	.LASF61
 2236 06c4 01       		.byte	0x1
 2237 06c5 A804     		.2byte	0x4a8
 2238 06c7 77000000 		.4byte	0x77
 2239 06cb 5E040000 		.4byte	.LLST36
 2240 06cf 0A       		.uleb128 0xa
 2241 06d0 AF050000 		.4byte	.LASF19
 2242 06d4 01       		.byte	0x1
 2243 06d5 AA04     		.2byte	0x4aa
 2244 06d7 6B000000 		.4byte	0x6b
 2245 06db 8A040000 		.4byte	.LLST37
 2246 06df 08       		.uleb128 0x8
 2247 06e0 08000000 		.4byte	.LVL73
 2248 06e4 CB080000 		.4byte	0x8cb
 2249 06e8 08       		.uleb128 0x8
 2250 06e9 1E000000 		.4byte	.LVL75
 2251 06ed D6080000 		.4byte	0x8d6
 2252 06f1 00       		.byte	0
 2253 06f2 09       		.uleb128 0x9
 2254 06f3 F9030000 		.4byte	.LASF65
 2255 06f7 01       		.byte	0x1
 2256 06f8 C904     		.2byte	0x4c9
 2257 06fa 00000000 		.4byte	.LFB32
 2258 06fe 24000000 		.4byte	.LFE32-.LFB32
 2259 0702 01       		.uleb128 0x1
 2260 0703 9C       		.byte	0x9c
 2261 0704 3B070000 		.4byte	0x73b
 2262 0708 0B       		.uleb128 0xb
 2263 0709 22020000 		.4byte	.LASF61
 2264 070d 01       		.byte	0x1
 2265 070e C904     		.2byte	0x4c9
 2266 0710 77000000 		.4byte	0x77
 2267 0714 9D040000 		.4byte	.LLST38
 2268 0718 0A       		.uleb128 0xa
 2269 0719 AF050000 		.4byte	.LASF19
 2270 071d 01       		.byte	0x1
 2271 071e CB04     		.2byte	0x4cb
 2272 0720 6B000000 		.4byte	0x6b
 2273 0724 C9040000 		.4byte	.LLST39
 2274 0728 08       		.uleb128 0x8
 2275 0729 08000000 		.4byte	.LVL77
 2276 072d CB080000 		.4byte	0x8cb
 2277 0731 08       		.uleb128 0x8
ARM GAS  C:\Temp\cc01nvIH.s 			page 66


 2278 0732 1E000000 		.4byte	.LVL79
 2279 0736 D6080000 		.4byte	0x8d6
 2280 073a 00       		.byte	0
 2281 073b 09       		.uleb128 0x9
 2282 073c 97020000 		.4byte	.LASF66
 2283 0740 01       		.byte	0x1
 2284 0741 F104     		.2byte	0x4f1
 2285 0743 00000000 		.4byte	.LFB33
 2286 0747 1C000000 		.4byte	.LFE33-.LFB33
 2287 074b 01       		.uleb128 0x1
 2288 074c 9C       		.byte	0x9c
 2289 074d 94070000 		.4byte	0x794
 2290 0751 0B       		.uleb128 0xb
 2291 0752 2E020000 		.4byte	.LASF37
 2292 0756 01       		.byte	0x1
 2293 0757 F104     		.2byte	0x4f1
 2294 0759 77000000 		.4byte	0x77
 2295 075d DC040000 		.4byte	.LLST40
 2296 0761 0B       		.uleb128 0xb
 2297 0762 74020000 		.4byte	.LASF67
 2298 0766 01       		.byte	0x1
 2299 0767 F104     		.2byte	0x4f1
 2300 0769 77000000 		.4byte	0x77
 2301 076d 08050000 		.4byte	.LLST41
 2302 0771 0A       		.uleb128 0xa
 2303 0772 AF050000 		.4byte	.LASF19
 2304 0776 01       		.byte	0x1
 2305 0777 F304     		.2byte	0x4f3
 2306 0779 6B000000 		.4byte	0x6b
 2307 077d 34050000 		.4byte	.LLST42
 2308 0781 08       		.uleb128 0x8
 2309 0782 0A000000 		.4byte	.LVL81
 2310 0786 CB080000 		.4byte	0x8cb
 2311 078a 08       		.uleb128 0x8
 2312 078b 14000000 		.4byte	.LVL83
 2313 078f D6080000 		.4byte	0x8d6
 2314 0793 00       		.byte	0
 2315 0794 0C       		.uleb128 0xc
 2316 0795 BE030000 		.4byte	.LASF68
 2317 0799 01       		.byte	0x1
 2318 079a 0E05     		.2byte	0x50e
 2319 079c 77000000 		.4byte	0x77
 2320 07a0 00000000 		.4byte	.LFB34
 2321 07a4 14000000 		.4byte	.LFE34-.LFB34
 2322 07a8 01       		.uleb128 0x1
 2323 07a9 9C       		.byte	0x9c
 2324 07aa 09       		.uleb128 0x9
 2325 07ab 06000000 		.4byte	.LASF69
 2326 07af 01       		.byte	0x1
 2327 07b0 2705     		.2byte	0x527
 2328 07b2 00000000 		.4byte	.LFB35
 2329 07b6 0C000000 		.4byte	.LFE35-.LFB35
 2330 07ba 01       		.uleb128 0x1
 2331 07bb 9C       		.byte	0x9c
 2332 07bc CF070000 		.4byte	0x7cf
 2333 07c0 0D       		.uleb128 0xd
 2334 07c1 52040000 		.4byte	.LASF70
ARM GAS  C:\Temp\cc01nvIH.s 			page 67


 2335 07c5 01       		.byte	0x1
 2336 07c6 2705     		.2byte	0x527
 2337 07c8 77000000 		.4byte	0x77
 2338 07cc 01       		.uleb128 0x1
 2339 07cd 50       		.byte	0x50
 2340 07ce 00       		.byte	0
 2341 07cf 06       		.uleb128 0x6
 2342 07d0 37000000 		.4byte	.LASF71
 2343 07d4 01       		.byte	0x1
 2344 07d5 26       		.byte	0x26
 2345 07d6 00000000 		.4byte	.LFB0
 2346 07da 30000000 		.4byte	.LFE0-.LFB0
 2347 07de 01       		.uleb128 0x1
 2348 07df 9C       		.byte	0x9c
 2349 07e0 1C080000 		.4byte	0x81c
 2350 07e4 0E       		.uleb128 0xe
 2351 07e5 16000000 		.4byte	.LVL86
 2352 07e9 AA070000 		.4byte	0x7aa
 2353 07ed F7070000 		.4byte	0x7f7
 2354 07f1 0F       		.uleb128 0xf
 2355 07f2 01       		.uleb128 0x1
 2356 07f3 50       		.byte	0x50
 2357 07f4 01       		.uleb128 0x1
 2358 07f5 31       		.byte	0x31
 2359 07f6 00       		.byte	0
 2360 07f7 0E       		.uleb128 0xe
 2361 07f8 1C000000 		.4byte	.LVL87
 2362 07fc 1C040000 		.4byte	0x41c
 2363 0800 0C080000 		.4byte	0x80c
 2364 0804 0F       		.uleb128 0xf
 2365 0805 01       		.uleb128 0x1
 2366 0806 50       		.byte	0x50
 2367 0807 03       		.uleb128 0x3
 2368 0808 0A       		.byte	0xa
 2369 0809 FFFF     		.2byte	0xffff
 2370 080b 00       		.byte	0
 2371 080c 10       		.uleb128 0x10
 2372 080d 22000000 		.4byte	.LVL88
 2373 0811 96030000 		.4byte	0x396
 2374 0815 0F       		.uleb128 0xf
 2375 0816 01       		.uleb128 0x1
 2376 0817 50       		.byte	0x50
 2377 0818 01       		.uleb128 0x1
 2378 0819 30       		.byte	0x30
 2379 081a 00       		.byte	0
 2380 081b 00       		.byte	0
 2381 081c 06       		.uleb128 0x6
 2382 081d 17030000 		.4byte	.LASF72
 2383 0821 01       		.byte	0x1
 2384 0822 E6       		.byte	0xe6
 2385 0823 00000000 		.4byte	.LFB2
 2386 0827 20000000 		.4byte	.LFE2-.LFB2
 2387 082b 01       		.uleb128 0x1
 2388 082c 9C       		.byte	0x9c
 2389 082d 44080000 		.4byte	0x844
 2390 0831 08       		.uleb128 0x8
 2391 0832 0E000000 		.4byte	.LVL89
ARM GAS  C:\Temp\cc01nvIH.s 			page 68


 2392 0836 CF070000 		.4byte	0x7cf
 2393 083a 08       		.uleb128 0x8
 2394 083b 18000000 		.4byte	.LVL90
 2395 083f B7000000 		.4byte	0xb7
 2396 0843 00       		.byte	0
 2397 0844 0C       		.uleb128 0xc
 2398 0845 05060000 		.4byte	.LASF73
 2399 0849 01       		.byte	0x1
 2400 084a 3E05     		.2byte	0x53e
 2401 084c 77000000 		.4byte	0x77
 2402 0850 00000000 		.4byte	.LFB36
 2403 0854 0C000000 		.4byte	.LFE36-.LFB36
 2404 0858 01       		.uleb128 0x1
 2405 0859 9C       		.byte	0x9c
 2406 085a 0C       		.uleb128 0xc
 2407 085b 92050000 		.4byte	.LASF74
 2408 085f 01       		.byte	0x1
 2409 0860 5505     		.2byte	0x555
 2410 0862 77000000 		.4byte	0x77
 2411 0866 00000000 		.4byte	.LFB37
 2412 086a 0C000000 		.4byte	.LFE37-.LFB37
 2413 086e 01       		.uleb128 0x1
 2414 086f 9C       		.byte	0x9c
 2415 0870 09       		.uleb128 0x9
 2416 0871 A5030000 		.4byte	.LASF75
 2417 0875 01       		.byte	0x1
 2418 0876 6C05     		.2byte	0x56c
 2419 0878 00000000 		.4byte	.LFB38
 2420 087c 0C000000 		.4byte	.LFE38-.LFB38
 2421 0880 01       		.uleb128 0x1
 2422 0881 9C       		.byte	0x9c
 2423 0882 95080000 		.4byte	0x895
 2424 0886 0D       		.uleb128 0xd
 2425 0887 52040000 		.4byte	.LASF70
 2426 088b 01       		.byte	0x1
 2427 088c 6C05     		.2byte	0x56c
 2428 088e 77000000 		.4byte	0x77
 2429 0892 01       		.uleb128 0x1
 2430 0893 50       		.byte	0x50
 2431 0894 00       		.byte	0
 2432 0895 09       		.uleb128 0x9
 2433 0896 41030000 		.4byte	.LASF76
 2434 089a 01       		.byte	0x1
 2435 089b 8305     		.2byte	0x583
 2436 089d 00000000 		.4byte	.LFB39
 2437 08a1 0C000000 		.4byte	.LFE39-.LFB39
 2438 08a5 01       		.uleb128 0x1
 2439 08a6 9C       		.byte	0x9c
 2440 08a7 BA080000 		.4byte	0x8ba
 2441 08ab 0D       		.uleb128 0xd
 2442 08ac 52040000 		.4byte	.LASF70
 2443 08b0 01       		.byte	0x1
 2444 08b1 8305     		.2byte	0x583
 2445 08b3 77000000 		.4byte	0x77
 2446 08b7 01       		.uleb128 0x1
 2447 08b8 50       		.byte	0x50
 2448 08b9 00       		.byte	0
ARM GAS  C:\Temp\cc01nvIH.s 			page 69


 2449 08ba 11       		.uleb128 0x11
 2450 08bb 33020000 		.4byte	.LASF82
 2451 08bf 01       		.byte	0x1
 2452 08c0 15       		.byte	0x15
 2453 08c1 6B000000 		.4byte	0x6b
 2454 08c5 05       		.uleb128 0x5
 2455 08c6 03       		.byte	0x3
 2456 08c7 00000000 		.4byte	ADC_Timer_initVar
 2457 08cb 12       		.uleb128 0x12
 2458 08cc B0020000 		.4byte	.LASF77
 2459 08d0 B0020000 		.4byte	.LASF77
 2460 08d4 03       		.byte	0x3
 2461 08d5 E5       		.byte	0xe5
 2462 08d6 12       		.uleb128 0x12
 2463 08d7 21000000 		.4byte	.LASF78
 2464 08db 21000000 		.4byte	.LASF78
 2465 08df 03       		.byte	0x3
 2466 08e0 E6       		.byte	0xe6
 2467 08e1 00       		.byte	0
 2468              		.section	.debug_abbrev,"",%progbits
 2469              	.Ldebug_abbrev0:
 2470 0000 01       		.uleb128 0x1
 2471 0001 11       		.uleb128 0x11
 2472 0002 01       		.byte	0x1
 2473 0003 25       		.uleb128 0x25
 2474 0004 0E       		.uleb128 0xe
 2475 0005 13       		.uleb128 0x13
 2476 0006 0B       		.uleb128 0xb
 2477 0007 03       		.uleb128 0x3
 2478 0008 0E       		.uleb128 0xe
 2479 0009 1B       		.uleb128 0x1b
 2480 000a 0E       		.uleb128 0xe
 2481 000b 55       		.uleb128 0x55
 2482 000c 17       		.uleb128 0x17
 2483 000d 11       		.uleb128 0x11
 2484 000e 01       		.uleb128 0x1
 2485 000f 10       		.uleb128 0x10
 2486 0010 17       		.uleb128 0x17
 2487 0011 00       		.byte	0
 2488 0012 00       		.byte	0
 2489 0013 02       		.uleb128 0x2
 2490 0014 24       		.uleb128 0x24
 2491 0015 00       		.byte	0
 2492 0016 0B       		.uleb128 0xb
 2493 0017 0B       		.uleb128 0xb
 2494 0018 3E       		.uleb128 0x3e
 2495 0019 0B       		.uleb128 0xb
 2496 001a 03       		.uleb128 0x3
 2497 001b 0E       		.uleb128 0xe
 2498 001c 00       		.byte	0
 2499 001d 00       		.byte	0
 2500 001e 03       		.uleb128 0x3
 2501 001f 24       		.uleb128 0x24
 2502 0020 00       		.byte	0
 2503 0021 0B       		.uleb128 0xb
 2504 0022 0B       		.uleb128 0xb
 2505 0023 3E       		.uleb128 0x3e
ARM GAS  C:\Temp\cc01nvIH.s 			page 70


 2506 0024 0B       		.uleb128 0xb
 2507 0025 03       		.uleb128 0x3
 2508 0026 08       		.uleb128 0x8
 2509 0027 00       		.byte	0
 2510 0028 00       		.byte	0
 2511 0029 04       		.uleb128 0x4
 2512 002a 16       		.uleb128 0x16
 2513 002b 00       		.byte	0
 2514 002c 03       		.uleb128 0x3
 2515 002d 0E       		.uleb128 0xe
 2516 002e 3A       		.uleb128 0x3a
 2517 002f 0B       		.uleb128 0xb
 2518 0030 3B       		.uleb128 0x3b
 2519 0031 05       		.uleb128 0x5
 2520 0032 49       		.uleb128 0x49
 2521 0033 13       		.uleb128 0x13
 2522 0034 00       		.byte	0
 2523 0035 00       		.byte	0
 2524 0036 05       		.uleb128 0x5
 2525 0037 35       		.uleb128 0x35
 2526 0038 00       		.byte	0
 2527 0039 49       		.uleb128 0x49
 2528 003a 13       		.uleb128 0x13
 2529 003b 00       		.byte	0
 2530 003c 00       		.byte	0
 2531 003d 06       		.uleb128 0x6
 2532 003e 2E       		.uleb128 0x2e
 2533 003f 01       		.byte	0x1
 2534 0040 3F       		.uleb128 0x3f
 2535 0041 19       		.uleb128 0x19
 2536 0042 03       		.uleb128 0x3
 2537 0043 0E       		.uleb128 0xe
 2538 0044 3A       		.uleb128 0x3a
 2539 0045 0B       		.uleb128 0xb
 2540 0046 3B       		.uleb128 0x3b
 2541 0047 0B       		.uleb128 0xb
 2542 0048 27       		.uleb128 0x27
 2543 0049 19       		.uleb128 0x19
 2544 004a 11       		.uleb128 0x11
 2545 004b 01       		.uleb128 0x1
 2546 004c 12       		.uleb128 0x12
 2547 004d 06       		.uleb128 0x6
 2548 004e 40       		.uleb128 0x40
 2549 004f 18       		.uleb128 0x18
 2550 0050 9742     		.uleb128 0x2117
 2551 0052 19       		.uleb128 0x19
 2552 0053 01       		.uleb128 0x1
 2553 0054 13       		.uleb128 0x13
 2554 0055 00       		.byte	0
 2555 0056 00       		.byte	0
 2556 0057 07       		.uleb128 0x7
 2557 0058 34       		.uleb128 0x34
 2558 0059 00       		.byte	0
 2559 005a 03       		.uleb128 0x3
 2560 005b 0E       		.uleb128 0xe
 2561 005c 3A       		.uleb128 0x3a
 2562 005d 0B       		.uleb128 0xb
ARM GAS  C:\Temp\cc01nvIH.s 			page 71


 2563 005e 3B       		.uleb128 0x3b
 2564 005f 0B       		.uleb128 0xb
 2565 0060 49       		.uleb128 0x49
 2566 0061 13       		.uleb128 0x13
 2567 0062 02       		.uleb128 0x2
 2568 0063 17       		.uleb128 0x17
 2569 0064 00       		.byte	0
 2570 0065 00       		.byte	0
 2571 0066 08       		.uleb128 0x8
 2572 0067 898201   		.uleb128 0x4109
 2573 006a 00       		.byte	0
 2574 006b 11       		.uleb128 0x11
 2575 006c 01       		.uleb128 0x1
 2576 006d 31       		.uleb128 0x31
 2577 006e 13       		.uleb128 0x13
 2578 006f 00       		.byte	0
 2579 0070 00       		.byte	0
 2580 0071 09       		.uleb128 0x9
 2581 0072 2E       		.uleb128 0x2e
 2582 0073 01       		.byte	0x1
 2583 0074 3F       		.uleb128 0x3f
 2584 0075 19       		.uleb128 0x19
 2585 0076 03       		.uleb128 0x3
 2586 0077 0E       		.uleb128 0xe
 2587 0078 3A       		.uleb128 0x3a
 2588 0079 0B       		.uleb128 0xb
 2589 007a 3B       		.uleb128 0x3b
 2590 007b 05       		.uleb128 0x5
 2591 007c 27       		.uleb128 0x27
 2592 007d 19       		.uleb128 0x19
 2593 007e 11       		.uleb128 0x11
 2594 007f 01       		.uleb128 0x1
 2595 0080 12       		.uleb128 0x12
 2596 0081 06       		.uleb128 0x6
 2597 0082 40       		.uleb128 0x40
 2598 0083 18       		.uleb128 0x18
 2599 0084 9742     		.uleb128 0x2117
 2600 0086 19       		.uleb128 0x19
 2601 0087 01       		.uleb128 0x1
 2602 0088 13       		.uleb128 0x13
 2603 0089 00       		.byte	0
 2604 008a 00       		.byte	0
 2605 008b 0A       		.uleb128 0xa
 2606 008c 34       		.uleb128 0x34
 2607 008d 00       		.byte	0
 2608 008e 03       		.uleb128 0x3
 2609 008f 0E       		.uleb128 0xe
 2610 0090 3A       		.uleb128 0x3a
 2611 0091 0B       		.uleb128 0xb
 2612 0092 3B       		.uleb128 0x3b
 2613 0093 05       		.uleb128 0x5
 2614 0094 49       		.uleb128 0x49
 2615 0095 13       		.uleb128 0x13
 2616 0096 02       		.uleb128 0x2
 2617 0097 17       		.uleb128 0x17
 2618 0098 00       		.byte	0
 2619 0099 00       		.byte	0
ARM GAS  C:\Temp\cc01nvIH.s 			page 72


 2620 009a 0B       		.uleb128 0xb
 2621 009b 05       		.uleb128 0x5
 2622 009c 00       		.byte	0
 2623 009d 03       		.uleb128 0x3
 2624 009e 0E       		.uleb128 0xe
 2625 009f 3A       		.uleb128 0x3a
 2626 00a0 0B       		.uleb128 0xb
 2627 00a1 3B       		.uleb128 0x3b
 2628 00a2 05       		.uleb128 0x5
 2629 00a3 49       		.uleb128 0x49
 2630 00a4 13       		.uleb128 0x13
 2631 00a5 02       		.uleb128 0x2
 2632 00a6 17       		.uleb128 0x17
 2633 00a7 00       		.byte	0
 2634 00a8 00       		.byte	0
 2635 00a9 0C       		.uleb128 0xc
 2636 00aa 2E       		.uleb128 0x2e
 2637 00ab 00       		.byte	0
 2638 00ac 3F       		.uleb128 0x3f
 2639 00ad 19       		.uleb128 0x19
 2640 00ae 03       		.uleb128 0x3
 2641 00af 0E       		.uleb128 0xe
 2642 00b0 3A       		.uleb128 0x3a
 2643 00b1 0B       		.uleb128 0xb
 2644 00b2 3B       		.uleb128 0x3b
 2645 00b3 05       		.uleb128 0x5
 2646 00b4 27       		.uleb128 0x27
 2647 00b5 19       		.uleb128 0x19
 2648 00b6 49       		.uleb128 0x49
 2649 00b7 13       		.uleb128 0x13
 2650 00b8 11       		.uleb128 0x11
 2651 00b9 01       		.uleb128 0x1
 2652 00ba 12       		.uleb128 0x12
 2653 00bb 06       		.uleb128 0x6
 2654 00bc 40       		.uleb128 0x40
 2655 00bd 18       		.uleb128 0x18
 2656 00be 9742     		.uleb128 0x2117
 2657 00c0 19       		.uleb128 0x19
 2658 00c1 00       		.byte	0
 2659 00c2 00       		.byte	0
 2660 00c3 0D       		.uleb128 0xd
 2661 00c4 05       		.uleb128 0x5
 2662 00c5 00       		.byte	0
 2663 00c6 03       		.uleb128 0x3
 2664 00c7 0E       		.uleb128 0xe
 2665 00c8 3A       		.uleb128 0x3a
 2666 00c9 0B       		.uleb128 0xb
 2667 00ca 3B       		.uleb128 0x3b
 2668 00cb 05       		.uleb128 0x5
 2669 00cc 49       		.uleb128 0x49
 2670 00cd 13       		.uleb128 0x13
 2671 00ce 02       		.uleb128 0x2
 2672 00cf 18       		.uleb128 0x18
 2673 00d0 00       		.byte	0
 2674 00d1 00       		.byte	0
 2675 00d2 0E       		.uleb128 0xe
 2676 00d3 898201   		.uleb128 0x4109
ARM GAS  C:\Temp\cc01nvIH.s 			page 73


 2677 00d6 01       		.byte	0x1
 2678 00d7 11       		.uleb128 0x11
 2679 00d8 01       		.uleb128 0x1
 2680 00d9 31       		.uleb128 0x31
 2681 00da 13       		.uleb128 0x13
 2682 00db 01       		.uleb128 0x1
 2683 00dc 13       		.uleb128 0x13
 2684 00dd 00       		.byte	0
 2685 00de 00       		.byte	0
 2686 00df 0F       		.uleb128 0xf
 2687 00e0 8A8201   		.uleb128 0x410a
 2688 00e3 00       		.byte	0
 2689 00e4 02       		.uleb128 0x2
 2690 00e5 18       		.uleb128 0x18
 2691 00e6 9142     		.uleb128 0x2111
 2692 00e8 18       		.uleb128 0x18
 2693 00e9 00       		.byte	0
 2694 00ea 00       		.byte	0
 2695 00eb 10       		.uleb128 0x10
 2696 00ec 898201   		.uleb128 0x4109
 2697 00ef 01       		.byte	0x1
 2698 00f0 11       		.uleb128 0x11
 2699 00f1 01       		.uleb128 0x1
 2700 00f2 31       		.uleb128 0x31
 2701 00f3 13       		.uleb128 0x13
 2702 00f4 00       		.byte	0
 2703 00f5 00       		.byte	0
 2704 00f6 11       		.uleb128 0x11
 2705 00f7 34       		.uleb128 0x34
 2706 00f8 00       		.byte	0
 2707 00f9 03       		.uleb128 0x3
 2708 00fa 0E       		.uleb128 0xe
 2709 00fb 3A       		.uleb128 0x3a
 2710 00fc 0B       		.uleb128 0xb
 2711 00fd 3B       		.uleb128 0x3b
 2712 00fe 0B       		.uleb128 0xb
 2713 00ff 49       		.uleb128 0x49
 2714 0100 13       		.uleb128 0x13
 2715 0101 3F       		.uleb128 0x3f
 2716 0102 19       		.uleb128 0x19
 2717 0103 02       		.uleb128 0x2
 2718 0104 18       		.uleb128 0x18
 2719 0105 00       		.byte	0
 2720 0106 00       		.byte	0
 2721 0107 12       		.uleb128 0x12
 2722 0108 2E       		.uleb128 0x2e
 2723 0109 00       		.byte	0
 2724 010a 3F       		.uleb128 0x3f
 2725 010b 19       		.uleb128 0x19
 2726 010c 3C       		.uleb128 0x3c
 2727 010d 19       		.uleb128 0x19
 2728 010e 6E       		.uleb128 0x6e
 2729 010f 0E       		.uleb128 0xe
 2730 0110 03       		.uleb128 0x3
 2731 0111 0E       		.uleb128 0xe
 2732 0112 3A       		.uleb128 0x3a
 2733 0113 0B       		.uleb128 0xb
ARM GAS  C:\Temp\cc01nvIH.s 			page 74


 2734 0114 3B       		.uleb128 0x3b
 2735 0115 0B       		.uleb128 0xb
 2736 0116 00       		.byte	0
 2737 0117 00       		.byte	0
 2738 0118 00       		.byte	0
 2739              		.section	.debug_loc,"",%progbits
 2740              	.Ldebug_loc0:
 2741              	.LLST0:
 2742 0000 06000000 		.4byte	.LVL0
 2743 0004 13000000 		.4byte	.LVL1-1
 2744 0008 0100     		.2byte	0x1
 2745 000a 50       		.byte	0x50
 2746 000b 00000000 		.4byte	0
 2747 000f 00000000 		.4byte	0
 2748              	.LLST1:
 2749 0013 06000000 		.4byte	.LVL2
 2750 0017 13000000 		.4byte	.LVL3-1
 2751 001b 0100     		.2byte	0x1
 2752 001d 50       		.byte	0x50
 2753 001e 00000000 		.4byte	0
 2754 0022 00000000 		.4byte	0
 2755              	.LLST2:
 2756 0026 00000000 		.4byte	.LVL4
 2757 002a 07000000 		.4byte	.LVL5-1
 2758 002e 0100     		.2byte	0x1
 2759 0030 50       		.byte	0x50
 2760 0031 07000000 		.4byte	.LVL5-1
 2761 0035 16000000 		.4byte	.LVL6
 2762 0039 0100     		.2byte	0x1
 2763 003b 54       		.byte	0x54
 2764 003c 16000000 		.4byte	.LVL6
 2765 0040 28000000 		.4byte	.LFE4
 2766 0044 0400     		.2byte	0x4
 2767 0046 F3       		.byte	0xf3
 2768 0047 01       		.uleb128 0x1
 2769 0048 50       		.byte	0x50
 2770 0049 9F       		.byte	0x9f
 2771 004a 00000000 		.4byte	0
 2772 004e 00000000 		.4byte	0
 2773              	.LLST3:
 2774 0052 08000000 		.4byte	.LVL5
 2775 0056 1B000000 		.4byte	.LVL7-1
 2776 005a 0100     		.2byte	0x1
 2777 005c 50       		.byte	0x50
 2778 005d 00000000 		.4byte	0
 2779 0061 00000000 		.4byte	0
 2780              	.LLST4:
 2781 0065 00000000 		.4byte	.LVL8
 2782 0069 07000000 		.4byte	.LVL9-1
 2783 006d 0100     		.2byte	0x1
 2784 006f 50       		.byte	0x50
 2785 0070 07000000 		.4byte	.LVL9-1
 2786 0074 16000000 		.4byte	.LVL10
 2787 0078 0100     		.2byte	0x1
 2788 007a 54       		.byte	0x54
 2789 007b 16000000 		.4byte	.LVL10
 2790 007f 28000000 		.4byte	.LFE5
ARM GAS  C:\Temp\cc01nvIH.s 			page 75


 2791 0083 0400     		.2byte	0x4
 2792 0085 F3       		.byte	0xf3
 2793 0086 01       		.uleb128 0x1
 2794 0087 50       		.byte	0x50
 2795 0088 9F       		.byte	0x9f
 2796 0089 00000000 		.4byte	0
 2797 008d 00000000 		.4byte	0
 2798              	.LLST5:
 2799 0091 08000000 		.4byte	.LVL9
 2800 0095 1B000000 		.4byte	.LVL11-1
 2801 0099 0100     		.2byte	0x1
 2802 009b 50       		.byte	0x50
 2803 009c 00000000 		.4byte	0
 2804 00a0 00000000 		.4byte	0
 2805              	.LLST6:
 2806 00a4 00000000 		.4byte	.LVL12
 2807 00a8 07000000 		.4byte	.LVL13-1
 2808 00ac 0100     		.2byte	0x1
 2809 00ae 50       		.byte	0x50
 2810 00af 07000000 		.4byte	.LVL13-1
 2811 00b3 16000000 		.4byte	.LVL14
 2812 00b7 0100     		.2byte	0x1
 2813 00b9 54       		.byte	0x54
 2814 00ba 16000000 		.4byte	.LVL14
 2815 00be 28000000 		.4byte	.LFE6
 2816 00c2 0400     		.2byte	0x4
 2817 00c4 F3       		.byte	0xf3
 2818 00c5 01       		.uleb128 0x1
 2819 00c6 50       		.byte	0x50
 2820 00c7 9F       		.byte	0x9f
 2821 00c8 00000000 		.4byte	0
 2822 00cc 00000000 		.4byte	0
 2823              	.LLST7:
 2824 00d0 08000000 		.4byte	.LVL13
 2825 00d4 1B000000 		.4byte	.LVL15-1
 2826 00d8 0100     		.2byte	0x1
 2827 00da 50       		.byte	0x50
 2828 00db 00000000 		.4byte	0
 2829 00df 00000000 		.4byte	0
 2830              	.LLST8:
 2831 00e3 00000000 		.4byte	.LVL16
 2832 00e7 07000000 		.4byte	.LVL17-1
 2833 00eb 0100     		.2byte	0x1
 2834 00ed 50       		.byte	0x50
 2835 00ee 07000000 		.4byte	.LVL17-1
 2836 00f2 24000000 		.4byte	.LVL19
 2837 00f6 0100     		.2byte	0x1
 2838 00f8 54       		.byte	0x54
 2839 00f9 24000000 		.4byte	.LVL19
 2840 00fd 30000000 		.4byte	.LFE7
 2841 0101 0400     		.2byte	0x4
 2842 0103 F3       		.byte	0xf3
 2843 0104 01       		.uleb128 0x1
 2844 0105 50       		.byte	0x50
 2845 0106 9F       		.byte	0x9f
 2846 0107 00000000 		.4byte	0
 2847 010b 00000000 		.4byte	0
ARM GAS  C:\Temp\cc01nvIH.s 			page 76


 2848              	.LLST9:
 2849 010f 08000000 		.4byte	.LVL17
 2850 0113 23000000 		.4byte	.LVL18-1
 2851 0117 0100     		.2byte	0x1
 2852 0119 50       		.byte	0x50
 2853 011a 00000000 		.4byte	0
 2854 011e 00000000 		.4byte	0
 2855              	.LLST10:
 2856 0122 00000000 		.4byte	.LVL20
 2857 0126 04000000 		.4byte	.LVL21
 2858 012a 0100     		.2byte	0x1
 2859 012c 50       		.byte	0x50
 2860 012d 04000000 		.4byte	.LVL21
 2861 0131 10000000 		.4byte	.LFE8
 2862 0135 0400     		.2byte	0x4
 2863 0137 F3       		.byte	0xf3
 2864 0138 01       		.uleb128 0x1
 2865 0139 50       		.byte	0x50
 2866 013a 9F       		.byte	0x9f
 2867 013b 00000000 		.4byte	0
 2868 013f 00000000 		.4byte	0
 2869              	.LLST11:
 2870 0143 00000000 		.4byte	.LVL22
 2871 0147 07000000 		.4byte	.LVL23-1
 2872 014b 0100     		.2byte	0x1
 2873 014d 50       		.byte	0x50
 2874 014e 07000000 		.4byte	.LVL23-1
 2875 0152 1A000000 		.4byte	.LVL24
 2876 0156 0100     		.2byte	0x1
 2877 0158 54       		.byte	0x54
 2878 0159 1A000000 		.4byte	.LVL24
 2879 015d 28000000 		.4byte	.LFE9
 2880 0161 0400     		.2byte	0x4
 2881 0163 F3       		.byte	0xf3
 2882 0164 01       		.uleb128 0x1
 2883 0165 50       		.byte	0x50
 2884 0166 9F       		.byte	0x9f
 2885 0167 00000000 		.4byte	0
 2886 016b 00000000 		.4byte	0
 2887              	.LLST12:
 2888 016f 08000000 		.4byte	.LVL23
 2889 0173 21000000 		.4byte	.LVL25-1
 2890 0177 0100     		.2byte	0x1
 2891 0179 50       		.byte	0x50
 2892 017a 00000000 		.4byte	0
 2893 017e 00000000 		.4byte	0
 2894              	.LLST13:
 2895 0182 00000000 		.4byte	.LVL26
 2896 0186 07000000 		.4byte	.LVL27-1
 2897 018a 0100     		.2byte	0x1
 2898 018c 50       		.byte	0x50
 2899 018d 07000000 		.4byte	.LVL27-1
 2900 0191 1A000000 		.4byte	.LVL28
 2901 0195 0100     		.2byte	0x1
 2902 0197 54       		.byte	0x54
 2903 0198 1A000000 		.4byte	.LVL28
 2904 019c 28000000 		.4byte	.LFE10
ARM GAS  C:\Temp\cc01nvIH.s 			page 77


 2905 01a0 0400     		.2byte	0x4
 2906 01a2 F3       		.byte	0xf3
 2907 01a3 01       		.uleb128 0x1
 2908 01a4 50       		.byte	0x50
 2909 01a5 9F       		.byte	0x9f
 2910 01a6 00000000 		.4byte	0
 2911 01aa 00000000 		.4byte	0
 2912              	.LLST14:
 2913 01ae 08000000 		.4byte	.LVL27
 2914 01b2 21000000 		.4byte	.LVL29-1
 2915 01b6 0100     		.2byte	0x1
 2916 01b8 50       		.byte	0x50
 2917 01b9 00000000 		.4byte	0
 2918 01bd 00000000 		.4byte	0
 2919              	.LLST15:
 2920 01c1 00000000 		.4byte	.LVL30
 2921 01c5 07000000 		.4byte	.LVL31-1
 2922 01c9 0100     		.2byte	0x1
 2923 01cb 50       		.byte	0x50
 2924 01cc 07000000 		.4byte	.LVL31-1
 2925 01d0 16000000 		.4byte	.LVL32
 2926 01d4 0100     		.2byte	0x1
 2927 01d6 54       		.byte	0x54
 2928 01d7 16000000 		.4byte	.LVL32
 2929 01db 2C000000 		.4byte	.LFE11
 2930 01df 0400     		.2byte	0x4
 2931 01e1 F3       		.byte	0xf3
 2932 01e2 01       		.uleb128 0x1
 2933 01e3 50       		.byte	0x50
 2934 01e4 9F       		.byte	0x9f
 2935 01e5 00000000 		.4byte	0
 2936 01e9 00000000 		.4byte	0
 2937              	.LLST16:
 2938 01ed 08000000 		.4byte	.LVL31
 2939 01f1 1F000000 		.4byte	.LVL33-1
 2940 01f5 0100     		.2byte	0x1
 2941 01f7 50       		.byte	0x50
 2942 01f8 00000000 		.4byte	0
 2943 01fc 00000000 		.4byte	0
 2944              	.LLST17:
 2945 0200 00000000 		.4byte	.LVL34
 2946 0204 07000000 		.4byte	.LVL35-1
 2947 0208 0100     		.2byte	0x1
 2948 020a 50       		.byte	0x50
 2949 020b 07000000 		.4byte	.LVL35-1
 2950 020f 16000000 		.4byte	.LVL36
 2951 0213 0100     		.2byte	0x1
 2952 0215 54       		.byte	0x54
 2953 0216 16000000 		.4byte	.LVL36
 2954 021a 28000000 		.4byte	.LFE12
 2955 021e 0400     		.2byte	0x4
 2956 0220 F3       		.byte	0xf3
 2957 0221 01       		.uleb128 0x1
 2958 0222 50       		.byte	0x50
 2959 0223 9F       		.byte	0x9f
 2960 0224 00000000 		.4byte	0
 2961 0228 00000000 		.4byte	0
ARM GAS  C:\Temp\cc01nvIH.s 			page 78


 2962              	.LLST18:
 2963 022c 08000000 		.4byte	.LVL35
 2964 0230 1B000000 		.4byte	.LVL37-1
 2965 0234 0100     		.2byte	0x1
 2966 0236 50       		.byte	0x50
 2967 0237 00000000 		.4byte	0
 2968 023b 00000000 		.4byte	0
 2969              	.LLST19:
 2970 023f 00000000 		.4byte	.LVL38
 2971 0243 02000000 		.4byte	.LVL39
 2972 0247 0100     		.2byte	0x1
 2973 0249 50       		.byte	0x50
 2974 024a 02000000 		.4byte	.LVL39
 2975 024e 10000000 		.4byte	.LFE13
 2976 0252 0400     		.2byte	0x4
 2977 0254 F3       		.byte	0xf3
 2978 0255 01       		.uleb128 0x1
 2979 0256 50       		.byte	0x50
 2980 0257 9F       		.byte	0x9f
 2981 0258 00000000 		.4byte	0
 2982 025c 00000000 		.4byte	0
 2983              	.LLST20:
 2984 0260 00000000 		.4byte	.LVL40
 2985 0264 07000000 		.4byte	.LVL41-1
 2986 0268 0100     		.2byte	0x1
 2987 026a 50       		.byte	0x50
 2988 026b 07000000 		.4byte	.LVL41-1
 2989 026f 16000000 		.4byte	.LVL42
 2990 0273 0100     		.2byte	0x1
 2991 0275 54       		.byte	0x54
 2992 0276 16000000 		.4byte	.LVL42
 2993 027a 28000000 		.4byte	.LFE15
 2994 027e 0400     		.2byte	0x4
 2995 0280 F3       		.byte	0xf3
 2996 0281 01       		.uleb128 0x1
 2997 0282 50       		.byte	0x50
 2998 0283 9F       		.byte	0x9f
 2999 0284 00000000 		.4byte	0
 3000 0288 00000000 		.4byte	0
 3001              	.LLST21:
 3002 028c 08000000 		.4byte	.LVL41
 3003 0290 1B000000 		.4byte	.LVL43-1
 3004 0294 0100     		.2byte	0x1
 3005 0296 50       		.byte	0x50
 3006 0297 00000000 		.4byte	0
 3007 029b 00000000 		.4byte	0
 3008              	.LLST22:
 3009 029f 00000000 		.4byte	.LVL44
 3010 02a3 02000000 		.4byte	.LVL45
 3011 02a7 0100     		.2byte	0x1
 3012 02a9 50       		.byte	0x50
 3013 02aa 02000000 		.4byte	.LVL45
 3014 02ae 10000000 		.4byte	.LFE16
 3015 02b2 0400     		.2byte	0x4
 3016 02b4 F3       		.byte	0xf3
 3017 02b5 01       		.uleb128 0x1
 3018 02b6 50       		.byte	0x50
ARM GAS  C:\Temp\cc01nvIH.s 			page 79


 3019 02b7 9F       		.byte	0x9f
 3020 02b8 00000000 		.4byte	0
 3021 02bc 00000000 		.4byte	0
 3022              	.LLST23:
 3023 02c0 00000000 		.4byte	.LVL46
 3024 02c4 07000000 		.4byte	.LVL47-1
 3025 02c8 0100     		.2byte	0x1
 3026 02ca 50       		.byte	0x50
 3027 02cb 07000000 		.4byte	.LVL47-1
 3028 02cf 16000000 		.4byte	.LVL48
 3029 02d3 0100     		.2byte	0x1
 3030 02d5 54       		.byte	0x54
 3031 02d6 16000000 		.4byte	.LVL48
 3032 02da 24000000 		.4byte	.LFE18
 3033 02de 0400     		.2byte	0x4
 3034 02e0 F3       		.byte	0xf3
 3035 02e1 01       		.uleb128 0x1
 3036 02e2 50       		.byte	0x50
 3037 02e3 9F       		.byte	0x9f
 3038 02e4 00000000 		.4byte	0
 3039 02e8 00000000 		.4byte	0
 3040              	.LLST24:
 3041 02ec 08000000 		.4byte	.LVL47
 3042 02f0 1D000000 		.4byte	.LVL49-1
 3043 02f4 0100     		.2byte	0x1
 3044 02f6 50       		.byte	0x50
 3045 02f7 00000000 		.4byte	0
 3046 02fb 00000000 		.4byte	0
 3047              	.LLST25:
 3048 02ff 00000000 		.4byte	.LVL50
 3049 0303 02000000 		.4byte	.LVL51
 3050 0307 0100     		.2byte	0x1
 3051 0309 50       		.byte	0x50
 3052 030a 02000000 		.4byte	.LVL51
 3053 030e 10000000 		.4byte	.LFE19
 3054 0312 0400     		.2byte	0x4
 3055 0314 F3       		.byte	0xf3
 3056 0315 01       		.uleb128 0x1
 3057 0316 50       		.byte	0x50
 3058 0317 9F       		.byte	0x9f
 3059 0318 00000000 		.4byte	0
 3060 031c 00000000 		.4byte	0
 3061              	.LLST26:
 3062 0320 00000000 		.4byte	.LVL52
 3063 0324 07000000 		.4byte	.LVL53-1
 3064 0328 0100     		.2byte	0x1
 3065 032a 50       		.byte	0x50
 3066 032b 07000000 		.4byte	.LVL53-1
 3067 032f 1A000000 		.4byte	.LVL54
 3068 0333 0100     		.2byte	0x1
 3069 0335 54       		.byte	0x54
 3070 0336 1A000000 		.4byte	.LVL54
 3071 033a 28000000 		.4byte	.LFE21
 3072 033e 0400     		.2byte	0x4
 3073 0340 F3       		.byte	0xf3
 3074 0341 01       		.uleb128 0x1
 3075 0342 50       		.byte	0x50
ARM GAS  C:\Temp\cc01nvIH.s 			page 80


 3076 0343 9F       		.byte	0x9f
 3077 0344 00000000 		.4byte	0
 3078 0348 00000000 		.4byte	0
 3079              	.LLST27:
 3080 034c 08000000 		.4byte	.LVL53
 3081 0350 21000000 		.4byte	.LVL55-1
 3082 0354 0100     		.2byte	0x1
 3083 0356 50       		.byte	0x50
 3084 0357 00000000 		.4byte	0
 3085 035b 00000000 		.4byte	0
 3086              	.LLST28:
 3087 035f 00000000 		.4byte	.LVL56
 3088 0363 02000000 		.4byte	.LVL57
 3089 0367 0100     		.2byte	0x1
 3090 0369 50       		.byte	0x50
 3091 036a 02000000 		.4byte	.LVL57
 3092 036e 10000000 		.4byte	.LFE22
 3093 0372 0400     		.2byte	0x4
 3094 0374 F3       		.byte	0xf3
 3095 0375 01       		.uleb128 0x1
 3096 0376 50       		.byte	0x50
 3097 0377 9F       		.byte	0x9f
 3098 0378 00000000 		.4byte	0
 3099 037c 00000000 		.4byte	0
 3100              	.LLST29:
 3101 0380 00000000 		.4byte	.LVL58
 3102 0384 02000000 		.4byte	.LVL59
 3103 0388 0100     		.2byte	0x1
 3104 038a 50       		.byte	0x50
 3105 038b 02000000 		.4byte	.LVL59
 3106 038f 10000000 		.4byte	.LFE24
 3107 0393 0400     		.2byte	0x4
 3108 0395 F3       		.byte	0xf3
 3109 0396 01       		.uleb128 0x1
 3110 0397 50       		.byte	0x50
 3111 0398 9F       		.byte	0x9f
 3112 0399 00000000 		.4byte	0
 3113 039d 00000000 		.4byte	0
 3114              	.LLST30:
 3115 03a1 00000000 		.4byte	.LVL60
 3116 03a5 07000000 		.4byte	.LVL61-1
 3117 03a9 0100     		.2byte	0x1
 3118 03ab 50       		.byte	0x50
 3119 03ac 07000000 		.4byte	.LVL61-1
 3120 03b0 16000000 		.4byte	.LVL62
 3121 03b4 0100     		.2byte	0x1
 3122 03b6 54       		.byte	0x54
 3123 03b7 16000000 		.4byte	.LVL62
 3124 03bb 24000000 		.4byte	.LFE28
 3125 03bf 0400     		.2byte	0x4
 3126 03c1 F3       		.byte	0xf3
 3127 03c2 01       		.uleb128 0x1
 3128 03c3 50       		.byte	0x50
 3129 03c4 9F       		.byte	0x9f
 3130 03c5 00000000 		.4byte	0
 3131 03c9 00000000 		.4byte	0
 3132              	.LLST31:
ARM GAS  C:\Temp\cc01nvIH.s 			page 81


 3133 03cd 08000000 		.4byte	.LVL61
 3134 03d1 1B000000 		.4byte	.LVL63-1
 3135 03d5 0100     		.2byte	0x1
 3136 03d7 50       		.byte	0x50
 3137 03d8 00000000 		.4byte	0
 3138 03dc 00000000 		.4byte	0
 3139              	.LLST32:
 3140 03e0 00000000 		.4byte	.LVL64
 3141 03e4 07000000 		.4byte	.LVL65-1
 3142 03e8 0100     		.2byte	0x1
 3143 03ea 50       		.byte	0x50
 3144 03eb 07000000 		.4byte	.LVL65-1
 3145 03ef 16000000 		.4byte	.LVL66
 3146 03f3 0100     		.2byte	0x1
 3147 03f5 54       		.byte	0x54
 3148 03f6 16000000 		.4byte	.LVL66
 3149 03fa 24000000 		.4byte	.LFE29
 3150 03fe 0400     		.2byte	0x4
 3151 0400 F3       		.byte	0xf3
 3152 0401 01       		.uleb128 0x1
 3153 0402 50       		.byte	0x50
 3154 0403 9F       		.byte	0x9f
 3155 0404 00000000 		.4byte	0
 3156 0408 00000000 		.4byte	0
 3157              	.LLST33:
 3158 040c 08000000 		.4byte	.LVL65
 3159 0410 1D000000 		.4byte	.LVL67-1
 3160 0414 0100     		.2byte	0x1
 3161 0416 50       		.byte	0x50
 3162 0417 00000000 		.4byte	0
 3163 041b 00000000 		.4byte	0
 3164              	.LLST34:
 3165 041f 00000000 		.4byte	.LVL68
 3166 0423 07000000 		.4byte	.LVL69-1
 3167 0427 0100     		.2byte	0x1
 3168 0429 50       		.byte	0x50
 3169 042a 07000000 		.4byte	.LVL69-1
 3170 042e 16000000 		.4byte	.LVL70
 3171 0432 0100     		.2byte	0x1
 3172 0434 54       		.byte	0x54
 3173 0435 16000000 		.4byte	.LVL70
 3174 0439 28000000 		.4byte	.LFE30
 3175 043d 0400     		.2byte	0x4
 3176 043f F3       		.byte	0xf3
 3177 0440 01       		.uleb128 0x1
 3178 0441 50       		.byte	0x50
 3179 0442 9F       		.byte	0x9f
 3180 0443 00000000 		.4byte	0
 3181 0447 00000000 		.4byte	0
 3182              	.LLST35:
 3183 044b 08000000 		.4byte	.LVL69
 3184 044f 1D000000 		.4byte	.LVL71-1
 3185 0453 0100     		.2byte	0x1
 3186 0455 50       		.byte	0x50
 3187 0456 00000000 		.4byte	0
 3188 045a 00000000 		.4byte	0
 3189              	.LLST36:
ARM GAS  C:\Temp\cc01nvIH.s 			page 82


 3190 045e 00000000 		.4byte	.LVL72
 3191 0462 07000000 		.4byte	.LVL73-1
 3192 0466 0100     		.2byte	0x1
 3193 0468 50       		.byte	0x50
 3194 0469 07000000 		.4byte	.LVL73-1
 3195 046d 16000000 		.4byte	.LVL74
 3196 0471 0100     		.2byte	0x1
 3197 0473 54       		.byte	0x54
 3198 0474 16000000 		.4byte	.LVL74
 3199 0478 24000000 		.4byte	.LFE31
 3200 047c 0400     		.2byte	0x4
 3201 047e F3       		.byte	0xf3
 3202 047f 01       		.uleb128 0x1
 3203 0480 50       		.byte	0x50
 3204 0481 9F       		.byte	0x9f
 3205 0482 00000000 		.4byte	0
 3206 0486 00000000 		.4byte	0
 3207              	.LLST37:
 3208 048a 08000000 		.4byte	.LVL73
 3209 048e 1D000000 		.4byte	.LVL75-1
 3210 0492 0100     		.2byte	0x1
 3211 0494 50       		.byte	0x50
 3212 0495 00000000 		.4byte	0
 3213 0499 00000000 		.4byte	0
 3214              	.LLST38:
 3215 049d 00000000 		.4byte	.LVL76
 3216 04a1 07000000 		.4byte	.LVL77-1
 3217 04a5 0100     		.2byte	0x1
 3218 04a7 50       		.byte	0x50
 3219 04a8 07000000 		.4byte	.LVL77-1
 3220 04ac 16000000 		.4byte	.LVL78
 3221 04b0 0100     		.2byte	0x1
 3222 04b2 54       		.byte	0x54
 3223 04b3 16000000 		.4byte	.LVL78
 3224 04b7 24000000 		.4byte	.LFE32
 3225 04bb 0400     		.2byte	0x4
 3226 04bd F3       		.byte	0xf3
 3227 04be 01       		.uleb128 0x1
 3228 04bf 50       		.byte	0x50
 3229 04c0 9F       		.byte	0x9f
 3230 04c1 00000000 		.4byte	0
 3231 04c5 00000000 		.4byte	0
 3232              	.LLST39:
 3233 04c9 08000000 		.4byte	.LVL77
 3234 04cd 1D000000 		.4byte	.LVL79-1
 3235 04d1 0100     		.2byte	0x1
 3236 04d3 50       		.byte	0x50
 3237 04d4 00000000 		.4byte	0
 3238 04d8 00000000 		.4byte	0
 3239              	.LLST40:
 3240 04dc 00000000 		.4byte	.LVL80
 3241 04e0 09000000 		.4byte	.LVL81-1
 3242 04e4 0100     		.2byte	0x1
 3243 04e6 50       		.byte	0x50
 3244 04e7 09000000 		.4byte	.LVL81-1
 3245 04eb 0C000000 		.4byte	.LVL82
 3246 04ef 0100     		.2byte	0x1
ARM GAS  C:\Temp\cc01nvIH.s 			page 83


 3247 04f1 54       		.byte	0x54
 3248 04f2 0C000000 		.4byte	.LVL82
 3249 04f6 1C000000 		.4byte	.LFE33
 3250 04fa 0400     		.2byte	0x4
 3251 04fc F3       		.byte	0xf3
 3252 04fd 01       		.uleb128 0x1
 3253 04fe 50       		.byte	0x50
 3254 04ff 9F       		.byte	0x9f
 3255 0500 00000000 		.4byte	0
 3256 0504 00000000 		.4byte	0
 3257              	.LLST41:
 3258 0508 00000000 		.4byte	.LVL80
 3259 050c 09000000 		.4byte	.LVL81-1
 3260 0510 0100     		.2byte	0x1
 3261 0512 51       		.byte	0x51
 3262 0513 09000000 		.4byte	.LVL81-1
 3263 0517 14000000 		.4byte	.LVL84
 3264 051b 0100     		.2byte	0x1
 3265 051d 55       		.byte	0x55
 3266 051e 14000000 		.4byte	.LVL84
 3267 0522 1C000000 		.4byte	.LFE33
 3268 0526 0400     		.2byte	0x4
 3269 0528 F3       		.byte	0xf3
 3270 0529 01       		.uleb128 0x1
 3271 052a 51       		.byte	0x51
 3272 052b 9F       		.byte	0x9f
 3273 052c 00000000 		.4byte	0
 3274 0530 00000000 		.4byte	0
 3275              	.LLST42:
 3276 0534 0A000000 		.4byte	.LVL81
 3277 0538 13000000 		.4byte	.LVL83-1
 3278 053c 0100     		.2byte	0x1
 3279 053e 50       		.byte	0x50
 3280 053f 00000000 		.4byte	0
 3281 0543 00000000 		.4byte	0
 3282              		.section	.debug_aranges,"",%progbits
 3283 0000 54010000 		.4byte	0x154
 3284 0004 0200     		.2byte	0x2
 3285 0006 00000000 		.4byte	.Ldebug_info0
 3286 000a 04       		.byte	0x4
 3287 000b 00       		.byte	0
 3288 000c 0000     		.2byte	0
 3289 000e 0000     		.2byte	0
 3290 0010 00000000 		.4byte	.LFB1
 3291 0014 1C000000 		.4byte	.LFE1-.LFB1
 3292 0018 00000000 		.4byte	.LFB3
 3293 001c 1C000000 		.4byte	.LFE3-.LFB3
 3294 0020 00000000 		.4byte	.LFB4
 3295 0024 28000000 		.4byte	.LFE4-.LFB4
 3296 0028 00000000 		.4byte	.LFB5
 3297 002c 28000000 		.4byte	.LFE5-.LFB5
 3298 0030 00000000 		.4byte	.LFB6
 3299 0034 28000000 		.4byte	.LFE6-.LFB6
 3300 0038 00000000 		.4byte	.LFB7
 3301 003c 30000000 		.4byte	.LFE7-.LFB7
 3302 0040 00000000 		.4byte	.LFB8
 3303 0044 10000000 		.4byte	.LFE8-.LFB8
ARM GAS  C:\Temp\cc01nvIH.s 			page 84


 3304 0048 00000000 		.4byte	.LFB9
 3305 004c 28000000 		.4byte	.LFE9-.LFB9
 3306 0050 00000000 		.4byte	.LFB10
 3307 0054 28000000 		.4byte	.LFE10-.LFB10
 3308 0058 00000000 		.4byte	.LFB11
 3309 005c 2C000000 		.4byte	.LFE11-.LFB11
 3310 0060 00000000 		.4byte	.LFB12
 3311 0064 28000000 		.4byte	.LFE12-.LFB12
 3312 0068 00000000 		.4byte	.LFB13
 3313 006c 10000000 		.4byte	.LFE13-.LFB13
 3314 0070 00000000 		.4byte	.LFB14
 3315 0074 10000000 		.4byte	.LFE14-.LFB14
 3316 0078 00000000 		.4byte	.LFB15
 3317 007c 28000000 		.4byte	.LFE15-.LFB15
 3318 0080 00000000 		.4byte	.LFB16
 3319 0084 10000000 		.4byte	.LFE16-.LFB16
 3320 0088 00000000 		.4byte	.LFB17
 3321 008c 10000000 		.4byte	.LFE17-.LFB17
 3322 0090 00000000 		.4byte	.LFB18
 3323 0094 24000000 		.4byte	.LFE18-.LFB18
 3324 0098 00000000 		.4byte	.LFB19
 3325 009c 10000000 		.4byte	.LFE19-.LFB19
 3326 00a0 00000000 		.4byte	.LFB20
 3327 00a4 10000000 		.4byte	.LFE20-.LFB20
 3328 00a8 00000000 		.4byte	.LFB21
 3329 00ac 28000000 		.4byte	.LFE21-.LFB21
 3330 00b0 00000000 		.4byte	.LFB22
 3331 00b4 10000000 		.4byte	.LFE22-.LFB22
 3332 00b8 00000000 		.4byte	.LFB23
 3333 00bc 10000000 		.4byte	.LFE23-.LFB23
 3334 00c0 00000000 		.4byte	.LFB24
 3335 00c4 10000000 		.4byte	.LFE24-.LFB24
 3336 00c8 00000000 		.4byte	.LFB25
 3337 00cc 10000000 		.4byte	.LFE25-.LFB25
 3338 00d0 00000000 		.4byte	.LFB26
 3339 00d4 10000000 		.4byte	.LFE26-.LFB26
 3340 00d8 00000000 		.4byte	.LFB27
 3341 00dc 10000000 		.4byte	.LFE27-.LFB27
 3342 00e0 00000000 		.4byte	.LFB28
 3343 00e4 24000000 		.4byte	.LFE28-.LFB28
 3344 00e8 00000000 		.4byte	.LFB29
 3345 00ec 24000000 		.4byte	.LFE29-.LFB29
 3346 00f0 00000000 		.4byte	.LFB30
 3347 00f4 28000000 		.4byte	.LFE30-.LFB30
 3348 00f8 00000000 		.4byte	.LFB31
 3349 00fc 24000000 		.4byte	.LFE31-.LFB31
 3350 0100 00000000 		.4byte	.LFB32
 3351 0104 24000000 		.4byte	.LFE32-.LFB32
 3352 0108 00000000 		.4byte	.LFB33
 3353 010c 1C000000 		.4byte	.LFE33-.LFB33
 3354 0110 00000000 		.4byte	.LFB34
 3355 0114 14000000 		.4byte	.LFE34-.LFB34
 3356 0118 00000000 		.4byte	.LFB35
 3357 011c 0C000000 		.4byte	.LFE35-.LFB35
 3358 0120 00000000 		.4byte	.LFB0
 3359 0124 30000000 		.4byte	.LFE0-.LFB0
 3360 0128 00000000 		.4byte	.LFB2
ARM GAS  C:\Temp\cc01nvIH.s 			page 85


 3361 012c 20000000 		.4byte	.LFE2-.LFB2
 3362 0130 00000000 		.4byte	.LFB36
 3363 0134 0C000000 		.4byte	.LFE36-.LFB36
 3364 0138 00000000 		.4byte	.LFB37
 3365 013c 0C000000 		.4byte	.LFE37-.LFB37
 3366 0140 00000000 		.4byte	.LFB38
 3367 0144 0C000000 		.4byte	.LFE38-.LFB38
 3368 0148 00000000 		.4byte	.LFB39
 3369 014c 0C000000 		.4byte	.LFE39-.LFB39
 3370 0150 00000000 		.4byte	0
 3371 0154 00000000 		.4byte	0
 3372              		.section	.debug_ranges,"",%progbits
 3373              	.Ldebug_ranges0:
 3374 0000 00000000 		.4byte	.LFB1
 3375 0004 1C000000 		.4byte	.LFE1
 3376 0008 00000000 		.4byte	.LFB3
 3377 000c 1C000000 		.4byte	.LFE3
 3378 0010 00000000 		.4byte	.LFB4
 3379 0014 28000000 		.4byte	.LFE4
 3380 0018 00000000 		.4byte	.LFB5
 3381 001c 28000000 		.4byte	.LFE5
 3382 0020 00000000 		.4byte	.LFB6
 3383 0024 28000000 		.4byte	.LFE6
 3384 0028 00000000 		.4byte	.LFB7
 3385 002c 30000000 		.4byte	.LFE7
 3386 0030 00000000 		.4byte	.LFB8
 3387 0034 10000000 		.4byte	.LFE8
 3388 0038 00000000 		.4byte	.LFB9
 3389 003c 28000000 		.4byte	.LFE9
 3390 0040 00000000 		.4byte	.LFB10
 3391 0044 28000000 		.4byte	.LFE10
 3392 0048 00000000 		.4byte	.LFB11
 3393 004c 2C000000 		.4byte	.LFE11
 3394 0050 00000000 		.4byte	.LFB12
 3395 0054 28000000 		.4byte	.LFE12
 3396 0058 00000000 		.4byte	.LFB13
 3397 005c 10000000 		.4byte	.LFE13
 3398 0060 00000000 		.4byte	.LFB14
 3399 0064 10000000 		.4byte	.LFE14
 3400 0068 00000000 		.4byte	.LFB15
 3401 006c 28000000 		.4byte	.LFE15
 3402 0070 00000000 		.4byte	.LFB16
 3403 0074 10000000 		.4byte	.LFE16
 3404 0078 00000000 		.4byte	.LFB17
 3405 007c 10000000 		.4byte	.LFE17
 3406 0080 00000000 		.4byte	.LFB18
 3407 0084 24000000 		.4byte	.LFE18
 3408 0088 00000000 		.4byte	.LFB19
 3409 008c 10000000 		.4byte	.LFE19
 3410 0090 00000000 		.4byte	.LFB20
 3411 0094 10000000 		.4byte	.LFE20
 3412 0098 00000000 		.4byte	.LFB21
 3413 009c 28000000 		.4byte	.LFE21
 3414 00a0 00000000 		.4byte	.LFB22
 3415 00a4 10000000 		.4byte	.LFE22
 3416 00a8 00000000 		.4byte	.LFB23
 3417 00ac 10000000 		.4byte	.LFE23
ARM GAS  C:\Temp\cc01nvIH.s 			page 86


 3418 00b0 00000000 		.4byte	.LFB24
 3419 00b4 10000000 		.4byte	.LFE24
 3420 00b8 00000000 		.4byte	.LFB25
 3421 00bc 10000000 		.4byte	.LFE25
 3422 00c0 00000000 		.4byte	.LFB26
 3423 00c4 10000000 		.4byte	.LFE26
 3424 00c8 00000000 		.4byte	.LFB27
 3425 00cc 10000000 		.4byte	.LFE27
 3426 00d0 00000000 		.4byte	.LFB28
 3427 00d4 24000000 		.4byte	.LFE28
 3428 00d8 00000000 		.4byte	.LFB29
 3429 00dc 24000000 		.4byte	.LFE29
 3430 00e0 00000000 		.4byte	.LFB30
 3431 00e4 28000000 		.4byte	.LFE30
 3432 00e8 00000000 		.4byte	.LFB31
 3433 00ec 24000000 		.4byte	.LFE31
 3434 00f0 00000000 		.4byte	.LFB32
 3435 00f4 24000000 		.4byte	.LFE32
 3436 00f8 00000000 		.4byte	.LFB33
 3437 00fc 1C000000 		.4byte	.LFE33
 3438 0100 00000000 		.4byte	.LFB34
 3439 0104 14000000 		.4byte	.LFE34
 3440 0108 00000000 		.4byte	.LFB35
 3441 010c 0C000000 		.4byte	.LFE35
 3442 0110 00000000 		.4byte	.LFB0
 3443 0114 30000000 		.4byte	.LFE0
 3444 0118 00000000 		.4byte	.LFB2
 3445 011c 20000000 		.4byte	.LFE2
 3446 0120 00000000 		.4byte	.LFB36
 3447 0124 0C000000 		.4byte	.LFE36
 3448 0128 00000000 		.4byte	.LFB37
 3449 012c 0C000000 		.4byte	.LFE37
 3450 0130 00000000 		.4byte	.LFB38
 3451 0134 0C000000 		.4byte	.LFE38
 3452 0138 00000000 		.4byte	.LFB39
 3453 013c 0C000000 		.4byte	.LFE39
 3454 0140 00000000 		.4byte	0
 3455 0144 00000000 		.4byte	0
 3456              		.section	.debug_line,"",%progbits
 3457              	.Ldebug_line0:
 3458 0000 76030000 		.section	.debug_str,"MS",%progbits,1
 3458      02005100 
 3458      00000201 
 3458      FB0E0D00 
 3458      01010101 
 3459              	.LASF39:
 3460 0000 636F756E 		.ascii	"count\000"
 3460      7400
 3461              	.LASF69:
 3462 0006 4144435F 		.ascii	"ADC_Timer_SetInterruptMode\000"
 3462      54696D65 
 3462      725F5365 
 3462      74496E74 
 3462      65727275 
 3463              	.LASF78:
 3464 0021 43794578 		.ascii	"CyExitCriticalSection\000"
 3464      69744372 
ARM GAS  C:\Temp\cc01nvIH.s 			page 87


 3464      69746963 
 3464      616C5365 
 3464      6374696F 
 3465              	.LASF71:
 3466 0037 4144435F 		.ascii	"ADC_Timer_Init\000"
 3466      54696D65 
 3466      725F496E 
 3466      697400
 3467              	.LASF51:
 3468 0046 4144435F 		.ascii	"ADC_Timer_SetPeriodSwap\000"
 3468      54696D65 
 3468      725F5365 
 3468      74506572 
 3468      696F6453 
 3469              	.LASF58:
 3470 005e 4144435F 		.ascii	"ADC_Timer_ReadCapture\000"
 3470      54696D65 
 3470      725F5265 
 3470      61644361 
 3470      70747572 
 3471              	.LASF40:
 3472 0074 4144435F 		.ascii	"ADC_Timer_SetCounterMode\000"
 3472      54696D65 
 3472      725F5365 
 3472      74436F75 
 3472      6E746572 
 3473              	.LASF18:
 3474 008d 4144435F 		.ascii	"ADC_Timer_Stop\000"
 3474      54696D65 
 3474      725F5374 
 3474      6F7000
 3475              	.LASF80:
 3476 009c 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC_Timer.c\000"
 3476      72617465 
 3476      645F536F 
 3476      75726365 
 3476      5C50536F 
 3477              	.LASF79:
 3478 00bf 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3478      43313120 
 3478      352E342E 
 3478      31203230 
 3478      31363036 
 3479 00f2 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 3479      20726576 
 3479      6973696F 
 3479      6E203233 
 3479      37373135 
 3480 0125 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 3480      66756E63 
 3480      74696F6E 
 3480      2D736563 
 3480      74696F6E 
 3481              	.LASF43:
 3482 014d 70657269 		.ascii	"period\000"
 3482      6F6400
 3483              	.LASF7:
ARM GAS  C:\Temp\cc01nvIH.s 			page 88


 3484 0154 6C6F6E67 		.ascii	"long long unsigned int\000"
 3484      206C6F6E 
 3484      6720756E 
 3484      7369676E 
 3484      65642069 
 3485              	.LASF23:
 3486 016b 71644D6F 		.ascii	"qdMode\000"
 3486      646500
 3487              	.LASF24:
 3488 0172 4144435F 		.ascii	"ADC_Timer_SetPrescaler\000"
 3488      54696D65 
 3488      725F5365 
 3488      74507265 
 3488      7363616C 
 3489              	.LASF6:
 3490 0189 6C6F6E67 		.ascii	"long long int\000"
 3490      206C6F6E 
 3490      6720696E 
 3490      7400
 3491              	.LASF0:
 3492 0197 7369676E 		.ascii	"signed char\000"
 3492      65642063 
 3492      68617200 
 3493              	.LASF50:
 3494 01a3 4144435F 		.ascii	"ADC_Timer_ReadPeriodBuf\000"
 3494      54696D65 
 3494      725F5265 
 3494      61645065 
 3494      72696F64 
 3495              	.LASF60:
 3496 01bb 4144435F 		.ascii	"ADC_Timer_SetCaptureMode\000"
 3496      54696D65 
 3496      725F5365 
 3496      74436170 
 3496      74757265 
 3497              	.LASF4:
 3498 01d4 6C6F6E67 		.ascii	"long int\000"
 3498      20696E74 
 3498      00
 3499              	.LASF62:
 3500 01dd 4144435F 		.ascii	"ADC_Timer_SetReloadMode\000"
 3500      54696D65 
 3500      725F5365 
 3500      7452656C 
 3500      6F61644D 
 3501              	.LASF9:
 3502 01f5 75696E74 		.ascii	"uint8\000"
 3502      3800
 3503              	.LASF59:
 3504 01fb 4144435F 		.ascii	"ADC_Timer_ReadCaptureBuf\000"
 3504      54696D65 
 3504      725F5265 
 3504      61644361 
 3504      70747572 
 3505              	.LASF12:
 3506 0214 646F7562 		.ascii	"double\000"
 3506      6C6500
ARM GAS  C:\Temp\cc01nvIH.s 			page 89


 3507              	.LASF10:
 3508 021b 75696E74 		.ascii	"uint32\000"
 3508      333200
 3509              	.LASF61:
 3510 0222 74726967 		.ascii	"triggerMode\000"
 3510      6765724D 
 3510      6F646500 
 3511              	.LASF37:
 3512 022e 6D61736B 		.ascii	"mask\000"
 3512      00
 3513              	.LASF82:
 3514 0233 4144435F 		.ascii	"ADC_Timer_initVar\000"
 3514      54696D65 
 3514      725F696E 
 3514      69745661 
 3514      7200
 3515              	.LASF35:
 3516 0245 64656164 		.ascii	"deadTime\000"
 3516      54696D65 
 3516      00
 3517              	.LASF46:
 3518 024e 4144435F 		.ascii	"ADC_Timer_SetCompareSwap\000"
 3518      54696D65 
 3518      725F5365 
 3518      74436F6D 
 3518      70617265 
 3519              	.LASF8:
 3520 0267 756E7369 		.ascii	"unsigned int\000"
 3520      676E6564 
 3520      20696E74 
 3520      00
 3521              	.LASF67:
 3522 0274 636F6D6D 		.ascii	"command\000"
 3522      616E6400 
 3523              	.LASF5:
 3524 027c 6C6F6E67 		.ascii	"long unsigned int\000"
 3524      20756E73 
 3524      69676E65 
 3524      6420696E 
 3524      7400
 3525              	.LASF29:
 3526 028e 6D6F6465 		.ascii	"modeMask\000"
 3526      4D61736B 
 3526      00
 3527              	.LASF66:
 3528 0297 4144435F 		.ascii	"ADC_Timer_TriggerCommand\000"
 3528      54696D65 
 3528      725F5472 
 3528      69676765 
 3528      72436F6D 
 3529              	.LASF77:
 3530 02b0 4379456E 		.ascii	"CyEnterCriticalSection\000"
 3530      74657243 
 3530      72697469 
 3530      63616C53 
 3530      65637469 
 3531              	.LASF3:
ARM GAS  C:\Temp\cc01nvIH.s 			page 90


 3532 02c7 73686F72 		.ascii	"short unsigned int\000"
 3532      7420756E 
 3532      7369676E 
 3532      65642069 
 3532      6E7400
 3533              	.LASF30:
 3534 02da 4144435F 		.ascii	"ADC_Timer_SetPWMSyncKill\000"
 3534      54696D65 
 3534      725F5365 
 3534      7450574D 
 3534      53796E63 
 3535              	.LASF27:
 3536 02f3 6F6E6553 		.ascii	"oneShotEnable\000"
 3536      686F7445 
 3536      6E61626C 
 3536      6500
 3537              	.LASF54:
 3538 0301 4144435F 		.ascii	"ADC_Timer_ReadCompare\000"
 3538      54696D65 
 3538      725F5265 
 3538      6164436F 
 3538      6D706172 
 3539              	.LASF72:
 3540 0317 4144435F 		.ascii	"ADC_Timer_Start\000"
 3540      54696D65 
 3540      725F5374 
 3540      61727400 
 3541              	.LASF21:
 3542 0327 4144435F 		.ascii	"ADC_Timer_SetQDMode\000"
 3542      54696D65 
 3542      725F5365 
 3542      7451444D 
 3542      6F646500 
 3543              	.LASF14:
 3544 033b 72656733 		.ascii	"reg32\000"
 3544      3200
 3545              	.LASF76:
 3546 0341 4144435F 		.ascii	"ADC_Timer_SetInterrupt\000"
 3546      54696D65 
 3546      725F5365 
 3546      74496E74 
 3546      65727275 
 3547              	.LASF16:
 3548 0358 73697A65 		.ascii	"sizetype\000"
 3548      74797065 
 3548      00
 3549              	.LASF55:
 3550 0361 4144435F 		.ascii	"ADC_Timer_WriteCompareBuf\000"
 3550      54696D65 
 3550      725F5772 
 3550      69746543 
 3550      6F6D7061 
 3551              	.LASF15:
 3552 037b 6C6F6E67 		.ascii	"long double\000"
 3552      20646F75 
 3552      626C6500 
 3553              	.LASF64:
ARM GAS  C:\Temp\cc01nvIH.s 			page 91


 3554 0387 4144435F 		.ascii	"ADC_Timer_SetStopMode\000"
 3554      54696D65 
 3554      725F5365 
 3554      7453746F 
 3554      704D6F64 
 3555              	.LASF53:
 3556 039d 636F6D70 		.ascii	"compare\000"
 3556      61726500 
 3557              	.LASF75:
 3558 03a5 4144435F 		.ascii	"ADC_Timer_ClearInterrupt\000"
 3558      54696D65 
 3558      725F436C 
 3558      65617249 
 3558      6E746572 
 3559              	.LASF68:
 3560 03be 4144435F 		.ascii	"ADC_Timer_ReadStatus\000"
 3560      54696D65 
 3560      725F5265 
 3560      61645374 
 3560      61747573 
 3561              	.LASF44:
 3562 03d3 4144435F 		.ascii	"ADC_Timer_ReadCounter\000"
 3562      54696D65 
 3562      725F5265 
 3562      6164436F 
 3562      756E7465 
 3563              	.LASF11:
 3564 03e9 666C6F61 		.ascii	"float\000"
 3564      7400
 3565              	.LASF25:
 3566 03ef 70726573 		.ascii	"prescaler\000"
 3566      63616C65 
 3566      7200
 3567              	.LASF65:
 3568 03f9 4144435F 		.ascii	"ADC_Timer_SetCountMode\000"
 3568      54696D65 
 3568      725F5365 
 3568      74436F75 
 3568      6E744D6F 
 3569              	.LASF57:
 3570 0410 4144435F 		.ascii	"ADC_Timer_ReadCompareBuf\000"
 3570      54696D65 
 3570      725F5265 
 3570      6164436F 
 3570      6D706172 
 3571              	.LASF1:
 3572 0429 756E7369 		.ascii	"unsigned char\000"
 3572      676E6564 
 3572      20636861 
 3572      7200
 3573              	.LASF33:
 3574 0437 73746F70 		.ascii	"stopOnKillEnable\000"
 3574      4F6E4B69 
 3574      6C6C456E 
 3574      61626C65 
 3574      00
 3575              	.LASF2:
ARM GAS  C:\Temp\cc01nvIH.s 			page 92


 3576 0448 73686F72 		.ascii	"short int\000"
 3576      7420696E 
 3576      7400
 3577              	.LASF70:
 3578 0452 696E7465 		.ascii	"interruptMask\000"
 3578      72727570 
 3578      744D6173 
 3578      6B00
 3579              	.LASF52:
 3580 0460 4144435F 		.ascii	"ADC_Timer_WriteCompare\000"
 3580      54696D65 
 3580      725F5772 
 3580      69746543 
 3580      6F6D7061 
 3581              	.LASF34:
 3582 0477 4144435F 		.ascii	"ADC_Timer_SetPWMDeadTime\000"
 3582      54696D65 
 3582      725F5365 
 3582      7450574D 
 3582      44656164 
 3583              	.LASF81:
 3584 0490 433A5C55 		.ascii	"C:\\Users\\amdev\\Documents\\PSoC Creator\\RC Recei"
 3584      73657273 
 3584      5C616D64 
 3584      65765C44 
 3584      6F63756D 
 3585 04be 76657220 		.ascii	"ver Checker\\Design01.cydsn\000"
 3585      43686563 
 3585      6B65725C 
 3585      44657369 
 3585      676E3031 
 3586              	.LASF20:
 3587 04d9 4144435F 		.ascii	"ADC_Timer_SetMode\000"
 3587      54696D65 
 3587      725F5365 
 3587      744D6F64 
 3587      6500
 3588              	.LASF45:
 3589 04eb 4144435F 		.ascii	"ADC_Timer_ReadPeriod\000"
 3589      54696D65 
 3589      725F5265 
 3589      61645065 
 3589      72696F64 
 3590              	.LASF17:
 3591 0500 4144435F 		.ascii	"ADC_Timer_Enable\000"
 3591      54696D65 
 3591      725F456E 
 3591      61626C65 
 3591      00
 3592              	.LASF13:
 3593 0511 63686172 		.ascii	"char\000"
 3593      00
 3594              	.LASF22:
 3595 0516 6D6F6465 		.ascii	"mode\000"
 3595      00
 3596              	.LASF32:
 3597 051b 4144435F 		.ascii	"ADC_Timer_SetPWMStopOnKill\000"
ARM GAS  C:\Temp\cc01nvIH.s 			page 93


 3597      54696D65 
 3597      725F5365 
 3597      7450574D 
 3597      53746F70 
 3598              	.LASF26:
 3599 0536 4144435F 		.ascii	"ADC_Timer_SetOneShot\000"
 3599      54696D65 
 3599      725F5365 
 3599      744F6E65 
 3599      53686F74 
 3600              	.LASF41:
 3601 054b 636F756E 		.ascii	"counterMode\000"
 3601      7465724D 
 3601      6F646500 
 3602              	.LASF48:
 3603 0557 4144435F 		.ascii	"ADC_Timer_WritePeriodBuf\000"
 3603      54696D65 
 3603      725F5772 
 3603      69746550 
 3603      6572696F 
 3604              	.LASF56:
 3605 0570 636F6D70 		.ascii	"compareBuf\000"
 3605      61726542 
 3605      756600
 3606              	.LASF38:
 3607 057b 4144435F 		.ascii	"ADC_Timer_WriteCounter\000"
 3607      54696D65 
 3607      725F5772 
 3607      69746543 
 3607      6F756E74 
 3608              	.LASF74:
 3609 0592 4144435F 		.ascii	"ADC_Timer_GetInterruptSource\000"
 3609      54696D65 
 3609      725F4765 
 3609      74496E74 
 3609      65727275 
 3610              	.LASF19:
 3611 05af 656E6162 		.ascii	"enableInterrupts\000"
 3611      6C65496E 
 3611      74657272 
 3611      75707473 
 3611      00
 3612              	.LASF42:
 3613 05c0 4144435F 		.ascii	"ADC_Timer_WritePeriod\000"
 3613      54696D65 
 3613      725F5772 
 3613      69746550 
 3613      6572696F 
 3614              	.LASF28:
 3615 05d6 4144435F 		.ascii	"ADC_Timer_SetPWMMode\000"
 3615      54696D65 
 3615      725F5365 
 3615      7450574D 
 3615      4D6F6465 
 3616              	.LASF31:
 3617 05eb 73796E63 		.ascii	"syncKillEnable\000"
 3617      4B696C6C 
ARM GAS  C:\Temp\cc01nvIH.s 			page 94


 3617      456E6162 
 3617      6C6500
 3618              	.LASF47:
 3619 05fa 73776170 		.ascii	"swapEnable\000"
 3619      456E6162 
 3619      6C6500
 3620              	.LASF73:
 3621 0605 4144435F 		.ascii	"ADC_Timer_GetInterruptSourceMasked\000"
 3621      54696D65 
 3621      725F4765 
 3621      74496E74 
 3621      65727275 
 3622              	.LASF36:
 3623 0628 4144435F 		.ascii	"ADC_Timer_SetPWMInvert\000"
 3623      54696D65 
 3623      725F5365 
 3623      7450574D 
 3623      496E7665 
 3624              	.LASF49:
 3625 063f 70657269 		.ascii	"periodBuf\000"
 3625      6F644275 
 3625      6600
 3626              	.LASF63:
 3627 0649 4144435F 		.ascii	"ADC_Timer_SetStartMode\000"
 3627      54696D65 
 3627      725F5365 
 3627      74537461 
 3627      72744D6F 
 3628              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
